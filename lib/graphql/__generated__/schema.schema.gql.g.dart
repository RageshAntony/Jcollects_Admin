// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'schema.schema.gql.dart';

// **************************************************************************
// BuiltValueGenerator
// **************************************************************************

const Gadmin_panel_user_constraint
    _$gadminPanelUserConstraintadmin_panel_user_pkey =
    const Gadmin_panel_user_constraint._('admin_panel_user_pkey');

Gadmin_panel_user_constraint _$gadminPanelUserConstraintValueOf(String name) {
  switch (name) {
    case 'admin_panel_user_pkey':
      return _$gadminPanelUserConstraintadmin_panel_user_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gadmin_panel_user_constraint> _$gadminPanelUserConstraintValues =
    new BuiltSet<Gadmin_panel_user_constraint>(const <
        Gadmin_panel_user_constraint>[
  _$gadminPanelUserConstraintadmin_panel_user_pkey,
]);

const Gadmin_panel_user_select_column _$gadminPanelUserSelectColumnemail =
    const Gadmin_panel_user_select_column._('email');
const Gadmin_panel_user_select_column _$gadminPanelUserSelectColumnid =
    const Gadmin_panel_user_select_column._('id');
const Gadmin_panel_user_select_column _$gadminPanelUserSelectColumnpass =
    const Gadmin_panel_user_select_column._('pass');
const Gadmin_panel_user_select_column _$gadminPanelUserSelectColumnph_no =
    const Gadmin_panel_user_select_column._('ph_no');
const Gadmin_panel_user_select_column _$gadminPanelUserSelectColumntype =
    const Gadmin_panel_user_select_column._('type');

Gadmin_panel_user_select_column _$gadminPanelUserSelectColumnValueOf(
    String name) {
  switch (name) {
    case 'email':
      return _$gadminPanelUserSelectColumnemail;
    case 'id':
      return _$gadminPanelUserSelectColumnid;
    case 'pass':
      return _$gadminPanelUserSelectColumnpass;
    case 'ph_no':
      return _$gadminPanelUserSelectColumnph_no;
    case 'type':
      return _$gadminPanelUserSelectColumntype;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gadmin_panel_user_select_column>
    _$gadminPanelUserSelectColumnValues =
    new BuiltSet<Gadmin_panel_user_select_column>(const <
        Gadmin_panel_user_select_column>[
  _$gadminPanelUserSelectColumnemail,
  _$gadminPanelUserSelectColumnid,
  _$gadminPanelUserSelectColumnpass,
  _$gadminPanelUserSelectColumnph_no,
  _$gadminPanelUserSelectColumntype,
]);

const Gadmin_panel_user_update_column _$gadminPanelUserUpdateColumnemail =
    const Gadmin_panel_user_update_column._('email');
const Gadmin_panel_user_update_column _$gadminPanelUserUpdateColumnid =
    const Gadmin_panel_user_update_column._('id');
const Gadmin_panel_user_update_column _$gadminPanelUserUpdateColumnpass =
    const Gadmin_panel_user_update_column._('pass');
const Gadmin_panel_user_update_column _$gadminPanelUserUpdateColumnph_no =
    const Gadmin_panel_user_update_column._('ph_no');
const Gadmin_panel_user_update_column _$gadminPanelUserUpdateColumntype =
    const Gadmin_panel_user_update_column._('type');

Gadmin_panel_user_update_column _$gadminPanelUserUpdateColumnValueOf(
    String name) {
  switch (name) {
    case 'email':
      return _$gadminPanelUserUpdateColumnemail;
    case 'id':
      return _$gadminPanelUserUpdateColumnid;
    case 'pass':
      return _$gadminPanelUserUpdateColumnpass;
    case 'ph_no':
      return _$gadminPanelUserUpdateColumnph_no;
    case 'type':
      return _$gadminPanelUserUpdateColumntype;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gadmin_panel_user_update_column>
    _$gadminPanelUserUpdateColumnValues =
    new BuiltSet<Gadmin_panel_user_update_column>(const <
        Gadmin_panel_user_update_column>[
  _$gadminPanelUserUpdateColumnemail,
  _$gadminPanelUserUpdateColumnid,
  _$gadminPanelUserUpdateColumnpass,
  _$gadminPanelUserUpdateColumnph_no,
  _$gadminPanelUserUpdateColumntype,
]);

const Gcable_customers_table_constraint
    _$gcableCustomersTableConstraintcable_customers_table_pkey =
    const Gcable_customers_table_constraint._('cable_customers_table_pkey');

Gcable_customers_table_constraint _$gcableCustomersTableConstraintValueOf(
    String name) {
  switch (name) {
    case 'cable_customers_table_pkey':
      return _$gcableCustomersTableConstraintcable_customers_table_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_customers_table_constraint>
    _$gcableCustomersTableConstraintValues =
    new BuiltSet<Gcable_customers_table_constraint>(const <
        Gcable_customers_table_constraint>[
  _$gcableCustomersTableConstraintcable_customers_table_pkey,
]);

const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnaddress =
    const Gcable_customers_table_select_column._('address');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnbelongs_to =
    const Gcable_customers_table_select_column._('belongs_to');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumndesc =
    const Gcable_customers_table_select_column._('desc');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnjoined_on =
    const Gcable_customers_table_select_column._('joined_on');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnGname =
    const Gcable_customers_table_select_column._('Gname');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnpaid_month =
    const Gcable_customers_table_select_column._('paid_month');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnphone_number =
    const Gcable_customers_table_select_column._('phone_number');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnprice =
    const Gcable_customers_table_select_column._('price');
const Gcable_customers_table_select_column
    _$gcableCustomersTableSelectColumnuser_id =
    const Gcable_customers_table_select_column._('user_id');

Gcable_customers_table_select_column _$gcableCustomersTableSelectColumnValueOf(
    String name) {
  switch (name) {
    case 'address':
      return _$gcableCustomersTableSelectColumnaddress;
    case 'belongs_to':
      return _$gcableCustomersTableSelectColumnbelongs_to;
    case 'desc':
      return _$gcableCustomersTableSelectColumndesc;
    case 'joined_on':
      return _$gcableCustomersTableSelectColumnjoined_on;
    case 'Gname':
      return _$gcableCustomersTableSelectColumnGname;
    case 'paid_month':
      return _$gcableCustomersTableSelectColumnpaid_month;
    case 'phone_number':
      return _$gcableCustomersTableSelectColumnphone_number;
    case 'price':
      return _$gcableCustomersTableSelectColumnprice;
    case 'user_id':
      return _$gcableCustomersTableSelectColumnuser_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_customers_table_select_column>
    _$gcableCustomersTableSelectColumnValues =
    new BuiltSet<Gcable_customers_table_select_column>(const <
        Gcable_customers_table_select_column>[
  _$gcableCustomersTableSelectColumnaddress,
  _$gcableCustomersTableSelectColumnbelongs_to,
  _$gcableCustomersTableSelectColumndesc,
  _$gcableCustomersTableSelectColumnjoined_on,
  _$gcableCustomersTableSelectColumnGname,
  _$gcableCustomersTableSelectColumnpaid_month,
  _$gcableCustomersTableSelectColumnphone_number,
  _$gcableCustomersTableSelectColumnprice,
  _$gcableCustomersTableSelectColumnuser_id,
]);

const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnaddress =
    const Gcable_customers_table_update_column._('address');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnbelongs_to =
    const Gcable_customers_table_update_column._('belongs_to');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumndesc =
    const Gcable_customers_table_update_column._('desc');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnjoined_on =
    const Gcable_customers_table_update_column._('joined_on');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnGname =
    const Gcable_customers_table_update_column._('Gname');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnpaid_month =
    const Gcable_customers_table_update_column._('paid_month');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnphone_number =
    const Gcable_customers_table_update_column._('phone_number');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnprice =
    const Gcable_customers_table_update_column._('price');
const Gcable_customers_table_update_column
    _$gcableCustomersTableUpdateColumnuser_id =
    const Gcable_customers_table_update_column._('user_id');

Gcable_customers_table_update_column _$gcableCustomersTableUpdateColumnValueOf(
    String name) {
  switch (name) {
    case 'address':
      return _$gcableCustomersTableUpdateColumnaddress;
    case 'belongs_to':
      return _$gcableCustomersTableUpdateColumnbelongs_to;
    case 'desc':
      return _$gcableCustomersTableUpdateColumndesc;
    case 'joined_on':
      return _$gcableCustomersTableUpdateColumnjoined_on;
    case 'Gname':
      return _$gcableCustomersTableUpdateColumnGname;
    case 'paid_month':
      return _$gcableCustomersTableUpdateColumnpaid_month;
    case 'phone_number':
      return _$gcableCustomersTableUpdateColumnphone_number;
    case 'price':
      return _$gcableCustomersTableUpdateColumnprice;
    case 'user_id':
      return _$gcableCustomersTableUpdateColumnuser_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_customers_table_update_column>
    _$gcableCustomersTableUpdateColumnValues =
    new BuiltSet<Gcable_customers_table_update_column>(const <
        Gcable_customers_table_update_column>[
  _$gcableCustomersTableUpdateColumnaddress,
  _$gcableCustomersTableUpdateColumnbelongs_to,
  _$gcableCustomersTableUpdateColumndesc,
  _$gcableCustomersTableUpdateColumnjoined_on,
  _$gcableCustomersTableUpdateColumnGname,
  _$gcableCustomersTableUpdateColumnpaid_month,
  _$gcableCustomersTableUpdateColumnphone_number,
  _$gcableCustomersTableUpdateColumnprice,
  _$gcableCustomersTableUpdateColumnuser_id,
]);

const Gcable_opr_constraint _$gcableOprConstraintcable_opr_phone_no_key =
    const Gcable_opr_constraint._('cable_opr_phone_no_key');
const Gcable_opr_constraint _$gcableOprConstraintcable_opr_pkey =
    const Gcable_opr_constraint._('cable_opr_pkey');

Gcable_opr_constraint _$gcableOprConstraintValueOf(String name) {
  switch (name) {
    case 'cable_opr_phone_no_key':
      return _$gcableOprConstraintcable_opr_phone_no_key;
    case 'cable_opr_pkey':
      return _$gcableOprConstraintcable_opr_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_opr_constraint> _$gcableOprConstraintValues =
    new BuiltSet<Gcable_opr_constraint>(const <Gcable_opr_constraint>[
  _$gcableOprConstraintcable_opr_phone_no_key,
  _$gcableOprConstraintcable_opr_pkey,
]);

const Gcable_opr_select_column _$gcableOprSelectColumnaddress =
    const Gcable_opr_select_column._('address');
const Gcable_opr_select_column _$gcableOprSelectColumncable_name =
    const Gcable_opr_select_column._('cable_name');
const Gcable_opr_select_column _$gcableOprSelectColumnemail =
    const Gcable_opr_select_column._('email');
const Gcable_opr_select_column _$gcableOprSelectColumnisActive =
    const Gcable_opr_select_column._('isActive');
const Gcable_opr_select_column _$gcableOprSelectColumnpaid_month =
    const Gcable_opr_select_column._('paid_month');
const Gcable_opr_select_column _$gcableOprSelectColumnpassword =
    const Gcable_opr_select_column._('password');
const Gcable_opr_select_column _$gcableOprSelectColumnphone_no =
    const Gcable_opr_select_column._('phone_no');
const Gcable_opr_select_column _$gcableOprSelectColumnuser_id =
    const Gcable_opr_select_column._('user_id');

Gcable_opr_select_column _$gcableOprSelectColumnValueOf(String name) {
  switch (name) {
    case 'address':
      return _$gcableOprSelectColumnaddress;
    case 'cable_name':
      return _$gcableOprSelectColumncable_name;
    case 'email':
      return _$gcableOprSelectColumnemail;
    case 'isActive':
      return _$gcableOprSelectColumnisActive;
    case 'paid_month':
      return _$gcableOprSelectColumnpaid_month;
    case 'password':
      return _$gcableOprSelectColumnpassword;
    case 'phone_no':
      return _$gcableOprSelectColumnphone_no;
    case 'user_id':
      return _$gcableOprSelectColumnuser_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_opr_select_column> _$gcableOprSelectColumnValues =
    new BuiltSet<Gcable_opr_select_column>(const <Gcable_opr_select_column>[
  _$gcableOprSelectColumnaddress,
  _$gcableOprSelectColumncable_name,
  _$gcableOprSelectColumnemail,
  _$gcableOprSelectColumnisActive,
  _$gcableOprSelectColumnpaid_month,
  _$gcableOprSelectColumnpassword,
  _$gcableOprSelectColumnphone_no,
  _$gcableOprSelectColumnuser_id,
]);

const Gcable_opr_update_column _$gcableOprUpdateColumnaddress =
    const Gcable_opr_update_column._('address');
const Gcable_opr_update_column _$gcableOprUpdateColumncable_name =
    const Gcable_opr_update_column._('cable_name');
const Gcable_opr_update_column _$gcableOprUpdateColumnemail =
    const Gcable_opr_update_column._('email');
const Gcable_opr_update_column _$gcableOprUpdateColumnisActive =
    const Gcable_opr_update_column._('isActive');
const Gcable_opr_update_column _$gcableOprUpdateColumnpaid_month =
    const Gcable_opr_update_column._('paid_month');
const Gcable_opr_update_column _$gcableOprUpdateColumnpassword =
    const Gcable_opr_update_column._('password');
const Gcable_opr_update_column _$gcableOprUpdateColumnphone_no =
    const Gcable_opr_update_column._('phone_no');
const Gcable_opr_update_column _$gcableOprUpdateColumnuser_id =
    const Gcable_opr_update_column._('user_id');

Gcable_opr_update_column _$gcableOprUpdateColumnValueOf(String name) {
  switch (name) {
    case 'address':
      return _$gcableOprUpdateColumnaddress;
    case 'cable_name':
      return _$gcableOprUpdateColumncable_name;
    case 'email':
      return _$gcableOprUpdateColumnemail;
    case 'isActive':
      return _$gcableOprUpdateColumnisActive;
    case 'paid_month':
      return _$gcableOprUpdateColumnpaid_month;
    case 'password':
      return _$gcableOprUpdateColumnpassword;
    case 'phone_no':
      return _$gcableOprUpdateColumnphone_no;
    case 'user_id':
      return _$gcableOprUpdateColumnuser_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_opr_update_column> _$gcableOprUpdateColumnValues =
    new BuiltSet<Gcable_opr_update_column>(const <Gcable_opr_update_column>[
  _$gcableOprUpdateColumnaddress,
  _$gcableOprUpdateColumncable_name,
  _$gcableOprUpdateColumnemail,
  _$gcableOprUpdateColumnisActive,
  _$gcableOprUpdateColumnpaid_month,
  _$gcableOprUpdateColumnpassword,
  _$gcableOprUpdateColumnphone_no,
  _$gcableOprUpdateColumnuser_id,
]);

const Gcable_plan_constraint _$gcablePlanConstraintcable_plan_pkey =
    const Gcable_plan_constraint._('cable_plan_pkey');

Gcable_plan_constraint _$gcablePlanConstraintValueOf(String name) {
  switch (name) {
    case 'cable_plan_pkey':
      return _$gcablePlanConstraintcable_plan_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_plan_constraint> _$gcablePlanConstraintValues =
    new BuiltSet<Gcable_plan_constraint>(const <Gcable_plan_constraint>[
  _$gcablePlanConstraintcable_plan_pkey,
]);

const Gcable_plan_select_column _$gcablePlanSelectColumncable_id =
    const Gcable_plan_select_column._('cable_id');
const Gcable_plan_select_column _$gcablePlanSelectColumndesc =
    const Gcable_plan_select_column._('desc');
const Gcable_plan_select_column _$gcablePlanSelectColumnfees =
    const Gcable_plan_select_column._('fees');
const Gcable_plan_select_column _$gcablePlanSelectColumnGname =
    const Gcable_plan_select_column._('Gname');
const Gcable_plan_select_column _$gcablePlanSelectColumnplan_id =
    const Gcable_plan_select_column._('plan_id');

Gcable_plan_select_column _$gcablePlanSelectColumnValueOf(String name) {
  switch (name) {
    case 'cable_id':
      return _$gcablePlanSelectColumncable_id;
    case 'desc':
      return _$gcablePlanSelectColumndesc;
    case 'fees':
      return _$gcablePlanSelectColumnfees;
    case 'Gname':
      return _$gcablePlanSelectColumnGname;
    case 'plan_id':
      return _$gcablePlanSelectColumnplan_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_plan_select_column> _$gcablePlanSelectColumnValues =
    new BuiltSet<Gcable_plan_select_column>(const <Gcable_plan_select_column>[
  _$gcablePlanSelectColumncable_id,
  _$gcablePlanSelectColumndesc,
  _$gcablePlanSelectColumnfees,
  _$gcablePlanSelectColumnGname,
  _$gcablePlanSelectColumnplan_id,
]);

const Gcable_plan_update_column _$gcablePlanUpdateColumncable_id =
    const Gcable_plan_update_column._('cable_id');
const Gcable_plan_update_column _$gcablePlanUpdateColumndesc =
    const Gcable_plan_update_column._('desc');
const Gcable_plan_update_column _$gcablePlanUpdateColumnfees =
    const Gcable_plan_update_column._('fees');
const Gcable_plan_update_column _$gcablePlanUpdateColumnGname =
    const Gcable_plan_update_column._('Gname');
const Gcable_plan_update_column _$gcablePlanUpdateColumnplan_id =
    const Gcable_plan_update_column._('plan_id');

Gcable_plan_update_column _$gcablePlanUpdateColumnValueOf(String name) {
  switch (name) {
    case 'cable_id':
      return _$gcablePlanUpdateColumncable_id;
    case 'desc':
      return _$gcablePlanUpdateColumndesc;
    case 'fees':
      return _$gcablePlanUpdateColumnfees;
    case 'Gname':
      return _$gcablePlanUpdateColumnGname;
    case 'plan_id':
      return _$gcablePlanUpdateColumnplan_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_plan_update_column> _$gcablePlanUpdateColumnValues =
    new BuiltSet<Gcable_plan_update_column>(const <Gcable_plan_update_column>[
  _$gcablePlanUpdateColumncable_id,
  _$gcablePlanUpdateColumndesc,
  _$gcablePlanUpdateColumnfees,
  _$gcablePlanUpdateColumnGname,
  _$gcablePlanUpdateColumnplan_id,
]);

const Gcable_subscription_fee_constraint
    _$gcableSubscriptionFeeConstraintcable_subscription_fee_pkey =
    const Gcable_subscription_fee_constraint._('cable_subscription_fee_pkey');

Gcable_subscription_fee_constraint _$gcableSubscriptionFeeConstraintValueOf(
    String name) {
  switch (name) {
    case 'cable_subscription_fee_pkey':
      return _$gcableSubscriptionFeeConstraintcable_subscription_fee_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_subscription_fee_constraint>
    _$gcableSubscriptionFeeConstraintValues =
    new BuiltSet<Gcable_subscription_fee_constraint>(const <
        Gcable_subscription_fee_constraint>[
  _$gcableSubscriptionFeeConstraintcable_subscription_fee_pkey,
]);

const Gcable_subscription_fee_select_column
    _$gcableSubscriptionFeeSelectColumndate =
    const Gcable_subscription_fee_select_column._('date');
const Gcable_subscription_fee_select_column
    _$gcableSubscriptionFeeSelectColumnfee =
    const Gcable_subscription_fee_select_column._('fee');
const Gcable_subscription_fee_select_column
    _$gcableSubscriptionFeeSelectColumnid =
    const Gcable_subscription_fee_select_column._('id');

Gcable_subscription_fee_select_column
    _$gcableSubscriptionFeeSelectColumnValueOf(String name) {
  switch (name) {
    case 'date':
      return _$gcableSubscriptionFeeSelectColumndate;
    case 'fee':
      return _$gcableSubscriptionFeeSelectColumnfee;
    case 'id':
      return _$gcableSubscriptionFeeSelectColumnid;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_subscription_fee_select_column>
    _$gcableSubscriptionFeeSelectColumnValues =
    new BuiltSet<Gcable_subscription_fee_select_column>(const <
        Gcable_subscription_fee_select_column>[
  _$gcableSubscriptionFeeSelectColumndate,
  _$gcableSubscriptionFeeSelectColumnfee,
  _$gcableSubscriptionFeeSelectColumnid,
]);

const Gcable_subscription_fee_update_column
    _$gcableSubscriptionFeeUpdateColumndate =
    const Gcable_subscription_fee_update_column._('date');
const Gcable_subscription_fee_update_column
    _$gcableSubscriptionFeeUpdateColumnfee =
    const Gcable_subscription_fee_update_column._('fee');
const Gcable_subscription_fee_update_column
    _$gcableSubscriptionFeeUpdateColumnid =
    const Gcable_subscription_fee_update_column._('id');

Gcable_subscription_fee_update_column
    _$gcableSubscriptionFeeUpdateColumnValueOf(String name) {
  switch (name) {
    case 'date':
      return _$gcableSubscriptionFeeUpdateColumndate;
    case 'fee':
      return _$gcableSubscriptionFeeUpdateColumnfee;
    case 'id':
      return _$gcableSubscriptionFeeUpdateColumnid;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_subscription_fee_update_column>
    _$gcableSubscriptionFeeUpdateColumnValues =
    new BuiltSet<Gcable_subscription_fee_update_column>(const <
        Gcable_subscription_fee_update_column>[
  _$gcableSubscriptionFeeUpdateColumndate,
  _$gcableSubscriptionFeeUpdateColumnfee,
  _$gcableSubscriptionFeeUpdateColumnid,
]);

const Gcable_subscriptions_constraint
    _$gcableSubscriptionsConstraintcable_subscriptions_id_key =
    const Gcable_subscriptions_constraint._('cable_subscriptions_id_key');
const Gcable_subscriptions_constraint
    _$gcableSubscriptionsConstraintcable_subscriptions_pkey =
    const Gcable_subscriptions_constraint._('cable_subscriptions_pkey');

Gcable_subscriptions_constraint _$gcableSubscriptionsConstraintValueOf(
    String name) {
  switch (name) {
    case 'cable_subscriptions_id_key':
      return _$gcableSubscriptionsConstraintcable_subscriptions_id_key;
    case 'cable_subscriptions_pkey':
      return _$gcableSubscriptionsConstraintcable_subscriptions_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_subscriptions_constraint>
    _$gcableSubscriptionsConstraintValues =
    new BuiltSet<Gcable_subscriptions_constraint>(const <
        Gcable_subscriptions_constraint>[
  _$gcableSubscriptionsConstraintcable_subscriptions_id_key,
  _$gcableSubscriptionsConstraintcable_subscriptions_pkey,
]);

const Gcable_subscriptions_select_column
    _$gcableSubscriptionsSelectColumnacc_ph_upi =
    const Gcable_subscriptions_select_column._('acc_ph_upi');
const Gcable_subscriptions_select_column
    _$gcableSubscriptionsSelectColumncable_id =
    const Gcable_subscriptions_select_column._('cable_id');
const Gcable_subscriptions_select_column _$gcableSubscriptionsSelectColumndate =
    const Gcable_subscriptions_select_column._('date');
const Gcable_subscriptions_select_column _$gcableSubscriptionsSelectColumnfee =
    const Gcable_subscriptions_select_column._('fee');
const Gcable_subscriptions_select_column _$gcableSubscriptionsSelectColumnid =
    const Gcable_subscriptions_select_column._('id');
const Gcable_subscriptions_select_column
    _$gcableSubscriptionsSelectColumnpaid_on =
    const Gcable_subscriptions_select_column._('paid_on');
const Gcable_subscriptions_select_column
    _$gcableSubscriptionsSelectColumntrans_id =
    const Gcable_subscriptions_select_column._('trans_id');
const Gcable_subscriptions_select_column _$gcableSubscriptionsSelectColumntype =
    const Gcable_subscriptions_select_column._('type');

Gcable_subscriptions_select_column _$gcableSubscriptionsSelectColumnValueOf(
    String name) {
  switch (name) {
    case 'acc_ph_upi':
      return _$gcableSubscriptionsSelectColumnacc_ph_upi;
    case 'cable_id':
      return _$gcableSubscriptionsSelectColumncable_id;
    case 'date':
      return _$gcableSubscriptionsSelectColumndate;
    case 'fee':
      return _$gcableSubscriptionsSelectColumnfee;
    case 'id':
      return _$gcableSubscriptionsSelectColumnid;
    case 'paid_on':
      return _$gcableSubscriptionsSelectColumnpaid_on;
    case 'trans_id':
      return _$gcableSubscriptionsSelectColumntrans_id;
    case 'type':
      return _$gcableSubscriptionsSelectColumntype;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_subscriptions_select_column>
    _$gcableSubscriptionsSelectColumnValues =
    new BuiltSet<Gcable_subscriptions_select_column>(const <
        Gcable_subscriptions_select_column>[
  _$gcableSubscriptionsSelectColumnacc_ph_upi,
  _$gcableSubscriptionsSelectColumncable_id,
  _$gcableSubscriptionsSelectColumndate,
  _$gcableSubscriptionsSelectColumnfee,
  _$gcableSubscriptionsSelectColumnid,
  _$gcableSubscriptionsSelectColumnpaid_on,
  _$gcableSubscriptionsSelectColumntrans_id,
  _$gcableSubscriptionsSelectColumntype,
]);

const Gcable_subscriptions_update_column
    _$gcableSubscriptionsUpdateColumnacc_ph_upi =
    const Gcable_subscriptions_update_column._('acc_ph_upi');
const Gcable_subscriptions_update_column
    _$gcableSubscriptionsUpdateColumncable_id =
    const Gcable_subscriptions_update_column._('cable_id');
const Gcable_subscriptions_update_column _$gcableSubscriptionsUpdateColumndate =
    const Gcable_subscriptions_update_column._('date');
const Gcable_subscriptions_update_column _$gcableSubscriptionsUpdateColumnfee =
    const Gcable_subscriptions_update_column._('fee');
const Gcable_subscriptions_update_column _$gcableSubscriptionsUpdateColumnid =
    const Gcable_subscriptions_update_column._('id');
const Gcable_subscriptions_update_column
    _$gcableSubscriptionsUpdateColumnpaid_on =
    const Gcable_subscriptions_update_column._('paid_on');
const Gcable_subscriptions_update_column
    _$gcableSubscriptionsUpdateColumntrans_id =
    const Gcable_subscriptions_update_column._('trans_id');
const Gcable_subscriptions_update_column _$gcableSubscriptionsUpdateColumntype =
    const Gcable_subscriptions_update_column._('type');

Gcable_subscriptions_update_column _$gcableSubscriptionsUpdateColumnValueOf(
    String name) {
  switch (name) {
    case 'acc_ph_upi':
      return _$gcableSubscriptionsUpdateColumnacc_ph_upi;
    case 'cable_id':
      return _$gcableSubscriptionsUpdateColumncable_id;
    case 'date':
      return _$gcableSubscriptionsUpdateColumndate;
    case 'fee':
      return _$gcableSubscriptionsUpdateColumnfee;
    case 'id':
      return _$gcableSubscriptionsUpdateColumnid;
    case 'paid_on':
      return _$gcableSubscriptionsUpdateColumnpaid_on;
    case 'trans_id':
      return _$gcableSubscriptionsUpdateColumntrans_id;
    case 'type':
      return _$gcableSubscriptionsUpdateColumntype;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcable_subscriptions_update_column>
    _$gcableSubscriptionsUpdateColumnValues =
    new BuiltSet<Gcable_subscriptions_update_column>(const <
        Gcable_subscriptions_update_column>[
  _$gcableSubscriptionsUpdateColumnacc_ph_upi,
  _$gcableSubscriptionsUpdateColumncable_id,
  _$gcableSubscriptionsUpdateColumndate,
  _$gcableSubscriptionsUpdateColumnfee,
  _$gcableSubscriptionsUpdateColumnid,
  _$gcableSubscriptionsUpdateColumnpaid_on,
  _$gcableSubscriptionsUpdateColumntrans_id,
  _$gcableSubscriptionsUpdateColumntype,
]);

const Gcollectors_constraint _$gcollectorsConstraintcollectors_pkey =
    const Gcollectors_constraint._('collectors_pkey');

Gcollectors_constraint _$gcollectorsConstraintValueOf(String name) {
  switch (name) {
    case 'collectors_pkey':
      return _$gcollectorsConstraintcollectors_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcollectors_constraint> _$gcollectorsConstraintValues =
    new BuiltSet<Gcollectors_constraint>(const <Gcollectors_constraint>[
  _$gcollectorsConstraintcollectors_pkey,
]);

const Gcollectors_select_column _$gcollectorsSelectColumnaddress =
    const Gcollectors_select_column._('address');
const Gcollectors_select_column _$gcollectorsSelectColumnbelongs_to =
    const Gcollectors_select_column._('belongs_to');
const Gcollectors_select_column _$gcollectorsSelectColumncollec_id =
    const Gcollectors_select_column._('collec_id');
const Gcollectors_select_column _$gcollectorsSelectColumndevice_token =
    const Gcollectors_select_column._('device_token');
const Gcollectors_select_column _$gcollectorsSelectColumnemail =
    const Gcollectors_select_column._('email');
const Gcollectors_select_column _$gcollectorsSelectColumnisAdmin =
    const Gcollectors_select_column._('isAdmin');
const Gcollectors_select_column _$gcollectorsSelectColumnmob_no =
    const Gcollectors_select_column._('mob_no');
const Gcollectors_select_column _$gcollectorsSelectColumnGname =
    const Gcollectors_select_column._('Gname');
const Gcollectors_select_column _$gcollectorsSelectColumnpassword =
    const Gcollectors_select_column._('password');

Gcollectors_select_column _$gcollectorsSelectColumnValueOf(String name) {
  switch (name) {
    case 'address':
      return _$gcollectorsSelectColumnaddress;
    case 'belongs_to':
      return _$gcollectorsSelectColumnbelongs_to;
    case 'collec_id':
      return _$gcollectorsSelectColumncollec_id;
    case 'device_token':
      return _$gcollectorsSelectColumndevice_token;
    case 'email':
      return _$gcollectorsSelectColumnemail;
    case 'isAdmin':
      return _$gcollectorsSelectColumnisAdmin;
    case 'mob_no':
      return _$gcollectorsSelectColumnmob_no;
    case 'Gname':
      return _$gcollectorsSelectColumnGname;
    case 'password':
      return _$gcollectorsSelectColumnpassword;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcollectors_select_column> _$gcollectorsSelectColumnValues =
    new BuiltSet<Gcollectors_select_column>(const <Gcollectors_select_column>[
  _$gcollectorsSelectColumnaddress,
  _$gcollectorsSelectColumnbelongs_to,
  _$gcollectorsSelectColumncollec_id,
  _$gcollectorsSelectColumndevice_token,
  _$gcollectorsSelectColumnemail,
  _$gcollectorsSelectColumnisAdmin,
  _$gcollectorsSelectColumnmob_no,
  _$gcollectorsSelectColumnGname,
  _$gcollectorsSelectColumnpassword,
]);

const Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolAndArgumentsColumnsisAdmin =
    const Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
        ._('isAdmin');

Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolAndArgumentsColumnsValueOf(
        String name) {
  switch (name) {
    case 'isAdmin':
      return _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolAndArgumentsColumnsisAdmin;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<
        Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns>
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolAndArgumentsColumnsValues =
    new BuiltSet<Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns>(const <
        Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns>[
  _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolAndArgumentsColumnsisAdmin,
]);

const Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolOrArgumentsColumnsisAdmin =
    const Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
        ._('isAdmin');

Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolOrArgumentsColumnsValueOf(
        String name) {
  switch (name) {
    case 'isAdmin':
      return _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolOrArgumentsColumnsisAdmin;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<
        Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns>
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolOrArgumentsColumnsValues =
    new BuiltSet<Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns>(const <
        Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns>[
  _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolOrArgumentsColumnsisAdmin,
]);

const Gcollectors_update_column _$gcollectorsUpdateColumnaddress =
    const Gcollectors_update_column._('address');
const Gcollectors_update_column _$gcollectorsUpdateColumnbelongs_to =
    const Gcollectors_update_column._('belongs_to');
const Gcollectors_update_column _$gcollectorsUpdateColumncollec_id =
    const Gcollectors_update_column._('collec_id');
const Gcollectors_update_column _$gcollectorsUpdateColumndevice_token =
    const Gcollectors_update_column._('device_token');
const Gcollectors_update_column _$gcollectorsUpdateColumnemail =
    const Gcollectors_update_column._('email');
const Gcollectors_update_column _$gcollectorsUpdateColumnisAdmin =
    const Gcollectors_update_column._('isAdmin');
const Gcollectors_update_column _$gcollectorsUpdateColumnmob_no =
    const Gcollectors_update_column._('mob_no');
const Gcollectors_update_column _$gcollectorsUpdateColumnGname =
    const Gcollectors_update_column._('Gname');
const Gcollectors_update_column _$gcollectorsUpdateColumnpassword =
    const Gcollectors_update_column._('password');

Gcollectors_update_column _$gcollectorsUpdateColumnValueOf(String name) {
  switch (name) {
    case 'address':
      return _$gcollectorsUpdateColumnaddress;
    case 'belongs_to':
      return _$gcollectorsUpdateColumnbelongs_to;
    case 'collec_id':
      return _$gcollectorsUpdateColumncollec_id;
    case 'device_token':
      return _$gcollectorsUpdateColumndevice_token;
    case 'email':
      return _$gcollectorsUpdateColumnemail;
    case 'isAdmin':
      return _$gcollectorsUpdateColumnisAdmin;
    case 'mob_no':
      return _$gcollectorsUpdateColumnmob_no;
    case 'Gname':
      return _$gcollectorsUpdateColumnGname;
    case 'password':
      return _$gcollectorsUpdateColumnpassword;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcollectors_update_column> _$gcollectorsUpdateColumnValues =
    new BuiltSet<Gcollectors_update_column>(const <Gcollectors_update_column>[
  _$gcollectorsUpdateColumnaddress,
  _$gcollectorsUpdateColumnbelongs_to,
  _$gcollectorsUpdateColumncollec_id,
  _$gcollectorsUpdateColumndevice_token,
  _$gcollectorsUpdateColumnemail,
  _$gcollectorsUpdateColumnisAdmin,
  _$gcollectorsUpdateColumnmob_no,
  _$gcollectorsUpdateColumnGname,
  _$gcollectorsUpdateColumnpassword,
]);

const Gcursor_ordering _$gcursorOrderingASC = const Gcursor_ordering._('ASC');
const Gcursor_ordering _$gcursorOrderingDESC = const Gcursor_ordering._('DESC');

Gcursor_ordering _$gcursorOrderingValueOf(String name) {
  switch (name) {
    case 'ASC':
      return _$gcursorOrderingASC;
    case 'DESC':
      return _$gcursorOrderingDESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcursor_ordering> _$gcursorOrderingValues =
    new BuiltSet<Gcursor_ordering>(const <Gcursor_ordering>[
  _$gcursorOrderingASC,
  _$gcursorOrderingDESC,
]);

const Gcustomer_constraint _$gcustomerConstraintcustomer_pkey =
    const Gcustomer_constraint._('customer_pkey');

Gcustomer_constraint _$gcustomerConstraintValueOf(String name) {
  switch (name) {
    case 'customer_pkey':
      return _$gcustomerConstraintcustomer_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcustomer_constraint> _$gcustomerConstraintValues =
    new BuiltSet<Gcustomer_constraint>(const <Gcustomer_constraint>[
  _$gcustomerConstraintcustomer_pkey,
]);

const Gcustomer_select_column _$gcustomerSelectColumnemail =
    const Gcustomer_select_column._('email');
const Gcustomer_select_column _$gcustomerSelectColumnfirst_name =
    const Gcustomer_select_column._('first_name');
const Gcustomer_select_column _$gcustomerSelectColumnid =
    const Gcustomer_select_column._('id');
const Gcustomer_select_column _$gcustomerSelectColumnip_address =
    const Gcustomer_select_column._('ip_address');
const Gcustomer_select_column _$gcustomerSelectColumnlast_name =
    const Gcustomer_select_column._('last_name');
const Gcustomer_select_column _$gcustomerSelectColumnphone =
    const Gcustomer_select_column._('phone');
const Gcustomer_select_column _$gcustomerSelectColumnusername =
    const Gcustomer_select_column._('username');

Gcustomer_select_column _$gcustomerSelectColumnValueOf(String name) {
  switch (name) {
    case 'email':
      return _$gcustomerSelectColumnemail;
    case 'first_name':
      return _$gcustomerSelectColumnfirst_name;
    case 'id':
      return _$gcustomerSelectColumnid;
    case 'ip_address':
      return _$gcustomerSelectColumnip_address;
    case 'last_name':
      return _$gcustomerSelectColumnlast_name;
    case 'phone':
      return _$gcustomerSelectColumnphone;
    case 'username':
      return _$gcustomerSelectColumnusername;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcustomer_select_column> _$gcustomerSelectColumnValues =
    new BuiltSet<Gcustomer_select_column>(const <Gcustomer_select_column>[
  _$gcustomerSelectColumnemail,
  _$gcustomerSelectColumnfirst_name,
  _$gcustomerSelectColumnid,
  _$gcustomerSelectColumnip_address,
  _$gcustomerSelectColumnlast_name,
  _$gcustomerSelectColumnphone,
  _$gcustomerSelectColumnusername,
]);

const Gcustomer_update_column _$gcustomerUpdateColumnemail =
    const Gcustomer_update_column._('email');
const Gcustomer_update_column _$gcustomerUpdateColumnfirst_name =
    const Gcustomer_update_column._('first_name');
const Gcustomer_update_column _$gcustomerUpdateColumnid =
    const Gcustomer_update_column._('id');
const Gcustomer_update_column _$gcustomerUpdateColumnip_address =
    const Gcustomer_update_column._('ip_address');
const Gcustomer_update_column _$gcustomerUpdateColumnlast_name =
    const Gcustomer_update_column._('last_name');
const Gcustomer_update_column _$gcustomerUpdateColumnphone =
    const Gcustomer_update_column._('phone');
const Gcustomer_update_column _$gcustomerUpdateColumnusername =
    const Gcustomer_update_column._('username');

Gcustomer_update_column _$gcustomerUpdateColumnValueOf(String name) {
  switch (name) {
    case 'email':
      return _$gcustomerUpdateColumnemail;
    case 'first_name':
      return _$gcustomerUpdateColumnfirst_name;
    case 'id':
      return _$gcustomerUpdateColumnid;
    case 'ip_address':
      return _$gcustomerUpdateColumnip_address;
    case 'last_name':
      return _$gcustomerUpdateColumnlast_name;
    case 'phone':
      return _$gcustomerUpdateColumnphone;
    case 'username':
      return _$gcustomerUpdateColumnusername;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gcustomer_update_column> _$gcustomerUpdateColumnValues =
    new BuiltSet<Gcustomer_update_column>(const <Gcustomer_update_column>[
  _$gcustomerUpdateColumnemail,
  _$gcustomerUpdateColumnfirst_name,
  _$gcustomerUpdateColumnid,
  _$gcustomerUpdateColumnip_address,
  _$gcustomerUpdateColumnlast_name,
  _$gcustomerUpdateColumnphone,
  _$gcustomerUpdateColumnusername,
]);

const Gnotifications_constraint
    _$gnotificationsConstraintnotifications_not_id_key =
    const Gnotifications_constraint._('notifications_not_id_key');
const Gnotifications_constraint _$gnotificationsConstraintnotifications_pkey =
    const Gnotifications_constraint._('notifications_pkey');

Gnotifications_constraint _$gnotificationsConstraintValueOf(String name) {
  switch (name) {
    case 'notifications_not_id_key':
      return _$gnotificationsConstraintnotifications_not_id_key;
    case 'notifications_pkey':
      return _$gnotificationsConstraintnotifications_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gnotifications_constraint> _$gnotificationsConstraintValues =
    new BuiltSet<Gnotifications_constraint>(const <Gnotifications_constraint>[
  _$gnotificationsConstraintnotifications_not_id_key,
  _$gnotificationsConstraintnotifications_pkey,
]);

const Gnotifications_select_column _$gnotificationsSelectColumncable_id =
    const Gnotifications_select_column._('cable_id');
const Gnotifications_select_column _$gnotificationsSelectColumnisRead =
    const Gnotifications_select_column._('isRead');
const Gnotifications_select_column _$gnotificationsSelectColumnnot_id =
    const Gnotifications_select_column._('not_id');
const Gnotifications_select_column _$gnotificationsSelectColumnpay_id =
    const Gnotifications_select_column._('pay_id');

Gnotifications_select_column _$gnotificationsSelectColumnValueOf(String name) {
  switch (name) {
    case 'cable_id':
      return _$gnotificationsSelectColumncable_id;
    case 'isRead':
      return _$gnotificationsSelectColumnisRead;
    case 'not_id':
      return _$gnotificationsSelectColumnnot_id;
    case 'pay_id':
      return _$gnotificationsSelectColumnpay_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gnotifications_select_column>
    _$gnotificationsSelectColumnValues = new BuiltSet<
        Gnotifications_select_column>(const <Gnotifications_select_column>[
  _$gnotificationsSelectColumncable_id,
  _$gnotificationsSelectColumnisRead,
  _$gnotificationsSelectColumnnot_id,
  _$gnotificationsSelectColumnpay_id,
]);

const Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumnsisRead =
    const Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
        ._('isRead');

Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumnsValueOf(
        String name) {
  switch (name) {
    case 'isRead':
      return _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumnsisRead;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<
        Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns>
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumnsValues =
    new BuiltSet<Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns>(const <
        Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns>[
  _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumnsisRead,
]);

const Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumnsisRead =
    const Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
        ._('isRead');

Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumnsValueOf(
        String name) {
  switch (name) {
    case 'isRead':
      return _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumnsisRead;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<
        Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns>
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumnsValues =
    new BuiltSet<Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns>(const <
        Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns>[
  _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumnsisRead,
]);

const Gnotifications_update_column _$gnotificationsUpdateColumncable_id =
    const Gnotifications_update_column._('cable_id');
const Gnotifications_update_column _$gnotificationsUpdateColumnisRead =
    const Gnotifications_update_column._('isRead');
const Gnotifications_update_column _$gnotificationsUpdateColumnnot_id =
    const Gnotifications_update_column._('not_id');
const Gnotifications_update_column _$gnotificationsUpdateColumnpay_id =
    const Gnotifications_update_column._('pay_id');

Gnotifications_update_column _$gnotificationsUpdateColumnValueOf(String name) {
  switch (name) {
    case 'cable_id':
      return _$gnotificationsUpdateColumncable_id;
    case 'isRead':
      return _$gnotificationsUpdateColumnisRead;
    case 'not_id':
      return _$gnotificationsUpdateColumnnot_id;
    case 'pay_id':
      return _$gnotificationsUpdateColumnpay_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gnotifications_update_column>
    _$gnotificationsUpdateColumnValues = new BuiltSet<
        Gnotifications_update_column>(const <Gnotifications_update_column>[
  _$gnotificationsUpdateColumncable_id,
  _$gnotificationsUpdateColumnisRead,
  _$gnotificationsUpdateColumnnot_id,
  _$gnotificationsUpdateColumnpay_id,
]);

const Gorder_by _$gorderByasc = const Gorder_by._('asc');
const Gorder_by _$gorderByasc_nulls_first =
    const Gorder_by._('asc_nulls_first');
const Gorder_by _$gorderByasc_nulls_last = const Gorder_by._('asc_nulls_last');
const Gorder_by _$gorderBydesc = const Gorder_by._('desc');
const Gorder_by _$gorderBydesc_nulls_first =
    const Gorder_by._('desc_nulls_first');
const Gorder_by _$gorderBydesc_nulls_last =
    const Gorder_by._('desc_nulls_last');

Gorder_by _$gorderByValueOf(String name) {
  switch (name) {
    case 'asc':
      return _$gorderByasc;
    case 'asc_nulls_first':
      return _$gorderByasc_nulls_first;
    case 'asc_nulls_last':
      return _$gorderByasc_nulls_last;
    case 'desc':
      return _$gorderBydesc;
    case 'desc_nulls_first':
      return _$gorderBydesc_nulls_first;
    case 'desc_nulls_last':
      return _$gorderBydesc_nulls_last;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gorder_by> _$gorderByValues =
    new BuiltSet<Gorder_by>(const <Gorder_by>[
  _$gorderByasc,
  _$gorderByasc_nulls_first,
  _$gorderByasc_nulls_last,
  _$gorderBydesc,
  _$gorderBydesc_nulls_first,
  _$gorderBydesc_nulls_last,
]);

const Gorder_constraint _$gorderConstraintorder_pkey =
    const Gorder_constraint._('order_pkey');

Gorder_constraint _$gorderConstraintValueOf(String name) {
  switch (name) {
    case 'order_pkey':
      return _$gorderConstraintorder_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gorder_constraint> _$gorderConstraintValues =
    new BuiltSet<Gorder_constraint>(const <Gorder_constraint>[
  _$gorderConstraintorder_pkey,
]);

const Gorder_select_column _$gorderSelectColumncustomer_id =
    const Gorder_select_column._('customer_id');
const Gorder_select_column _$gorderSelectColumndiscount_price =
    const Gorder_select_column._('discount_price');
const Gorder_select_column _$gorderSelectColumnid =
    const Gorder_select_column._('id');
const Gorder_select_column _$gorderSelectColumnorder_date =
    const Gorder_select_column._('order_date');
const Gorder_select_column _$gorderSelectColumnproduct =
    const Gorder_select_column._('product');
const Gorder_select_column _$gorderSelectColumnpurchase_price =
    const Gorder_select_column._('purchase_price');
const Gorder_select_column _$gorderSelectColumntransaction_id =
    const Gorder_select_column._('transaction_id');

Gorder_select_column _$gorderSelectColumnValueOf(String name) {
  switch (name) {
    case 'customer_id':
      return _$gorderSelectColumncustomer_id;
    case 'discount_price':
      return _$gorderSelectColumndiscount_price;
    case 'id':
      return _$gorderSelectColumnid;
    case 'order_date':
      return _$gorderSelectColumnorder_date;
    case 'product':
      return _$gorderSelectColumnproduct;
    case 'purchase_price':
      return _$gorderSelectColumnpurchase_price;
    case 'transaction_id':
      return _$gorderSelectColumntransaction_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gorder_select_column> _$gorderSelectColumnValues =
    new BuiltSet<Gorder_select_column>(const <Gorder_select_column>[
  _$gorderSelectColumncustomer_id,
  _$gorderSelectColumndiscount_price,
  _$gorderSelectColumnid,
  _$gorderSelectColumnorder_date,
  _$gorderSelectColumnproduct,
  _$gorderSelectColumnpurchase_price,
  _$gorderSelectColumntransaction_id,
]);

const Gorder_update_column _$gorderUpdateColumncustomer_id =
    const Gorder_update_column._('customer_id');
const Gorder_update_column _$gorderUpdateColumndiscount_price =
    const Gorder_update_column._('discount_price');
const Gorder_update_column _$gorderUpdateColumnid =
    const Gorder_update_column._('id');
const Gorder_update_column _$gorderUpdateColumnorder_date =
    const Gorder_update_column._('order_date');
const Gorder_update_column _$gorderUpdateColumnproduct =
    const Gorder_update_column._('product');
const Gorder_update_column _$gorderUpdateColumnpurchase_price =
    const Gorder_update_column._('purchase_price');
const Gorder_update_column _$gorderUpdateColumntransaction_id =
    const Gorder_update_column._('transaction_id');

Gorder_update_column _$gorderUpdateColumnValueOf(String name) {
  switch (name) {
    case 'customer_id':
      return _$gorderUpdateColumncustomer_id;
    case 'discount_price':
      return _$gorderUpdateColumndiscount_price;
    case 'id':
      return _$gorderUpdateColumnid;
    case 'order_date':
      return _$gorderUpdateColumnorder_date;
    case 'product':
      return _$gorderUpdateColumnproduct;
    case 'purchase_price':
      return _$gorderUpdateColumnpurchase_price;
    case 'transaction_id':
      return _$gorderUpdateColumntransaction_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gorder_update_column> _$gorderUpdateColumnValues =
    new BuiltSet<Gorder_update_column>(const <Gorder_update_column>[
  _$gorderUpdateColumncustomer_id,
  _$gorderUpdateColumndiscount_price,
  _$gorderUpdateColumnid,
  _$gorderUpdateColumnorder_date,
  _$gorderUpdateColumnproduct,
  _$gorderUpdateColumnpurchase_price,
  _$gorderUpdateColumntransaction_id,
]);

const Gpayments_constraint _$gpaymentsConstraintpayments_id_key =
    const Gpayments_constraint._('payments_id_key');
const Gpayments_constraint _$gpaymentsConstraintpayments_pkey =
    const Gpayments_constraint._('payments_pkey');

Gpayments_constraint _$gpaymentsConstraintValueOf(String name) {
  switch (name) {
    case 'payments_id_key':
      return _$gpaymentsConstraintpayments_id_key;
    case 'payments_pkey':
      return _$gpaymentsConstraintpayments_pkey;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gpayments_constraint> _$gpaymentsConstraintValues =
    new BuiltSet<Gpayments_constraint>(const <Gpayments_constraint>[
  _$gpaymentsConstraintpayments_id_key,
  _$gpaymentsConstraintpayments_pkey,
]);

const Gpayments_select_column _$gpaymentsSelectColumncable_id =
    const Gpayments_select_column._('cable_id');
const Gpayments_select_column _$gpaymentsSelectColumncollected_by =
    const Gpayments_select_column._('collected_by');
const Gpayments_select_column _$gpaymentsSelectColumndate =
    const Gpayments_select_column._('date');
const Gpayments_select_column _$gpaymentsSelectColumnid =
    const Gpayments_select_column._('id');
const Gpayments_select_column _$gpaymentsSelectColumnpaid_on =
    const Gpayments_select_column._('paid_on');
const Gpayments_select_column _$gpaymentsSelectColumntrans_id =
    const Gpayments_select_column._('trans_id');
const Gpayments_select_column _$gpaymentsSelectColumnuser_id =
    const Gpayments_select_column._('user_id');

Gpayments_select_column _$gpaymentsSelectColumnValueOf(String name) {
  switch (name) {
    case 'cable_id':
      return _$gpaymentsSelectColumncable_id;
    case 'collected_by':
      return _$gpaymentsSelectColumncollected_by;
    case 'date':
      return _$gpaymentsSelectColumndate;
    case 'id':
      return _$gpaymentsSelectColumnid;
    case 'paid_on':
      return _$gpaymentsSelectColumnpaid_on;
    case 'trans_id':
      return _$gpaymentsSelectColumntrans_id;
    case 'user_id':
      return _$gpaymentsSelectColumnuser_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gpayments_select_column> _$gpaymentsSelectColumnValues =
    new BuiltSet<Gpayments_select_column>(const <Gpayments_select_column>[
  _$gpaymentsSelectColumncable_id,
  _$gpaymentsSelectColumncollected_by,
  _$gpaymentsSelectColumndate,
  _$gpaymentsSelectColumnid,
  _$gpaymentsSelectColumnpaid_on,
  _$gpaymentsSelectColumntrans_id,
  _$gpaymentsSelectColumnuser_id,
]);

const Gpayments_update_column _$gpaymentsUpdateColumncable_id =
    const Gpayments_update_column._('cable_id');
const Gpayments_update_column _$gpaymentsUpdateColumncollected_by =
    const Gpayments_update_column._('collected_by');
const Gpayments_update_column _$gpaymentsUpdateColumndate =
    const Gpayments_update_column._('date');
const Gpayments_update_column _$gpaymentsUpdateColumnid =
    const Gpayments_update_column._('id');
const Gpayments_update_column _$gpaymentsUpdateColumnpaid_on =
    const Gpayments_update_column._('paid_on');
const Gpayments_update_column _$gpaymentsUpdateColumntrans_id =
    const Gpayments_update_column._('trans_id');
const Gpayments_update_column _$gpaymentsUpdateColumnuser_id =
    const Gpayments_update_column._('user_id');

Gpayments_update_column _$gpaymentsUpdateColumnValueOf(String name) {
  switch (name) {
    case 'cable_id':
      return _$gpaymentsUpdateColumncable_id;
    case 'collected_by':
      return _$gpaymentsUpdateColumncollected_by;
    case 'date':
      return _$gpaymentsUpdateColumndate;
    case 'id':
      return _$gpaymentsUpdateColumnid;
    case 'paid_on':
      return _$gpaymentsUpdateColumnpaid_on;
    case 'trans_id':
      return _$gpaymentsUpdateColumntrans_id;
    case 'user_id':
      return _$gpaymentsUpdateColumnuser_id;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Gpayments_update_column> _$gpaymentsUpdateColumnValues =
    new BuiltSet<Gpayments_update_column>(const <Gpayments_update_column>[
  _$gpaymentsUpdateColumncable_id,
  _$gpaymentsUpdateColumncollected_by,
  _$gpaymentsUpdateColumndate,
  _$gpaymentsUpdateColumnid,
  _$gpaymentsUpdateColumnpaid_on,
  _$gpaymentsUpdateColumntrans_id,
  _$gpaymentsUpdateColumnuser_id,
]);

Serializer<Gadmin_panel_user_constraint> _$gadminPanelUserConstraintSerializer =
    new _$Gadmin_panel_user_constraintSerializer();
Serializer<Gadmin_panel_user_select_column>
    _$gadminPanelUserSelectColumnSerializer =
    new _$Gadmin_panel_user_select_columnSerializer();
Serializer<Gadmin_panel_user_update_column>
    _$gadminPanelUserUpdateColumnSerializer =
    new _$Gadmin_panel_user_update_columnSerializer();
Serializer<Gcable_customers_table_constraint>
    _$gcableCustomersTableConstraintSerializer =
    new _$Gcable_customers_table_constraintSerializer();
Serializer<Gcable_customers_table_select_column>
    _$gcableCustomersTableSelectColumnSerializer =
    new _$Gcable_customers_table_select_columnSerializer();
Serializer<Gcable_customers_table_update_column>
    _$gcableCustomersTableUpdateColumnSerializer =
    new _$Gcable_customers_table_update_columnSerializer();
Serializer<Gcable_opr_constraint> _$gcableOprConstraintSerializer =
    new _$Gcable_opr_constraintSerializer();
Serializer<Gcable_opr_select_column> _$gcableOprSelectColumnSerializer =
    new _$Gcable_opr_select_columnSerializer();
Serializer<Gcable_opr_update_column> _$gcableOprUpdateColumnSerializer =
    new _$Gcable_opr_update_columnSerializer();
Serializer<Gcable_plan_constraint> _$gcablePlanConstraintSerializer =
    new _$Gcable_plan_constraintSerializer();
Serializer<Gcable_plan_select_column> _$gcablePlanSelectColumnSerializer =
    new _$Gcable_plan_select_columnSerializer();
Serializer<Gcable_plan_update_column> _$gcablePlanUpdateColumnSerializer =
    new _$Gcable_plan_update_columnSerializer();
Serializer<Gcable_subscription_fee_constraint>
    _$gcableSubscriptionFeeConstraintSerializer =
    new _$Gcable_subscription_fee_constraintSerializer();
Serializer<Gcable_subscription_fee_select_column>
    _$gcableSubscriptionFeeSelectColumnSerializer =
    new _$Gcable_subscription_fee_select_columnSerializer();
Serializer<Gcable_subscription_fee_update_column>
    _$gcableSubscriptionFeeUpdateColumnSerializer =
    new _$Gcable_subscription_fee_update_columnSerializer();
Serializer<Gcable_subscriptions_constraint>
    _$gcableSubscriptionsConstraintSerializer =
    new _$Gcable_subscriptions_constraintSerializer();
Serializer<Gcable_subscriptions_select_column>
    _$gcableSubscriptionsSelectColumnSerializer =
    new _$Gcable_subscriptions_select_columnSerializer();
Serializer<Gcable_subscriptions_update_column>
    _$gcableSubscriptionsUpdateColumnSerializer =
    new _$Gcable_subscriptions_update_columnSerializer();
Serializer<Gcollectors_constraint> _$gcollectorsConstraintSerializer =
    new _$Gcollectors_constraintSerializer();
Serializer<Gcollectors_select_column> _$gcollectorsSelectColumnSerializer =
    new _$Gcollectors_select_columnSerializer();
Serializer<
        Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns>
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolAndArgumentsColumnsSerializer =
    new _$Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columnsSerializer();
Serializer<
        Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns>
    _$gcollectorsSelectColumnCollectorsAggregateBoolExpBoolOrArgumentsColumnsSerializer =
    new _$Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columnsSerializer();
Serializer<Gcollectors_update_column> _$gcollectorsUpdateColumnSerializer =
    new _$Gcollectors_update_columnSerializer();
Serializer<Gcursor_ordering> _$gcursorOrderingSerializer =
    new _$Gcursor_orderingSerializer();
Serializer<Gcustomer_constraint> _$gcustomerConstraintSerializer =
    new _$Gcustomer_constraintSerializer();
Serializer<Gcustomer_select_column> _$gcustomerSelectColumnSerializer =
    new _$Gcustomer_select_columnSerializer();
Serializer<Gcustomer_update_column> _$gcustomerUpdateColumnSerializer =
    new _$Gcustomer_update_columnSerializer();
Serializer<Gnotifications_constraint> _$gnotificationsConstraintSerializer =
    new _$Gnotifications_constraintSerializer();
Serializer<Gnotifications_select_column>
    _$gnotificationsSelectColumnSerializer =
    new _$Gnotifications_select_columnSerializer();
Serializer<
        Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns>
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolAndArgumentsColumnsSerializer =
    new _$Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columnsSerializer();
Serializer<
        Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns>
    _$gnotificationsSelectColumnNotificationsAggregateBoolExpBoolOrArgumentsColumnsSerializer =
    new _$Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columnsSerializer();
Serializer<Gnotifications_update_column>
    _$gnotificationsUpdateColumnSerializer =
    new _$Gnotifications_update_columnSerializer();
Serializer<Gorder_by> _$gorderBySerializer = new _$Gorder_bySerializer();
Serializer<Gorder_constraint> _$gorderConstraintSerializer =
    new _$Gorder_constraintSerializer();
Serializer<Gorder_select_column> _$gorderSelectColumnSerializer =
    new _$Gorder_select_columnSerializer();
Serializer<Gorder_update_column> _$gorderUpdateColumnSerializer =
    new _$Gorder_update_columnSerializer();
Serializer<Gpayments_constraint> _$gpaymentsConstraintSerializer =
    new _$Gpayments_constraintSerializer();
Serializer<Gpayments_select_column> _$gpaymentsSelectColumnSerializer =
    new _$Gpayments_select_columnSerializer();
Serializer<Gpayments_update_column> _$gpaymentsUpdateColumnSerializer =
    new _$Gpayments_update_columnSerializer();
Serializer<GBoolean_comparison_exp> _$gBooleanComparisonExpSerializer =
    new _$GBoolean_comparison_expSerializer();
Serializer<GInt_comparison_exp> _$gIntComparisonExpSerializer =
    new _$GInt_comparison_expSerializer();
Serializer<GSampleInput> _$gSampleInputSerializer =
    new _$GSampleInputSerializer();
Serializer<GString_comparison_exp> _$gStringComparisonExpSerializer =
    new _$GString_comparison_expSerializer();
Serializer<Gadmin_panel_user_bool_exp> _$gadminPanelUserBoolExpSerializer =
    new _$Gadmin_panel_user_bool_expSerializer();
Serializer<Gadmin_panel_user_inc_input> _$gadminPanelUserIncInputSerializer =
    new _$Gadmin_panel_user_inc_inputSerializer();
Serializer<Gadmin_panel_user_insert_input>
    _$gadminPanelUserInsertInputSerializer =
    new _$Gadmin_panel_user_insert_inputSerializer();
Serializer<Gadmin_panel_user_on_conflict>
    _$gadminPanelUserOnConflictSerializer =
    new _$Gadmin_panel_user_on_conflictSerializer();
Serializer<Gadmin_panel_user_order_by> _$gadminPanelUserOrderBySerializer =
    new _$Gadmin_panel_user_order_bySerializer();
Serializer<Gadmin_panel_user_pk_columns_input>
    _$gadminPanelUserPkColumnsInputSerializer =
    new _$Gadmin_panel_user_pk_columns_inputSerializer();
Serializer<Gadmin_panel_user_set_input> _$gadminPanelUserSetInputSerializer =
    new _$Gadmin_panel_user_set_inputSerializer();
Serializer<Gadmin_panel_user_stream_cursor_input>
    _$gadminPanelUserStreamCursorInputSerializer =
    new _$Gadmin_panel_user_stream_cursor_inputSerializer();
Serializer<Gadmin_panel_user_stream_cursor_value_input>
    _$gadminPanelUserStreamCursorValueInputSerializer =
    new _$Gadmin_panel_user_stream_cursor_value_inputSerializer();
Serializer<Gadmin_panel_user_updates> _$gadminPanelUserUpdatesSerializer =
    new _$Gadmin_panel_user_updatesSerializer();
Serializer<Gcable_customers_table_aggregate_bool_exp>
    _$gcableCustomersTableAggregateBoolExpSerializer =
    new _$Gcable_customers_table_aggregate_bool_expSerializer();
Serializer<Gcable_customers_table_aggregate_bool_exp_count>
    _$gcableCustomersTableAggregateBoolExpCountSerializer =
    new _$Gcable_customers_table_aggregate_bool_exp_countSerializer();
Serializer<Gcable_customers_table_aggregate_order_by>
    _$gcableCustomersTableAggregateOrderBySerializer =
    new _$Gcable_customers_table_aggregate_order_bySerializer();
Serializer<Gcable_customers_table_arr_rel_insert_input>
    _$gcableCustomersTableArrRelInsertInputSerializer =
    new _$Gcable_customers_table_arr_rel_insert_inputSerializer();
Serializer<Gcable_customers_table_avg_order_by>
    _$gcableCustomersTableAvgOrderBySerializer =
    new _$Gcable_customers_table_avg_order_bySerializer();
Serializer<Gcable_customers_table_bool_exp>
    _$gcableCustomersTableBoolExpSerializer =
    new _$Gcable_customers_table_bool_expSerializer();
Serializer<Gcable_customers_table_inc_input>
    _$gcableCustomersTableIncInputSerializer =
    new _$Gcable_customers_table_inc_inputSerializer();
Serializer<Gcable_customers_table_insert_input>
    _$gcableCustomersTableInsertInputSerializer =
    new _$Gcable_customers_table_insert_inputSerializer();
Serializer<Gcable_customers_table_max_order_by>
    _$gcableCustomersTableMaxOrderBySerializer =
    new _$Gcable_customers_table_max_order_bySerializer();
Serializer<Gcable_customers_table_min_order_by>
    _$gcableCustomersTableMinOrderBySerializer =
    new _$Gcable_customers_table_min_order_bySerializer();
Serializer<Gcable_customers_table_obj_rel_insert_input>
    _$gcableCustomersTableObjRelInsertInputSerializer =
    new _$Gcable_customers_table_obj_rel_insert_inputSerializer();
Serializer<Gcable_customers_table_on_conflict>
    _$gcableCustomersTableOnConflictSerializer =
    new _$Gcable_customers_table_on_conflictSerializer();
Serializer<Gcable_customers_table_order_by>
    _$gcableCustomersTableOrderBySerializer =
    new _$Gcable_customers_table_order_bySerializer();
Serializer<Gcable_customers_table_pk_columns_input>
    _$gcableCustomersTablePkColumnsInputSerializer =
    new _$Gcable_customers_table_pk_columns_inputSerializer();
Serializer<Gcable_customers_table_set_input>
    _$gcableCustomersTableSetInputSerializer =
    new _$Gcable_customers_table_set_inputSerializer();
Serializer<Gcable_customers_table_stddev_order_by>
    _$gcableCustomersTableStddevOrderBySerializer =
    new _$Gcable_customers_table_stddev_order_bySerializer();
Serializer<Gcable_customers_table_stddev_pop_order_by>
    _$gcableCustomersTableStddevPopOrderBySerializer =
    new _$Gcable_customers_table_stddev_pop_order_bySerializer();
Serializer<Gcable_customers_table_stddev_samp_order_by>
    _$gcableCustomersTableStddevSampOrderBySerializer =
    new _$Gcable_customers_table_stddev_samp_order_bySerializer();
Serializer<Gcable_customers_table_stream_cursor_input>
    _$gcableCustomersTableStreamCursorInputSerializer =
    new _$Gcable_customers_table_stream_cursor_inputSerializer();
Serializer<Gcable_customers_table_stream_cursor_value_input>
    _$gcableCustomersTableStreamCursorValueInputSerializer =
    new _$Gcable_customers_table_stream_cursor_value_inputSerializer();
Serializer<Gcable_customers_table_sum_order_by>
    _$gcableCustomersTableSumOrderBySerializer =
    new _$Gcable_customers_table_sum_order_bySerializer();
Serializer<Gcable_customers_table_updates>
    _$gcableCustomersTableUpdatesSerializer =
    new _$Gcable_customers_table_updatesSerializer();
Serializer<Gcable_customers_table_var_pop_order_by>
    _$gcableCustomersTableVarPopOrderBySerializer =
    new _$Gcable_customers_table_var_pop_order_bySerializer();
Serializer<Gcable_customers_table_var_samp_order_by>
    _$gcableCustomersTableVarSampOrderBySerializer =
    new _$Gcable_customers_table_var_samp_order_bySerializer();
Serializer<Gcable_customers_table_variance_order_by>
    _$gcableCustomersTableVarianceOrderBySerializer =
    new _$Gcable_customers_table_variance_order_bySerializer();
Serializer<Gcable_opr_bool_exp> _$gcableOprBoolExpSerializer =
    new _$Gcable_opr_bool_expSerializer();
Serializer<Gcable_opr_inc_input> _$gcableOprIncInputSerializer =
    new _$Gcable_opr_inc_inputSerializer();
Serializer<Gcable_opr_insert_input> _$gcableOprInsertInputSerializer =
    new _$Gcable_opr_insert_inputSerializer();
Serializer<Gcable_opr_obj_rel_insert_input>
    _$gcableOprObjRelInsertInputSerializer =
    new _$Gcable_opr_obj_rel_insert_inputSerializer();
Serializer<Gcable_opr_on_conflict> _$gcableOprOnConflictSerializer =
    new _$Gcable_opr_on_conflictSerializer();
Serializer<Gcable_opr_order_by> _$gcableOprOrderBySerializer =
    new _$Gcable_opr_order_bySerializer();
Serializer<Gcable_opr_pk_columns_input> _$gcableOprPkColumnsInputSerializer =
    new _$Gcable_opr_pk_columns_inputSerializer();
Serializer<Gcable_opr_set_input> _$gcableOprSetInputSerializer =
    new _$Gcable_opr_set_inputSerializer();
Serializer<Gcable_opr_stream_cursor_input>
    _$gcableOprStreamCursorInputSerializer =
    new _$Gcable_opr_stream_cursor_inputSerializer();
Serializer<Gcable_opr_stream_cursor_value_input>
    _$gcableOprStreamCursorValueInputSerializer =
    new _$Gcable_opr_stream_cursor_value_inputSerializer();
Serializer<Gcable_opr_updates> _$gcableOprUpdatesSerializer =
    new _$Gcable_opr_updatesSerializer();
Serializer<Gcable_plan_bool_exp> _$gcablePlanBoolExpSerializer =
    new _$Gcable_plan_bool_expSerializer();
Serializer<Gcable_plan_inc_input> _$gcablePlanIncInputSerializer =
    new _$Gcable_plan_inc_inputSerializer();
Serializer<Gcable_plan_insert_input> _$gcablePlanInsertInputSerializer =
    new _$Gcable_plan_insert_inputSerializer();
Serializer<Gcable_plan_on_conflict> _$gcablePlanOnConflictSerializer =
    new _$Gcable_plan_on_conflictSerializer();
Serializer<Gcable_plan_order_by> _$gcablePlanOrderBySerializer =
    new _$Gcable_plan_order_bySerializer();
Serializer<Gcable_plan_pk_columns_input> _$gcablePlanPkColumnsInputSerializer =
    new _$Gcable_plan_pk_columns_inputSerializer();
Serializer<Gcable_plan_set_input> _$gcablePlanSetInputSerializer =
    new _$Gcable_plan_set_inputSerializer();
Serializer<Gcable_plan_stream_cursor_input>
    _$gcablePlanStreamCursorInputSerializer =
    new _$Gcable_plan_stream_cursor_inputSerializer();
Serializer<Gcable_plan_stream_cursor_value_input>
    _$gcablePlanStreamCursorValueInputSerializer =
    new _$Gcable_plan_stream_cursor_value_inputSerializer();
Serializer<Gcable_plan_updates> _$gcablePlanUpdatesSerializer =
    new _$Gcable_plan_updatesSerializer();
Serializer<Gcable_subscription_fee_bool_exp>
    _$gcableSubscriptionFeeBoolExpSerializer =
    new _$Gcable_subscription_fee_bool_expSerializer();
Serializer<Gcable_subscription_fee_inc_input>
    _$gcableSubscriptionFeeIncInputSerializer =
    new _$Gcable_subscription_fee_inc_inputSerializer();
Serializer<Gcable_subscription_fee_insert_input>
    _$gcableSubscriptionFeeInsertInputSerializer =
    new _$Gcable_subscription_fee_insert_inputSerializer();
Serializer<Gcable_subscription_fee_obj_rel_insert_input>
    _$gcableSubscriptionFeeObjRelInsertInputSerializer =
    new _$Gcable_subscription_fee_obj_rel_insert_inputSerializer();
Serializer<Gcable_subscription_fee_on_conflict>
    _$gcableSubscriptionFeeOnConflictSerializer =
    new _$Gcable_subscription_fee_on_conflictSerializer();
Serializer<Gcable_subscription_fee_order_by>
    _$gcableSubscriptionFeeOrderBySerializer =
    new _$Gcable_subscription_fee_order_bySerializer();
Serializer<Gcable_subscription_fee_pk_columns_input>
    _$gcableSubscriptionFeePkColumnsInputSerializer =
    new _$Gcable_subscription_fee_pk_columns_inputSerializer();
Serializer<Gcable_subscription_fee_set_input>
    _$gcableSubscriptionFeeSetInputSerializer =
    new _$Gcable_subscription_fee_set_inputSerializer();
Serializer<Gcable_subscription_fee_stream_cursor_input>
    _$gcableSubscriptionFeeStreamCursorInputSerializer =
    new _$Gcable_subscription_fee_stream_cursor_inputSerializer();
Serializer<Gcable_subscription_fee_stream_cursor_value_input>
    _$gcableSubscriptionFeeStreamCursorValueInputSerializer =
    new _$Gcable_subscription_fee_stream_cursor_value_inputSerializer();
Serializer<Gcable_subscription_fee_updates>
    _$gcableSubscriptionFeeUpdatesSerializer =
    new _$Gcable_subscription_fee_updatesSerializer();
Serializer<Gcable_subscriptions_aggregate_bool_exp>
    _$gcableSubscriptionsAggregateBoolExpSerializer =
    new _$Gcable_subscriptions_aggregate_bool_expSerializer();
Serializer<Gcable_subscriptions_aggregate_bool_exp_count>
    _$gcableSubscriptionsAggregateBoolExpCountSerializer =
    new _$Gcable_subscriptions_aggregate_bool_exp_countSerializer();
Serializer<Gcable_subscriptions_aggregate_order_by>
    _$gcableSubscriptionsAggregateOrderBySerializer =
    new _$Gcable_subscriptions_aggregate_order_bySerializer();
Serializer<Gcable_subscriptions_arr_rel_insert_input>
    _$gcableSubscriptionsArrRelInsertInputSerializer =
    new _$Gcable_subscriptions_arr_rel_insert_inputSerializer();
Serializer<Gcable_subscriptions_avg_order_by>
    _$gcableSubscriptionsAvgOrderBySerializer =
    new _$Gcable_subscriptions_avg_order_bySerializer();
Serializer<Gcable_subscriptions_bool_exp>
    _$gcableSubscriptionsBoolExpSerializer =
    new _$Gcable_subscriptions_bool_expSerializer();
Serializer<Gcable_subscriptions_inc_input>
    _$gcableSubscriptionsIncInputSerializer =
    new _$Gcable_subscriptions_inc_inputSerializer();
Serializer<Gcable_subscriptions_insert_input>
    _$gcableSubscriptionsInsertInputSerializer =
    new _$Gcable_subscriptions_insert_inputSerializer();
Serializer<Gcable_subscriptions_max_order_by>
    _$gcableSubscriptionsMaxOrderBySerializer =
    new _$Gcable_subscriptions_max_order_bySerializer();
Serializer<Gcable_subscriptions_min_order_by>
    _$gcableSubscriptionsMinOrderBySerializer =
    new _$Gcable_subscriptions_min_order_bySerializer();
Serializer<Gcable_subscriptions_on_conflict>
    _$gcableSubscriptionsOnConflictSerializer =
    new _$Gcable_subscriptions_on_conflictSerializer();
Serializer<Gcable_subscriptions_order_by>
    _$gcableSubscriptionsOrderBySerializer =
    new _$Gcable_subscriptions_order_bySerializer();
Serializer<Gcable_subscriptions_pk_columns_input>
    _$gcableSubscriptionsPkColumnsInputSerializer =
    new _$Gcable_subscriptions_pk_columns_inputSerializer();
Serializer<Gcable_subscriptions_set_input>
    _$gcableSubscriptionsSetInputSerializer =
    new _$Gcable_subscriptions_set_inputSerializer();
Serializer<Gcable_subscriptions_stddev_order_by>
    _$gcableSubscriptionsStddevOrderBySerializer =
    new _$Gcable_subscriptions_stddev_order_bySerializer();
Serializer<Gcable_subscriptions_stddev_pop_order_by>
    _$gcableSubscriptionsStddevPopOrderBySerializer =
    new _$Gcable_subscriptions_stddev_pop_order_bySerializer();
Serializer<Gcable_subscriptions_stddev_samp_order_by>
    _$gcableSubscriptionsStddevSampOrderBySerializer =
    new _$Gcable_subscriptions_stddev_samp_order_bySerializer();
Serializer<Gcable_subscriptions_stream_cursor_input>
    _$gcableSubscriptionsStreamCursorInputSerializer =
    new _$Gcable_subscriptions_stream_cursor_inputSerializer();
Serializer<Gcable_subscriptions_stream_cursor_value_input>
    _$gcableSubscriptionsStreamCursorValueInputSerializer =
    new _$Gcable_subscriptions_stream_cursor_value_inputSerializer();
Serializer<Gcable_subscriptions_sum_order_by>
    _$gcableSubscriptionsSumOrderBySerializer =
    new _$Gcable_subscriptions_sum_order_bySerializer();
Serializer<Gcable_subscriptions_updates>
    _$gcableSubscriptionsUpdatesSerializer =
    new _$Gcable_subscriptions_updatesSerializer();
Serializer<Gcable_subscriptions_var_pop_order_by>
    _$gcableSubscriptionsVarPopOrderBySerializer =
    new _$Gcable_subscriptions_var_pop_order_bySerializer();
Serializer<Gcable_subscriptions_var_samp_order_by>
    _$gcableSubscriptionsVarSampOrderBySerializer =
    new _$Gcable_subscriptions_var_samp_order_bySerializer();
Serializer<Gcable_subscriptions_variance_order_by>
    _$gcableSubscriptionsVarianceOrderBySerializer =
    new _$Gcable_subscriptions_variance_order_bySerializer();
Serializer<Gcollectors_aggregate_bool_exp>
    _$gcollectorsAggregateBoolExpSerializer =
    new _$Gcollectors_aggregate_bool_expSerializer();
Serializer<Gcollectors_aggregate_bool_exp_bool_and>
    _$gcollectorsAggregateBoolExpBoolAndSerializer =
    new _$Gcollectors_aggregate_bool_exp_bool_andSerializer();
Serializer<Gcollectors_aggregate_bool_exp_bool_or>
    _$gcollectorsAggregateBoolExpBoolOrSerializer =
    new _$Gcollectors_aggregate_bool_exp_bool_orSerializer();
Serializer<Gcollectors_aggregate_bool_exp_count>
    _$gcollectorsAggregateBoolExpCountSerializer =
    new _$Gcollectors_aggregate_bool_exp_countSerializer();
Serializer<Gcollectors_aggregate_order_by>
    _$gcollectorsAggregateOrderBySerializer =
    new _$Gcollectors_aggregate_order_bySerializer();
Serializer<Gcollectors_arr_rel_insert_input>
    _$gcollectorsArrRelInsertInputSerializer =
    new _$Gcollectors_arr_rel_insert_inputSerializer();
Serializer<Gcollectors_avg_order_by> _$gcollectorsAvgOrderBySerializer =
    new _$Gcollectors_avg_order_bySerializer();
Serializer<Gcollectors_bool_exp> _$gcollectorsBoolExpSerializer =
    new _$Gcollectors_bool_expSerializer();
Serializer<Gcollectors_inc_input> _$gcollectorsIncInputSerializer =
    new _$Gcollectors_inc_inputSerializer();
Serializer<Gcollectors_insert_input> _$gcollectorsInsertInputSerializer =
    new _$Gcollectors_insert_inputSerializer();
Serializer<Gcollectors_max_order_by> _$gcollectorsMaxOrderBySerializer =
    new _$Gcollectors_max_order_bySerializer();
Serializer<Gcollectors_min_order_by> _$gcollectorsMinOrderBySerializer =
    new _$Gcollectors_min_order_bySerializer();
Serializer<Gcollectors_obj_rel_insert_input>
    _$gcollectorsObjRelInsertInputSerializer =
    new _$Gcollectors_obj_rel_insert_inputSerializer();
Serializer<Gcollectors_on_conflict> _$gcollectorsOnConflictSerializer =
    new _$Gcollectors_on_conflictSerializer();
Serializer<Gcollectors_order_by> _$gcollectorsOrderBySerializer =
    new _$Gcollectors_order_bySerializer();
Serializer<Gcollectors_pk_columns_input> _$gcollectorsPkColumnsInputSerializer =
    new _$Gcollectors_pk_columns_inputSerializer();
Serializer<Gcollectors_set_input> _$gcollectorsSetInputSerializer =
    new _$Gcollectors_set_inputSerializer();
Serializer<Gcollectors_stddev_order_by> _$gcollectorsStddevOrderBySerializer =
    new _$Gcollectors_stddev_order_bySerializer();
Serializer<Gcollectors_stddev_pop_order_by>
    _$gcollectorsStddevPopOrderBySerializer =
    new _$Gcollectors_stddev_pop_order_bySerializer();
Serializer<Gcollectors_stddev_samp_order_by>
    _$gcollectorsStddevSampOrderBySerializer =
    new _$Gcollectors_stddev_samp_order_bySerializer();
Serializer<Gcollectors_stream_cursor_input>
    _$gcollectorsStreamCursorInputSerializer =
    new _$Gcollectors_stream_cursor_inputSerializer();
Serializer<Gcollectors_stream_cursor_value_input>
    _$gcollectorsStreamCursorValueInputSerializer =
    new _$Gcollectors_stream_cursor_value_inputSerializer();
Serializer<Gcollectors_sum_order_by> _$gcollectorsSumOrderBySerializer =
    new _$Gcollectors_sum_order_bySerializer();
Serializer<Gcollectors_updates> _$gcollectorsUpdatesSerializer =
    new _$Gcollectors_updatesSerializer();
Serializer<Gcollectors_var_pop_order_by> _$gcollectorsVarPopOrderBySerializer =
    new _$Gcollectors_var_pop_order_bySerializer();
Serializer<Gcollectors_var_samp_order_by>
    _$gcollectorsVarSampOrderBySerializer =
    new _$Gcollectors_var_samp_order_bySerializer();
Serializer<Gcollectors_variance_order_by>
    _$gcollectorsVarianceOrderBySerializer =
    new _$Gcollectors_variance_order_bySerializer();
Serializer<Gcustomer_bool_exp> _$gcustomerBoolExpSerializer =
    new _$Gcustomer_bool_expSerializer();
Serializer<Gcustomer_inc_input> _$gcustomerIncInputSerializer =
    new _$Gcustomer_inc_inputSerializer();
Serializer<Gcustomer_insert_input> _$gcustomerInsertInputSerializer =
    new _$Gcustomer_insert_inputSerializer();
Serializer<Gcustomer_obj_rel_insert_input>
    _$gcustomerObjRelInsertInputSerializer =
    new _$Gcustomer_obj_rel_insert_inputSerializer();
Serializer<Gcustomer_on_conflict> _$gcustomerOnConflictSerializer =
    new _$Gcustomer_on_conflictSerializer();
Serializer<Gcustomer_order_by> _$gcustomerOrderBySerializer =
    new _$Gcustomer_order_bySerializer();
Serializer<Gcustomer_pk_columns_input> _$gcustomerPkColumnsInputSerializer =
    new _$Gcustomer_pk_columns_inputSerializer();
Serializer<Gcustomer_set_input> _$gcustomerSetInputSerializer =
    new _$Gcustomer_set_inputSerializer();
Serializer<Gcustomer_stream_cursor_input>
    _$gcustomerStreamCursorInputSerializer =
    new _$Gcustomer_stream_cursor_inputSerializer();
Serializer<Gcustomer_stream_cursor_value_input>
    _$gcustomerStreamCursorValueInputSerializer =
    new _$Gcustomer_stream_cursor_value_inputSerializer();
Serializer<Gcustomer_updates> _$gcustomerUpdatesSerializer =
    new _$Gcustomer_updatesSerializer();
Serializer<Gdate_comparison_exp> _$gdateComparisonExpSerializer =
    new _$Gdate_comparison_expSerializer();
Serializer<Gnotifications_aggregate_bool_exp>
    _$gnotificationsAggregateBoolExpSerializer =
    new _$Gnotifications_aggregate_bool_expSerializer();
Serializer<Gnotifications_aggregate_bool_exp_bool_and>
    _$gnotificationsAggregateBoolExpBoolAndSerializer =
    new _$Gnotifications_aggregate_bool_exp_bool_andSerializer();
Serializer<Gnotifications_aggregate_bool_exp_bool_or>
    _$gnotificationsAggregateBoolExpBoolOrSerializer =
    new _$Gnotifications_aggregate_bool_exp_bool_orSerializer();
Serializer<Gnotifications_aggregate_bool_exp_count>
    _$gnotificationsAggregateBoolExpCountSerializer =
    new _$Gnotifications_aggregate_bool_exp_countSerializer();
Serializer<Gnotifications_aggregate_order_by>
    _$gnotificationsAggregateOrderBySerializer =
    new _$Gnotifications_aggregate_order_bySerializer();
Serializer<Gnotifications_arr_rel_insert_input>
    _$gnotificationsArrRelInsertInputSerializer =
    new _$Gnotifications_arr_rel_insert_inputSerializer();
Serializer<Gnotifications_avg_order_by> _$gnotificationsAvgOrderBySerializer =
    new _$Gnotifications_avg_order_bySerializer();
Serializer<Gnotifications_bool_exp> _$gnotificationsBoolExpSerializer =
    new _$Gnotifications_bool_expSerializer();
Serializer<Gnotifications_inc_input> _$gnotificationsIncInputSerializer =
    new _$Gnotifications_inc_inputSerializer();
Serializer<Gnotifications_insert_input> _$gnotificationsInsertInputSerializer =
    new _$Gnotifications_insert_inputSerializer();
Serializer<Gnotifications_max_order_by> _$gnotificationsMaxOrderBySerializer =
    new _$Gnotifications_max_order_bySerializer();
Serializer<Gnotifications_min_order_by> _$gnotificationsMinOrderBySerializer =
    new _$Gnotifications_min_order_bySerializer();
Serializer<Gnotifications_on_conflict> _$gnotificationsOnConflictSerializer =
    new _$Gnotifications_on_conflictSerializer();
Serializer<Gnotifications_order_by> _$gnotificationsOrderBySerializer =
    new _$Gnotifications_order_bySerializer();
Serializer<Gnotifications_pk_columns_input>
    _$gnotificationsPkColumnsInputSerializer =
    new _$Gnotifications_pk_columns_inputSerializer();
Serializer<Gnotifications_set_input> _$gnotificationsSetInputSerializer =
    new _$Gnotifications_set_inputSerializer();
Serializer<Gnotifications_stddev_order_by>
    _$gnotificationsStddevOrderBySerializer =
    new _$Gnotifications_stddev_order_bySerializer();
Serializer<Gnotifications_stddev_pop_order_by>
    _$gnotificationsStddevPopOrderBySerializer =
    new _$Gnotifications_stddev_pop_order_bySerializer();
Serializer<Gnotifications_stddev_samp_order_by>
    _$gnotificationsStddevSampOrderBySerializer =
    new _$Gnotifications_stddev_samp_order_bySerializer();
Serializer<Gnotifications_stream_cursor_input>
    _$gnotificationsStreamCursorInputSerializer =
    new _$Gnotifications_stream_cursor_inputSerializer();
Serializer<Gnotifications_stream_cursor_value_input>
    _$gnotificationsStreamCursorValueInputSerializer =
    new _$Gnotifications_stream_cursor_value_inputSerializer();
Serializer<Gnotifications_sum_order_by> _$gnotificationsSumOrderBySerializer =
    new _$Gnotifications_sum_order_bySerializer();
Serializer<Gnotifications_updates> _$gnotificationsUpdatesSerializer =
    new _$Gnotifications_updatesSerializer();
Serializer<Gnotifications_var_pop_order_by>
    _$gnotificationsVarPopOrderBySerializer =
    new _$Gnotifications_var_pop_order_bySerializer();
Serializer<Gnotifications_var_samp_order_by>
    _$gnotificationsVarSampOrderBySerializer =
    new _$Gnotifications_var_samp_order_bySerializer();
Serializer<Gnotifications_variance_order_by>
    _$gnotificationsVarianceOrderBySerializer =
    new _$Gnotifications_variance_order_bySerializer();
Serializer<Gorder_aggregate_bool_exp> _$gorderAggregateBoolExpSerializer =
    new _$Gorder_aggregate_bool_expSerializer();
Serializer<Gorder_aggregate_bool_exp_count>
    _$gorderAggregateBoolExpCountSerializer =
    new _$Gorder_aggregate_bool_exp_countSerializer();
Serializer<Gorder_aggregate_order_by> _$gorderAggregateOrderBySerializer =
    new _$Gorder_aggregate_order_bySerializer();
Serializer<Gorder_arr_rel_insert_input> _$gorderArrRelInsertInputSerializer =
    new _$Gorder_arr_rel_insert_inputSerializer();
Serializer<Gorder_avg_order_by> _$gorderAvgOrderBySerializer =
    new _$Gorder_avg_order_bySerializer();
Serializer<Gorder_bool_exp> _$gorderBoolExpSerializer =
    new _$Gorder_bool_expSerializer();
Serializer<Gorder_inc_input> _$gorderIncInputSerializer =
    new _$Gorder_inc_inputSerializer();
Serializer<Gorder_insert_input> _$gorderInsertInputSerializer =
    new _$Gorder_insert_inputSerializer();
Serializer<Gorder_max_order_by> _$gorderMaxOrderBySerializer =
    new _$Gorder_max_order_bySerializer();
Serializer<Gorder_min_order_by> _$gorderMinOrderBySerializer =
    new _$Gorder_min_order_bySerializer();
Serializer<Gorder_on_conflict> _$gorderOnConflictSerializer =
    new _$Gorder_on_conflictSerializer();
Serializer<Gorder_order_by> _$gorderOrderBySerializer =
    new _$Gorder_order_bySerializer();
Serializer<Gorder_pk_columns_input> _$gorderPkColumnsInputSerializer =
    new _$Gorder_pk_columns_inputSerializer();
Serializer<Gorder_set_input> _$gorderSetInputSerializer =
    new _$Gorder_set_inputSerializer();
Serializer<Gorder_stddev_order_by> _$gorderStddevOrderBySerializer =
    new _$Gorder_stddev_order_bySerializer();
Serializer<Gorder_stddev_pop_order_by> _$gorderStddevPopOrderBySerializer =
    new _$Gorder_stddev_pop_order_bySerializer();
Serializer<Gorder_stddev_samp_order_by> _$gorderStddevSampOrderBySerializer =
    new _$Gorder_stddev_samp_order_bySerializer();
Serializer<Gorder_stream_cursor_input> _$gorderStreamCursorInputSerializer =
    new _$Gorder_stream_cursor_inputSerializer();
Serializer<Gorder_stream_cursor_value_input>
    _$gorderStreamCursorValueInputSerializer =
    new _$Gorder_stream_cursor_value_inputSerializer();
Serializer<Gorder_sum_order_by> _$gorderSumOrderBySerializer =
    new _$Gorder_sum_order_bySerializer();
Serializer<Gorder_updates> _$gorderUpdatesSerializer =
    new _$Gorder_updatesSerializer();
Serializer<Gorder_var_pop_order_by> _$gorderVarPopOrderBySerializer =
    new _$Gorder_var_pop_order_bySerializer();
Serializer<Gorder_var_samp_order_by> _$gorderVarSampOrderBySerializer =
    new _$Gorder_var_samp_order_bySerializer();
Serializer<Gorder_variance_order_by> _$gorderVarianceOrderBySerializer =
    new _$Gorder_variance_order_bySerializer();
Serializer<Gpayments_aggregate_bool_exp> _$gpaymentsAggregateBoolExpSerializer =
    new _$Gpayments_aggregate_bool_expSerializer();
Serializer<Gpayments_aggregate_bool_exp_count>
    _$gpaymentsAggregateBoolExpCountSerializer =
    new _$Gpayments_aggregate_bool_exp_countSerializer();
Serializer<Gpayments_aggregate_order_by> _$gpaymentsAggregateOrderBySerializer =
    new _$Gpayments_aggregate_order_bySerializer();
Serializer<Gpayments_arr_rel_insert_input>
    _$gpaymentsArrRelInsertInputSerializer =
    new _$Gpayments_arr_rel_insert_inputSerializer();
Serializer<Gpayments_avg_order_by> _$gpaymentsAvgOrderBySerializer =
    new _$Gpayments_avg_order_bySerializer();
Serializer<Gpayments_bool_exp> _$gpaymentsBoolExpSerializer =
    new _$Gpayments_bool_expSerializer();
Serializer<Gpayments_inc_input> _$gpaymentsIncInputSerializer =
    new _$Gpayments_inc_inputSerializer();
Serializer<Gpayments_insert_input> _$gpaymentsInsertInputSerializer =
    new _$Gpayments_insert_inputSerializer();
Serializer<Gpayments_max_order_by> _$gpaymentsMaxOrderBySerializer =
    new _$Gpayments_max_order_bySerializer();
Serializer<Gpayments_min_order_by> _$gpaymentsMinOrderBySerializer =
    new _$Gpayments_min_order_bySerializer();
Serializer<Gpayments_obj_rel_insert_input>
    _$gpaymentsObjRelInsertInputSerializer =
    new _$Gpayments_obj_rel_insert_inputSerializer();
Serializer<Gpayments_on_conflict> _$gpaymentsOnConflictSerializer =
    new _$Gpayments_on_conflictSerializer();
Serializer<Gpayments_order_by> _$gpaymentsOrderBySerializer =
    new _$Gpayments_order_bySerializer();
Serializer<Gpayments_pk_columns_input> _$gpaymentsPkColumnsInputSerializer =
    new _$Gpayments_pk_columns_inputSerializer();
Serializer<Gpayments_set_input> _$gpaymentsSetInputSerializer =
    new _$Gpayments_set_inputSerializer();
Serializer<Gpayments_stddev_order_by> _$gpaymentsStddevOrderBySerializer =
    new _$Gpayments_stddev_order_bySerializer();
Serializer<Gpayments_stddev_pop_order_by>
    _$gpaymentsStddevPopOrderBySerializer =
    new _$Gpayments_stddev_pop_order_bySerializer();
Serializer<Gpayments_stddev_samp_order_by>
    _$gpaymentsStddevSampOrderBySerializer =
    new _$Gpayments_stddev_samp_order_bySerializer();
Serializer<Gpayments_stream_cursor_input>
    _$gpaymentsStreamCursorInputSerializer =
    new _$Gpayments_stream_cursor_inputSerializer();
Serializer<Gpayments_stream_cursor_value_input>
    _$gpaymentsStreamCursorValueInputSerializer =
    new _$Gpayments_stream_cursor_value_inputSerializer();
Serializer<Gpayments_sum_order_by> _$gpaymentsSumOrderBySerializer =
    new _$Gpayments_sum_order_bySerializer();
Serializer<Gpayments_updates> _$gpaymentsUpdatesSerializer =
    new _$Gpayments_updatesSerializer();
Serializer<Gpayments_var_pop_order_by> _$gpaymentsVarPopOrderBySerializer =
    new _$Gpayments_var_pop_order_bySerializer();
Serializer<Gpayments_var_samp_order_by> _$gpaymentsVarSampOrderBySerializer =
    new _$Gpayments_var_samp_order_bySerializer();
Serializer<Gpayments_variance_order_by> _$gpaymentsVarianceOrderBySerializer =
    new _$Gpayments_variance_order_bySerializer();
Serializer<Gtimestamptz_comparison_exp> _$gtimestamptzComparisonExpSerializer =
    new _$Gtimestamptz_comparison_expSerializer();

class _$Gadmin_panel_user_constraintSerializer
    implements PrimitiveSerializer<Gadmin_panel_user_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gadmin_panel_user_constraint];
  @override
  final String wireName = 'Gadmin_panel_user_constraint';

  @override
  Object serialize(Serializers serializers, Gadmin_panel_user_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gadmin_panel_user_constraint deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gadmin_panel_user_constraint.valueOf(serialized as String);
}

class _$Gadmin_panel_user_select_columnSerializer
    implements PrimitiveSerializer<Gadmin_panel_user_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gadmin_panel_user_select_column];
  @override
  final String wireName = 'Gadmin_panel_user_select_column';

  @override
  Object serialize(
          Serializers serializers, Gadmin_panel_user_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gadmin_panel_user_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gadmin_panel_user_select_column.valueOf(serialized as String);
}

class _$Gadmin_panel_user_update_columnSerializer
    implements PrimitiveSerializer<Gadmin_panel_user_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gadmin_panel_user_update_column];
  @override
  final String wireName = 'Gadmin_panel_user_update_column';

  @override
  Object serialize(
          Serializers serializers, Gadmin_panel_user_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gadmin_panel_user_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gadmin_panel_user_update_column.valueOf(serialized as String);
}

class _$Gcable_customers_table_constraintSerializer
    implements PrimitiveSerializer<Gcable_customers_table_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_customers_table_constraint];
  @override
  final String wireName = 'Gcable_customers_table_constraint';

  @override
  Object serialize(
          Serializers serializers, Gcable_customers_table_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_customers_table_constraint deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_customers_table_constraint.valueOf(serialized as String);
}

class _$Gcable_customers_table_select_columnSerializer
    implements PrimitiveSerializer<Gcable_customers_table_select_column> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gname': 'name',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'name': 'Gname',
  };

  @override
  final Iterable<Type> types = const <Type>[
    Gcable_customers_table_select_column
  ];
  @override
  final String wireName = 'Gcable_customers_table_select_column';

  @override
  Object serialize(
          Serializers serializers, Gcable_customers_table_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  Gcable_customers_table_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_customers_table_select_column.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$Gcable_customers_table_update_columnSerializer
    implements PrimitiveSerializer<Gcable_customers_table_update_column> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gname': 'name',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'name': 'Gname',
  };

  @override
  final Iterable<Type> types = const <Type>[
    Gcable_customers_table_update_column
  ];
  @override
  final String wireName = 'Gcable_customers_table_update_column';

  @override
  Object serialize(
          Serializers serializers, Gcable_customers_table_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  Gcable_customers_table_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_customers_table_update_column.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$Gcable_opr_constraintSerializer
    implements PrimitiveSerializer<Gcable_opr_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_opr_constraint];
  @override
  final String wireName = 'Gcable_opr_constraint';

  @override
  Object serialize(Serializers serializers, Gcable_opr_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_opr_constraint deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_opr_constraint.valueOf(serialized as String);
}

class _$Gcable_opr_select_columnSerializer
    implements PrimitiveSerializer<Gcable_opr_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_opr_select_column];
  @override
  final String wireName = 'Gcable_opr_select_column';

  @override
  Object serialize(Serializers serializers, Gcable_opr_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_opr_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_opr_select_column.valueOf(serialized as String);
}

class _$Gcable_opr_update_columnSerializer
    implements PrimitiveSerializer<Gcable_opr_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_opr_update_column];
  @override
  final String wireName = 'Gcable_opr_update_column';

  @override
  Object serialize(Serializers serializers, Gcable_opr_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_opr_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_opr_update_column.valueOf(serialized as String);
}

class _$Gcable_plan_constraintSerializer
    implements PrimitiveSerializer<Gcable_plan_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_plan_constraint];
  @override
  final String wireName = 'Gcable_plan_constraint';

  @override
  Object serialize(Serializers serializers, Gcable_plan_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_plan_constraint deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_plan_constraint.valueOf(serialized as String);
}

class _$Gcable_plan_select_columnSerializer
    implements PrimitiveSerializer<Gcable_plan_select_column> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gname': 'name',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'name': 'Gname',
  };

  @override
  final Iterable<Type> types = const <Type>[Gcable_plan_select_column];
  @override
  final String wireName = 'Gcable_plan_select_column';

  @override
  Object serialize(Serializers serializers, Gcable_plan_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  Gcable_plan_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_plan_select_column.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$Gcable_plan_update_columnSerializer
    implements PrimitiveSerializer<Gcable_plan_update_column> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gname': 'name',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'name': 'Gname',
  };

  @override
  final Iterable<Type> types = const <Type>[Gcable_plan_update_column];
  @override
  final String wireName = 'Gcable_plan_update_column';

  @override
  Object serialize(Serializers serializers, Gcable_plan_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  Gcable_plan_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_plan_update_column.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$Gcable_subscription_fee_constraintSerializer
    implements PrimitiveSerializer<Gcable_subscription_fee_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_subscription_fee_constraint];
  @override
  final String wireName = 'Gcable_subscription_fee_constraint';

  @override
  Object serialize(
          Serializers serializers, Gcable_subscription_fee_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_subscription_fee_constraint deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_subscription_fee_constraint.valueOf(serialized as String);
}

class _$Gcable_subscription_fee_select_columnSerializer
    implements PrimitiveSerializer<Gcable_subscription_fee_select_column> {
  @override
  final Iterable<Type> types = const <Type>[
    Gcable_subscription_fee_select_column
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_select_column';

  @override
  Object serialize(
          Serializers serializers, Gcable_subscription_fee_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_subscription_fee_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_subscription_fee_select_column.valueOf(serialized as String);
}

class _$Gcable_subscription_fee_update_columnSerializer
    implements PrimitiveSerializer<Gcable_subscription_fee_update_column> {
  @override
  final Iterable<Type> types = const <Type>[
    Gcable_subscription_fee_update_column
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_update_column';

  @override
  Object serialize(
          Serializers serializers, Gcable_subscription_fee_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_subscription_fee_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_subscription_fee_update_column.valueOf(serialized as String);
}

class _$Gcable_subscriptions_constraintSerializer
    implements PrimitiveSerializer<Gcable_subscriptions_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_subscriptions_constraint];
  @override
  final String wireName = 'Gcable_subscriptions_constraint';

  @override
  Object serialize(
          Serializers serializers, Gcable_subscriptions_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_subscriptions_constraint deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_subscriptions_constraint.valueOf(serialized as String);
}

class _$Gcable_subscriptions_select_columnSerializer
    implements PrimitiveSerializer<Gcable_subscriptions_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_subscriptions_select_column];
  @override
  final String wireName = 'Gcable_subscriptions_select_column';

  @override
  Object serialize(
          Serializers serializers, Gcable_subscriptions_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_subscriptions_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_subscriptions_select_column.valueOf(serialized as String);
}

class _$Gcable_subscriptions_update_columnSerializer
    implements PrimitiveSerializer<Gcable_subscriptions_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gcable_subscriptions_update_column];
  @override
  final String wireName = 'Gcable_subscriptions_update_column';

  @override
  Object serialize(
          Serializers serializers, Gcable_subscriptions_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcable_subscriptions_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcable_subscriptions_update_column.valueOf(serialized as String);
}

class _$Gcollectors_constraintSerializer
    implements PrimitiveSerializer<Gcollectors_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcollectors_constraint];
  @override
  final String wireName = 'Gcollectors_constraint';

  @override
  Object serialize(Serializers serializers, Gcollectors_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcollectors_constraint deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcollectors_constraint.valueOf(serialized as String);
}

class _$Gcollectors_select_columnSerializer
    implements PrimitiveSerializer<Gcollectors_select_column> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gname': 'name',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'name': 'Gname',
  };

  @override
  final Iterable<Type> types = const <Type>[Gcollectors_select_column];
  @override
  final String wireName = 'Gcollectors_select_column';

  @override
  Object serialize(Serializers serializers, Gcollectors_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  Gcollectors_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcollectors_select_column.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columnsSerializer
    implements
        PrimitiveSerializer<
            Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns> {
  @override
  final Iterable<Type> types = const <Type>[
    Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
  ];
  @override
  final String wireName =
      'Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns';

  @override
  Object serialize(
          Serializers serializers,
          Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
              object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
      deserialize(Serializers serializers, Object serialized,
              {FullType specifiedType = FullType.unspecified}) =>
          Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
              .valueOf(serialized as String);
}

class _$Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columnsSerializer
    implements
        PrimitiveSerializer<
            Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns> {
  @override
  final Iterable<Type> types = const <Type>[
    Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
  ];
  @override
  final String wireName =
      'Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns';

  @override
  Object serialize(
          Serializers serializers,
          Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
              object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
      deserialize(Serializers serializers, Object serialized,
              {FullType specifiedType = FullType.unspecified}) =>
          Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
              .valueOf(serialized as String);
}

class _$Gcollectors_update_columnSerializer
    implements PrimitiveSerializer<Gcollectors_update_column> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gname': 'name',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'name': 'Gname',
  };

  @override
  final Iterable<Type> types = const <Type>[Gcollectors_update_column];
  @override
  final String wireName = 'Gcollectors_update_column';

  @override
  Object serialize(Serializers serializers, Gcollectors_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  Gcollectors_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcollectors_update_column.valueOf(
          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
}

class _$Gcursor_orderingSerializer
    implements PrimitiveSerializer<Gcursor_ordering> {
  @override
  final Iterable<Type> types = const <Type>[Gcursor_ordering];
  @override
  final String wireName = 'Gcursor_ordering';

  @override
  Object serialize(Serializers serializers, Gcursor_ordering object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcursor_ordering deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcursor_ordering.valueOf(serialized as String);
}

class _$Gcustomer_constraintSerializer
    implements PrimitiveSerializer<Gcustomer_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gcustomer_constraint];
  @override
  final String wireName = 'Gcustomer_constraint';

  @override
  Object serialize(Serializers serializers, Gcustomer_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcustomer_constraint deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcustomer_constraint.valueOf(serialized as String);
}

class _$Gcustomer_select_columnSerializer
    implements PrimitiveSerializer<Gcustomer_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gcustomer_select_column];
  @override
  final String wireName = 'Gcustomer_select_column';

  @override
  Object serialize(Serializers serializers, Gcustomer_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcustomer_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcustomer_select_column.valueOf(serialized as String);
}

class _$Gcustomer_update_columnSerializer
    implements PrimitiveSerializer<Gcustomer_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gcustomer_update_column];
  @override
  final String wireName = 'Gcustomer_update_column';

  @override
  Object serialize(Serializers serializers, Gcustomer_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gcustomer_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gcustomer_update_column.valueOf(serialized as String);
}

class _$Gnotifications_constraintSerializer
    implements PrimitiveSerializer<Gnotifications_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gnotifications_constraint];
  @override
  final String wireName = 'Gnotifications_constraint';

  @override
  Object serialize(Serializers serializers, Gnotifications_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gnotifications_constraint deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gnotifications_constraint.valueOf(serialized as String);
}

class _$Gnotifications_select_columnSerializer
    implements PrimitiveSerializer<Gnotifications_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gnotifications_select_column];
  @override
  final String wireName = 'Gnotifications_select_column';

  @override
  Object serialize(Serializers serializers, Gnotifications_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gnotifications_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gnotifications_select_column.valueOf(serialized as String);
}

class _$Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columnsSerializer
    implements
        PrimitiveSerializer<
            Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns> {
  @override
  final Iterable<Type> types = const <Type>[
    Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
  ];
  @override
  final String wireName =
      'Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns';

  @override
  Object serialize(
          Serializers serializers,
          Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
              object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
      deserialize(Serializers serializers, Object serialized,
              {FullType specifiedType = FullType.unspecified}) =>
          Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
              .valueOf(serialized as String);
}

class _$Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columnsSerializer
    implements
        PrimitiveSerializer<
            Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns> {
  @override
  final Iterable<Type> types = const <Type>[
    Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
  ];
  @override
  final String wireName =
      'Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns';

  @override
  Object serialize(
          Serializers serializers,
          Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
              object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
      deserialize(Serializers serializers, Object serialized,
              {FullType specifiedType = FullType.unspecified}) =>
          Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
              .valueOf(serialized as String);
}

class _$Gnotifications_update_columnSerializer
    implements PrimitiveSerializer<Gnotifications_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gnotifications_update_column];
  @override
  final String wireName = 'Gnotifications_update_column';

  @override
  Object serialize(Serializers serializers, Gnotifications_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gnotifications_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gnotifications_update_column.valueOf(serialized as String);
}

class _$Gorder_bySerializer implements PrimitiveSerializer<Gorder_by> {
  @override
  final Iterable<Type> types = const <Type>[Gorder_by];
  @override
  final String wireName = 'Gorder_by';

  @override
  Object serialize(Serializers serializers, Gorder_by object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gorder_by deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gorder_by.valueOf(serialized as String);
}

class _$Gorder_constraintSerializer
    implements PrimitiveSerializer<Gorder_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gorder_constraint];
  @override
  final String wireName = 'Gorder_constraint';

  @override
  Object serialize(Serializers serializers, Gorder_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gorder_constraint deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gorder_constraint.valueOf(serialized as String);
}

class _$Gorder_select_columnSerializer
    implements PrimitiveSerializer<Gorder_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gorder_select_column];
  @override
  final String wireName = 'Gorder_select_column';

  @override
  Object serialize(Serializers serializers, Gorder_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gorder_select_column deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gorder_select_column.valueOf(serialized as String);
}

class _$Gorder_update_columnSerializer
    implements PrimitiveSerializer<Gorder_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gorder_update_column];
  @override
  final String wireName = 'Gorder_update_column';

  @override
  Object serialize(Serializers serializers, Gorder_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gorder_update_column deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gorder_update_column.valueOf(serialized as String);
}

class _$Gpayments_constraintSerializer
    implements PrimitiveSerializer<Gpayments_constraint> {
  @override
  final Iterable<Type> types = const <Type>[Gpayments_constraint];
  @override
  final String wireName = 'Gpayments_constraint';

  @override
  Object serialize(Serializers serializers, Gpayments_constraint object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gpayments_constraint deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gpayments_constraint.valueOf(serialized as String);
}

class _$Gpayments_select_columnSerializer
    implements PrimitiveSerializer<Gpayments_select_column> {
  @override
  final Iterable<Type> types = const <Type>[Gpayments_select_column];
  @override
  final String wireName = 'Gpayments_select_column';

  @override
  Object serialize(Serializers serializers, Gpayments_select_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gpayments_select_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gpayments_select_column.valueOf(serialized as String);
}

class _$Gpayments_update_columnSerializer
    implements PrimitiveSerializer<Gpayments_update_column> {
  @override
  final Iterable<Type> types = const <Type>[Gpayments_update_column];
  @override
  final String wireName = 'Gpayments_update_column';

  @override
  Object serialize(Serializers serializers, Gpayments_update_column object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Gpayments_update_column deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Gpayments_update_column.valueOf(serialized as String);
}

class _$GBoolean_comparison_expSerializer
    implements StructuredSerializer<GBoolean_comparison_exp> {
  @override
  final Iterable<Type> types = const [
    GBoolean_comparison_exp,
    _$GBoolean_comparison_exp
  ];
  @override
  final String wireName = 'GBoolean_comparison_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GBoolean_comparison_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_eq;
    if (value != null) {
      result
        ..add('_eq')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_gt;
    if (value != null) {
      result
        ..add('_gt')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_gte;
    if (value != null) {
      result
        ..add('_gte')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_in;
    if (value != null) {
      result
        ..add('_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(bool)])));
    }
    value = object.G_is_null;
    if (value != null) {
      result
        ..add('_is_null')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_lt;
    if (value != null) {
      result
        ..add('_lt')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_lte;
    if (value != null) {
      result
        ..add('_lte')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_neq;
    if (value != null) {
      result
        ..add('_neq')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_nin;
    if (value != null) {
      result
        ..add('_nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(bool)])));
    }
    return result;
  }

  @override
  GBoolean_comparison_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GBoolean_comparison_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_eq':
          result.G_eq = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_gt':
          result.G_gt = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_gte':
          result.G_gte = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_in':
          result.G_in.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(bool)]))!
              as BuiltList<Object?>);
          break;
        case '_is_null':
          result.G_is_null = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_lt':
          result.G_lt = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_lte':
          result.G_lte = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_neq':
          result.G_neq = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_nin':
          result.G_nin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(bool)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GInt_comparison_expSerializer
    implements StructuredSerializer<GInt_comparison_exp> {
  @override
  final Iterable<Type> types = const [
    GInt_comparison_exp,
    _$GInt_comparison_exp
  ];
  @override
  final String wireName = 'GInt_comparison_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInt_comparison_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_eq;
    if (value != null) {
      result
        ..add('_eq')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.G_gt;
    if (value != null) {
      result
        ..add('_gt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.G_gte;
    if (value != null) {
      result
        ..add('_gte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.G_in;
    if (value != null) {
      result
        ..add('_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(int)])));
    }
    value = object.G_is_null;
    if (value != null) {
      result
        ..add('_is_null')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_lt;
    if (value != null) {
      result
        ..add('_lt')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.G_lte;
    if (value != null) {
      result
        ..add('_lte')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.G_neq;
    if (value != null) {
      result
        ..add('_neq')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.G_nin;
    if (value != null) {
      result
        ..add('_nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(int)])));
    }
    return result;
  }

  @override
  GInt_comparison_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInt_comparison_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_eq':
          result.G_eq = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case '_gt':
          result.G_gt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case '_gte':
          result.G_gte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case '_in':
          result.G_in.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(int)]))!
              as BuiltList<Object?>);
          break;
        case '_is_null':
          result.G_is_null = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_lt':
          result.G_lt = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case '_lte':
          result.G_lte = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case '_neq':
          result.G_neq = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case '_nin':
          result.G_nin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(int)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$GSampleInputSerializer implements StructuredSerializer<GSampleInput> {
  @override
  final Iterable<Type> types = const [GSampleInput, _$GSampleInput];
  @override
  final String wireName = 'GSampleInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GSampleInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'email',
      serializers.serialize(object.email,
          specifiedType: const FullType(String)),
      'password',
      serializers.serialize(object.password,
          specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GSampleInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GSampleInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String))! as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GString_comparison_expSerializer
    implements StructuredSerializer<GString_comparison_exp> {
  @override
  final Iterable<Type> types = const [
    GString_comparison_exp,
    _$GString_comparison_exp
  ];
  @override
  final String wireName = 'GString_comparison_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GString_comparison_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_eq;
    if (value != null) {
      result
        ..add('_eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_gt;
    if (value != null) {
      result
        ..add('_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_gte;
    if (value != null) {
      result
        ..add('_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_ilike;
    if (value != null) {
      result
        ..add('_ilike')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_in;
    if (value != null) {
      result
        ..add('_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.G_iregex;
    if (value != null) {
      result
        ..add('_iregex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_is_null;
    if (value != null) {
      result
        ..add('_is_null')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_like;
    if (value != null) {
      result
        ..add('_like')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_lt;
    if (value != null) {
      result
        ..add('_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_lte;
    if (value != null) {
      result
        ..add('_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_neq;
    if (value != null) {
      result
        ..add('_neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_nilike;
    if (value != null) {
      result
        ..add('_nilike')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_nin;
    if (value != null) {
      result
        ..add('_nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.G_niregex;
    if (value != null) {
      result
        ..add('_niregex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_nlike;
    if (value != null) {
      result
        ..add('_nlike')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_nregex;
    if (value != null) {
      result
        ..add('_nregex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_nsimilar;
    if (value != null) {
      result
        ..add('_nsimilar')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_regex;
    if (value != null) {
      result
        ..add('_regex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.G_similar;
    if (value != null) {
      result
        ..add('_similar')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GString_comparison_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GString_comparison_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_eq':
          result.G_eq = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_gt':
          result.G_gt = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_gte':
          result.G_gte = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_ilike':
          result.G_ilike = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_in':
          result.G_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object?>);
          break;
        case '_iregex':
          result.G_iregex = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_is_null':
          result.G_is_null = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_like':
          result.G_like = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_lt':
          result.G_lt = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_lte':
          result.G_lte = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_neq':
          result.G_neq = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_nilike':
          result.G_nilike = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_nin':
          result.G_nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object?>);
          break;
        case '_niregex':
          result.G_niregex = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_nlike':
          result.G_nlike = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_nregex':
          result.G_nregex = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_nsimilar':
          result.G_nsimilar = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_regex':
          result.G_regex = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case '_similar':
          result.G_similar = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_bool_expSerializer
    implements StructuredSerializer<Gadmin_panel_user_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_bool_exp,
    _$Gadmin_panel_user_bool_exp
  ];
  @override
  final String wireName = 'Gadmin_panel_user_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gadmin_panel_user_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gadmin_panel_user_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gadmin_panel_user_bool_exp)])));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.pass;
    if (value != null) {
      result
        ..add('pass')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.ph_no;
    if (value != null) {
      result
        ..add('ph_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gadmin_panel_user_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gadmin_panel_user_bool_exp))!
              as Gadmin_panel_user_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gadmin_panel_user_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case 'email':
          result.email.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'pass':
          result.pass.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'ph_no':
          result.ph_no.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'type':
          result.type.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_inc_inputSerializer
    implements StructuredSerializer<Gadmin_panel_user_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_inc_input,
    _$Gadmin_panel_user_inc_input
  ];
  @override
  final String wireName = 'Gadmin_panel_user_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_insert_inputSerializer
    implements StructuredSerializer<Gadmin_panel_user_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_insert_input,
    _$Gadmin_panel_user_insert_input
  ];
  @override
  final String wireName = 'Gadmin_panel_user_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pass;
    if (value != null) {
      result
        ..add('pass')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.ph_no;
    if (value != null) {
      result
        ..add('ph_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pass':
          result.pass = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'ph_no':
          result.ph_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_on_conflictSerializer
    implements StructuredSerializer<Gadmin_panel_user_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_on_conflict,
    _$Gadmin_panel_user_on_conflict
  ];
  @override
  final String wireName = 'Gadmin_panel_user_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gadmin_panel_user_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(BuiltList,
              const [const FullType(Gadmin_panel_user_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gadmin_panel_user_bool_exp)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gadmin_panel_user_constraint))!
              as Gadmin_panel_user_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gadmin_panel_user_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gadmin_panel_user_bool_exp))!
              as Gadmin_panel_user_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_order_bySerializer
    implements StructuredSerializer<Gadmin_panel_user_order_by> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_order_by,
    _$Gadmin_panel_user_order_by
  ];
  @override
  final String wireName = 'Gadmin_panel_user_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pass;
    if (value != null) {
      result
        ..add('pass')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.ph_no;
    if (value != null) {
      result
        ..add('ph_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pass':
          result.pass = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'ph_no':
          result.ph_no = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_pk_columns_inputSerializer
    implements StructuredSerializer<Gadmin_panel_user_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_pk_columns_input,
    _$Gadmin_panel_user_pk_columns_input
  ];
  @override
  final String wireName = 'Gadmin_panel_user_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gadmin_panel_user_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_set_inputSerializer
    implements StructuredSerializer<Gadmin_panel_user_set_input> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_set_input,
    _$Gadmin_panel_user_set_input
  ];
  @override
  final String wireName = 'Gadmin_panel_user_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pass;
    if (value != null) {
      result
        ..add('pass')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.ph_no;
    if (value != null) {
      result
        ..add('ph_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pass':
          result.pass = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'ph_no':
          result.ph_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_stream_cursor_inputSerializer
    implements StructuredSerializer<Gadmin_panel_user_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_stream_cursor_input,
    _$Gadmin_panel_user_stream_cursor_input
  ];
  @override
  final String wireName = 'Gadmin_panel_user_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType:
              const FullType(Gadmin_panel_user_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gadmin_panel_user_stream_cursor_value_input))!
              as Gadmin_panel_user_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_stream_cursor_value_inputSerializer
    implements
        StructuredSerializer<Gadmin_panel_user_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_stream_cursor_value_input,
    _$Gadmin_panel_user_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gadmin_panel_user_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gadmin_panel_user_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pass;
    if (value != null) {
      result
        ..add('pass')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.ph_no;
    if (value != null) {
      result
        ..add('ph_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pass':
          result.pass = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'ph_no':
          result.ph_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gadmin_panel_user_updatesSerializer
    implements StructuredSerializer<Gadmin_panel_user_updates> {
  @override
  final Iterable<Type> types = const [
    Gadmin_panel_user_updates,
    _$Gadmin_panel_user_updates
  ];
  @override
  final String wireName = 'Gadmin_panel_user_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gadmin_panel_user_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gadmin_panel_user_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gadmin_panel_user_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gadmin_panel_user_set_input)));
    }
    return result;
  }

  @override
  Gadmin_panel_user_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gadmin_panel_user_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gadmin_panel_user_inc_input))!
              as Gadmin_panel_user_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gadmin_panel_user_set_input))!
              as Gadmin_panel_user_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gadmin_panel_user_bool_exp))!
              as Gadmin_panel_user_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_aggregate_bool_expSerializer
    implements StructuredSerializer<Gcable_customers_table_aggregate_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_aggregate_bool_exp,
    _$Gcable_customers_table_aggregate_bool_exp
  ];
  @override
  final String wireName = 'Gcable_customers_table_aggregate_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_aggregate_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                Gcable_customers_table_aggregate_bool_exp_count)));
    }
    return result;
  }

  @override
  Gcable_customers_table_aggregate_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_aggregate_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'count':
          result.count.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_customers_table_aggregate_bool_exp_count))!
              as Gcable_customers_table_aggregate_bool_exp_count);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_aggregate_bool_exp_countSerializer
    implements
        StructuredSerializer<Gcable_customers_table_aggregate_bool_exp_count> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_aggregate_bool_exp_count,
    _$Gcable_customers_table_aggregate_bool_exp_count
  ];
  @override
  final String wireName = 'Gcable_customers_table_aggregate_bool_exp_count';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_aggregate_bool_exp_count object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GInt_comparison_exp)),
    ];
    Object? value;
    value = object.arguments;
    if (value != null) {
      result
        ..add('arguments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_customers_table_select_column)])));
    }
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_customers_table_aggregate_bool_exp_count deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_aggregate_bool_exp_countBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_customers_table_select_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_bool_exp))!
              as Gcable_customers_table_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_aggregate_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_aggregate_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_aggregate_order_by,
    _$Gcable_customers_table_aggregate_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_aggregate_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_aggregate_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.avg;
    if (value != null) {
      result
        ..add('avg')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_avg_order_by)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.max;
    if (value != null) {
      result
        ..add('max')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_max_order_by)));
    }
    value = object.min;
    if (value != null) {
      result
        ..add('min')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_min_order_by)));
    }
    value = object.stddev;
    if (value != null) {
      result
        ..add('stddev')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_stddev_order_by)));
    }
    value = object.stddev_pop;
    if (value != null) {
      result
        ..add('stddev_pop')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_stddev_pop_order_by)));
    }
    value = object.stddev_samp;
    if (value != null) {
      result
        ..add('stddev_samp')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_stddev_samp_order_by)));
    }
    value = object.sum;
    if (value != null) {
      result
        ..add('sum')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_sum_order_by)));
    }
    value = object.var_pop;
    if (value != null) {
      result
        ..add('var_pop')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_var_pop_order_by)));
    }
    value = object.var_samp;
    if (value != null) {
      result
        ..add('var_samp')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_var_samp_order_by)));
    }
    value = object.variance;
    if (value != null) {
      result
        ..add('variance')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_variance_order_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_aggregate_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_aggregate_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'avg':
          result.avg.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_avg_order_by))!
              as Gcable_customers_table_avg_order_by);
          break;
        case 'count':
          result.count = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'max':
          result.max.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_max_order_by))!
              as Gcable_customers_table_max_order_by);
          break;
        case 'min':
          result.min.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_min_order_by))!
              as Gcable_customers_table_min_order_by);
          break;
        case 'stddev':
          result.stddev.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_stddev_order_by))!
              as Gcable_customers_table_stddev_order_by);
          break;
        case 'stddev_pop':
          result.stddev_pop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_customers_table_stddev_pop_order_by))!
              as Gcable_customers_table_stddev_pop_order_by);
          break;
        case 'stddev_samp':
          result.stddev_samp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_customers_table_stddev_samp_order_by))!
              as Gcable_customers_table_stddev_samp_order_by);
          break;
        case 'sum':
          result.sum.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_sum_order_by))!
              as Gcable_customers_table_sum_order_by);
          break;
        case 'var_pop':
          result.var_pop.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_var_pop_order_by))!
              as Gcable_customers_table_var_pop_order_by);
          break;
        case 'var_samp':
          result.var_samp.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_var_samp_order_by))!
              as Gcable_customers_table_var_samp_order_by);
          break;
        case 'variance':
          result.variance.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_variance_order_by))!
              as Gcable_customers_table_variance_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_arr_rel_insert_inputSerializer
    implements
        StructuredSerializer<Gcable_customers_table_arr_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_arr_rel_insert_input,
    _$Gcable_customers_table_arr_rel_insert_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_arr_rel_insert_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_arr_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(BuiltList,
              const [const FullType(Gcable_customers_table_insert_input)])),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_on_conflict)));
    }
    return result;
  }

  @override
  Gcable_customers_table_arr_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_arr_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_customers_table_insert_input)
              ]))! as BuiltList<Object?>);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_on_conflict))!
              as Gcable_customers_table_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_avg_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_avg_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_avg_order_by,
    _$Gcable_customers_table_avg_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_avg_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_avg_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_avg_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_avg_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_bool_expSerializer
    implements StructuredSerializer<Gcable_customers_table_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_bool_exp,
    _$Gcable_customers_table_bool_exp
  ];
  @override
  final String wireName = 'Gcable_customers_table_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_customers_table_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_customers_table_bool_exp)])));
    }
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz_comparison_exp)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz_comparison_exp)));
    }
    value = object.payments;
    if (value != null) {
      result
        ..add('payments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    value = object.payments_aggregate;
    if (value != null) {
      result
        ..add('payments_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_bool_exp)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    return result;
  }

  @override
  Gcable_customers_table_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_customers_table_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_bool_exp))!
              as Gcable_customers_table_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_customers_table_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case 'address':
          result.address.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'belongs_to':
          result.belongs_to.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
        case 'desc':
          result.desc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'joined_on':
          result.joined_on.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gtimestamptz_comparison_exp))!
              as Gtimestamptz_comparison_exp);
          break;
        case 'name':
          result.name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gtimestamptz_comparison_exp))!
              as Gtimestamptz_comparison_exp);
          break;
        case 'payments':
          result.payments.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
        case 'payments_aggregate':
          result.payments_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_aggregate_bool_exp))!
              as Gpayments_aggregate_bool_exp);
          break;
        case 'phone_number':
          result.phone_number.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'price':
          result.price.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'user_id':
          result.user_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_inc_inputSerializer
    implements StructuredSerializer<Gcable_customers_table_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_inc_input,
    _$Gcable_customers_table_inc_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_customers_table_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_insert_inputSerializer
    implements StructuredSerializer<Gcable_customers_table_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_insert_input,
    _$Gcable_customers_table_insert_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_obj_rel_insert_input)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.payments;
    if (value != null) {
      result
        ..add('payments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_arr_rel_insert_input)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_customers_table_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_opr_obj_rel_insert_input))!
              as Gcable_opr_obj_rel_insert_input);
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'joined_on':
          result.joined_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'payments':
          result.payments.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_arr_rel_insert_input))!
              as Gpayments_arr_rel_insert_input);
          break;
        case 'phone_number':
          result.phone_number = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_max_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_max_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_max_order_by,
    _$Gcable_customers_table_max_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_max_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_max_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_max_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_max_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'joined_on':
          result.joined_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_month':
          result.paid_month = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'phone_number':
          result.phone_number = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_min_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_min_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_min_order_by,
    _$Gcable_customers_table_min_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_min_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_min_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_min_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_min_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'joined_on':
          result.joined_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_month':
          result.paid_month = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'phone_number':
          result.phone_number = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_obj_rel_insert_inputSerializer
    implements
        StructuredSerializer<Gcable_customers_table_obj_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_obj_rel_insert_input,
    _$Gcable_customers_table_obj_rel_insert_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_obj_rel_insert_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_obj_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(Gcable_customers_table_insert_input)),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_on_conflict)));
    }
    return result;
  }

  @override
  Gcable_customers_table_obj_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_obj_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_insert_input))!
              as Gcable_customers_table_insert_input);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_on_conflict))!
              as Gcable_customers_table_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_on_conflictSerializer
    implements StructuredSerializer<Gcable_customers_table_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_on_conflict,
    _$Gcable_customers_table_on_conflict
  ];
  @override
  final String wireName = 'Gcable_customers_table_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcable_customers_table_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(BuiltList,
              const [const FullType(Gcable_customers_table_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_customers_table_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_constraint))!
              as Gcable_customers_table_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_customers_table_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_bool_exp))!
              as Gcable_customers_table_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_order_by,
    _$Gcable_customers_table_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_order_by)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.payments_aggregate;
    if (value != null) {
      result
        ..add('payments_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_order_by)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_order_by))!
              as Gcable_opr_order_by);
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'joined_on':
          result.joined_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_month':
          result.paid_month = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'payments_aggregate':
          result.payments_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_aggregate_order_by))!
              as Gpayments_aggregate_order_by);
          break;
        case 'phone_number':
          result.phone_number = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_pk_columns_inputSerializer
    implements StructuredSerializer<Gcable_customers_table_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_pk_columns_input,
    _$Gcable_customers_table_pk_columns_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'user_id',
      serializers.serialize(object.user_id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcable_customers_table_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_set_inputSerializer
    implements StructuredSerializer<Gcable_customers_table_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_set_input,
    _$Gcable_customers_table_set_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_customers_table_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'joined_on':
          result.joined_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'phone_number':
          result.phone_number = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_stddev_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_stddev_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_stddev_order_by,
    _$Gcable_customers_table_stddev_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_stddev_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_stddev_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_stddev_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_stddev_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_stddev_pop_order_bySerializer
    implements
        StructuredSerializer<Gcable_customers_table_stddev_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_stddev_pop_order_by,
    _$Gcable_customers_table_stddev_pop_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_stddev_pop_order_by';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_stddev_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_stddev_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_stddev_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_stddev_samp_order_bySerializer
    implements
        StructuredSerializer<Gcable_customers_table_stddev_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_stddev_samp_order_by,
    _$Gcable_customers_table_stddev_samp_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_stddev_samp_order_by';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_stddev_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_stddev_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_stddev_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_stream_cursor_inputSerializer
    implements
        StructuredSerializer<Gcable_customers_table_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_stream_cursor_input,
    _$Gcable_customers_table_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_stream_cursor_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType:
              const FullType(Gcable_customers_table_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcable_customers_table_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_customers_table_stream_cursor_value_input))!
              as Gcable_customers_table_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_stream_cursor_value_inputSerializer
    implements
        StructuredSerializer<Gcable_customers_table_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_stream_cursor_value_input,
    _$Gcable_customers_table_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcable_customers_table_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_customers_table_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.joined_on;
    if (value != null) {
      result
        ..add('joined_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.phone_number;
    if (value != null) {
      result
        ..add('phone_number')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_customers_table_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new Gcable_customers_table_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'joined_on':
          result.joined_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'phone_number':
          result.phone_number = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_sum_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_sum_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_sum_order_by,
    _$Gcable_customers_table_sum_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_sum_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_sum_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_sum_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_sum_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_updatesSerializer
    implements StructuredSerializer<Gcable_customers_table_updates> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_updates,
    _$Gcable_customers_table_updates
  ];
  @override
  final String wireName = 'Gcable_customers_table_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcable_customers_table_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_set_input)));
    }
    return result;
  }

  @override
  Gcable_customers_table_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_inc_input))!
              as Gcable_customers_table_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_set_input))!
              as Gcable_customers_table_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_bool_exp))!
              as Gcable_customers_table_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_var_pop_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_var_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_var_pop_order_by,
    _$Gcable_customers_table_var_pop_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_var_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_var_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_var_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_var_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_var_samp_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_var_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_var_samp_order_by,
    _$Gcable_customers_table_var_samp_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_var_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_var_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_var_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_var_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_customers_table_variance_order_bySerializer
    implements StructuredSerializer<Gcable_customers_table_variance_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_customers_table_variance_order_by,
    _$Gcable_customers_table_variance_order_by
  ];
  @override
  final String wireName = 'Gcable_customers_table_variance_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_customers_table_variance_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.price;
    if (value != null) {
      result
        ..add('price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_customers_table_variance_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_customers_table_variance_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'price':
          result.price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_bool_expSerializer
    implements StructuredSerializer<Gcable_opr_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_bool_exp,
    _$Gcable_opr_bool_exp
  ];
  @override
  final String wireName = 'Gcable_opr_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcable_opr_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcable_opr_bool_exp)])));
    }
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.cable_customers_tables;
    if (value != null) {
      result
        ..add('cable_customers_tables')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_bool_exp)));
    }
    value = object.cable_customers_tables_aggregate;
    if (value != null) {
      result
        ..add('cable_customers_tables_aggregate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_aggregate_bool_exp)));
    }
    value = object.cable_name;
    if (value != null) {
      result
        ..add('cable_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.cable_subscriptions;
    if (value != null) {
      result
        ..add('cable_subscriptions')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_bool_exp)));
    }
    value = object.cable_subscriptions_aggregate;
    if (value != null) {
      result
        ..add('cable_subscriptions_aggregate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_aggregate_bool_exp)));
    }
    value = object.collectors;
    if (value != null) {
      result
        ..add('collectors')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    value = object.collectors_aggregate;
    if (value != null) {
      result
        ..add('collectors_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_aggregate_bool_exp)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBoolean_comparison_exp)));
    }
    value = object.notifications;
    if (value != null) {
      result
        ..add('notifications')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    value = object.notifications_aggregate;
    if (value != null) {
      result
        ..add('notifications_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_aggregate_bool_exp)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz_comparison_exp)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.payments;
    if (value != null) {
      result
        ..add('payments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    value = object.payments_aggregate;
    if (value != null) {
      result
        ..add('payments_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_bool_exp)));
    }
    value = object.phone_no;
    if (value != null) {
      result
        ..add('phone_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    return result;
  }

  @override
  Gcable_opr_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcable_opr_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcable_opr_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case 'address':
          result.address.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'cable_customers_tables':
          result.cable_customers_tables.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_bool_exp))!
              as Gcable_customers_table_bool_exp);
          break;
        case 'cable_customers_tables_aggregate':
          result.cable_customers_tables_aggregate.replace(
              serializers.deserialize(value,
                      specifiedType: const FullType(
                          Gcable_customers_table_aggregate_bool_exp))!
                  as Gcable_customers_table_aggregate_bool_exp);
          break;
        case 'cable_name':
          result.cable_name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'cable_subscriptions':
          result.cable_subscriptions.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_subscriptions_bool_exp))!
              as Gcable_subscriptions_bool_exp);
          break;
        case 'cable_subscriptions_aggregate':
          result.cable_subscriptions_aggregate.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_aggregate_bool_exp))!
              as Gcable_subscriptions_aggregate_bool_exp);
          break;
        case 'collectors':
          result.collectors.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
        case 'collectors_aggregate':
          result.collectors_aggregate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_aggregate_bool_exp))!
              as Gcollectors_aggregate_bool_exp);
          break;
        case 'email':
          result.email.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'isActive':
          result.isActive.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
        case 'notifications':
          result.notifications.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
        case 'notifications_aggregate':
          result.notifications_aggregate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_aggregate_bool_exp))!
              as Gnotifications_aggregate_bool_exp);
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gtimestamptz_comparison_exp))!
              as Gtimestamptz_comparison_exp);
          break;
        case 'password':
          result.password.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'payments':
          result.payments.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
        case 'payments_aggregate':
          result.payments_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_aggregate_bool_exp))!
              as Gpayments_aggregate_bool_exp);
          break;
        case 'phone_no':
          result.phone_no.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'user_id':
          result.user_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_inc_inputSerializer
    implements StructuredSerializer<Gcable_opr_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_inc_input,
    _$Gcable_opr_inc_input
  ];
  @override
  final String wireName = 'Gcable_opr_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_opr_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_insert_inputSerializer
    implements StructuredSerializer<Gcable_opr_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_insert_input,
    _$Gcable_opr_insert_input
  ];
  @override
  final String wireName = 'Gcable_opr_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_customers_tables;
    if (value != null) {
      result
        ..add('cable_customers_tables')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_arr_rel_insert_input)));
    }
    value = object.cable_name;
    if (value != null) {
      result
        ..add('cable_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_subscriptions;
    if (value != null) {
      result
        ..add('cable_subscriptions')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_arr_rel_insert_input)));
    }
    value = object.collectors;
    if (value != null) {
      result
        ..add('collectors')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_arr_rel_insert_input)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.notifications;
    if (value != null) {
      result
        ..add('notifications')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gnotifications_arr_rel_insert_input)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.payments;
    if (value != null) {
      result
        ..add('payments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_arr_rel_insert_input)));
    }
    value = object.phone_no;
    if (value != null) {
      result
        ..add('phone_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_opr_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_customers_tables':
          result.cable_customers_tables.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_customers_table_arr_rel_insert_input))!
              as Gcable_customers_table_arr_rel_insert_input);
          break;
        case 'cable_name':
          result.cable_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_subscriptions':
          result.cable_subscriptions.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscriptions_arr_rel_insert_input))!
              as Gcable_subscriptions_arr_rel_insert_input);
          break;
        case 'collectors':
          result.collectors.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_arr_rel_insert_input))!
              as Gcollectors_arr_rel_insert_input);
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'notifications':
          result.notifications.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_arr_rel_insert_input))!
              as Gnotifications_arr_rel_insert_input);
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'payments':
          result.payments.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_arr_rel_insert_input))!
              as Gpayments_arr_rel_insert_input);
          break;
        case 'phone_no':
          result.phone_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_obj_rel_insert_inputSerializer
    implements StructuredSerializer<Gcable_opr_obj_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_obj_rel_insert_input,
    _$Gcable_opr_obj_rel_insert_input
  ];
  @override
  final String wireName = 'Gcable_opr_obj_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_obj_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(Gcable_opr_insert_input)),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_on_conflict)));
    }
    return result;
  }

  @override
  Gcable_opr_obj_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_obj_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_insert_input))!
              as Gcable_opr_insert_input);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_on_conflict))!
              as Gcable_opr_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_on_conflictSerializer
    implements StructuredSerializer<Gcable_opr_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_on_conflict,
    _$Gcable_opr_on_conflict
  ];
  @override
  final String wireName = 'Gcable_opr_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcable_opr_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gcable_opr_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_opr_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_constraint))!
              as Gcable_opr_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_opr_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_order_bySerializer
    implements StructuredSerializer<Gcable_opr_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_order_by,
    _$Gcable_opr_order_by
  ];
  @override
  final String wireName = 'Gcable_opr_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_customers_tables_aggregate;
    if (value != null) {
      result
        ..add('cable_customers_tables_aggregate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_aggregate_order_by)));
    }
    value = object.cable_name;
    if (value != null) {
      result
        ..add('cable_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_subscriptions_aggregate;
    if (value != null) {
      result
        ..add('cable_subscriptions_aggregate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_aggregate_order_by)));
    }
    value = object.collectors_aggregate;
    if (value != null) {
      result
        ..add('collectors_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_aggregate_order_by)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.notifications_aggregate;
    if (value != null) {
      result
        ..add('notifications_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_aggregate_order_by)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.payments_aggregate;
    if (value != null) {
      result
        ..add('payments_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_order_by)));
    }
    value = object.phone_no;
    if (value != null) {
      result
        ..add('phone_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_opr_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_customers_tables_aggregate':
          result.cable_customers_tables_aggregate.replace(
              serializers.deserialize(value,
                      specifiedType: const FullType(
                          Gcable_customers_table_aggregate_order_by))!
                  as Gcable_customers_table_aggregate_order_by);
          break;
        case 'cable_name':
          result.cable_name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_subscriptions_aggregate':
          result.cable_subscriptions_aggregate.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_aggregate_order_by))!
              as Gcable_subscriptions_aggregate_order_by);
          break;
        case 'collectors_aggregate':
          result.collectors_aggregate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_aggregate_order_by))!
              as Gcollectors_aggregate_order_by);
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'notifications_aggregate':
          result.notifications_aggregate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_aggregate_order_by))!
              as Gnotifications_aggregate_order_by);
          break;
        case 'paid_month':
          result.paid_month = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'payments_aggregate':
          result.payments_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_aggregate_order_by))!
              as Gpayments_aggregate_order_by);
          break;
        case 'phone_no':
          result.phone_no = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_pk_columns_inputSerializer
    implements StructuredSerializer<Gcable_opr_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_pk_columns_input,
    _$Gcable_opr_pk_columns_input
  ];
  @override
  final String wireName = 'Gcable_opr_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'user_id',
      serializers.serialize(object.user_id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcable_opr_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_set_inputSerializer
    implements StructuredSerializer<Gcable_opr_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_set_input,
    _$Gcable_opr_set_input
  ];
  @override
  final String wireName = 'Gcable_opr_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_name;
    if (value != null) {
      result
        ..add('cable_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phone_no;
    if (value != null) {
      result
        ..add('phone_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_opr_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_name':
          result.cable_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phone_no':
          result.phone_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_stream_cursor_inputSerializer
    implements StructuredSerializer<Gcable_opr_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_stream_cursor_input,
    _$Gcable_opr_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcable_opr_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(Gcable_opr_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcable_opr_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_opr_stream_cursor_value_input))!
              as Gcable_opr_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gcable_opr_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_opr_stream_cursor_value_input,
    _$Gcable_opr_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcable_opr_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_name;
    if (value != null) {
      result
        ..add('cable_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.paid_month;
    if (value != null) {
      result
        ..add('paid_month')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phone_no;
    if (value != null) {
      result
        ..add('phone_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_opr_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_name':
          result.cable_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'paid_month':
          result.paid_month.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phone_no':
          result.phone_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_opr_updatesSerializer
    implements StructuredSerializer<Gcable_opr_updates> {
  @override
  final Iterable<Type> types = const [Gcable_opr_updates, _$Gcable_opr_updates];
  @override
  final String wireName = 'Gcable_opr_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_opr_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcable_opr_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_set_input)));
    }
    return result;
  }

  @override
  Gcable_opr_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_opr_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_inc_input))!
              as Gcable_opr_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_set_input))!
              as Gcable_opr_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_bool_expSerializer
    implements StructuredSerializer<Gcable_plan_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_bool_exp,
    _$Gcable_plan_bool_exp
  ];
  @override
  final String wireName = 'Gcable_plan_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcable_plan_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_plan_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcable_plan_bool_exp)])));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.fees;
    if (value != null) {
      result
        ..add('fees')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.plan_id;
    if (value != null) {
      result
        ..add('plan_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    return result;
  }

  @override
  Gcable_plan_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcable_plan_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_plan_bool_exp))!
              as Gcable_plan_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcable_plan_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case 'cable_id':
          result.cable_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'desc':
          result.desc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'fees':
          result.fees.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'name':
          result.name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'plan_id':
          result.plan_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_inc_inputSerializer
    implements StructuredSerializer<Gcable_plan_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_inc_input,
    _$Gcable_plan_inc_input
  ];
  @override
  final String wireName = 'Gcable_plan_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.fees;
    if (value != null) {
      result
        ..add('fees')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.plan_id;
    if (value != null) {
      result
        ..add('plan_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_plan_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'fees':
          result.fees = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'plan_id':
          result.plan_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_insert_inputSerializer
    implements StructuredSerializer<Gcable_plan_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_insert_input,
    _$Gcable_plan_insert_input
  ];
  @override
  final String wireName = 'Gcable_plan_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fees;
    if (value != null) {
      result
        ..add('fees')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.plan_id;
    if (value != null) {
      result
        ..add('plan_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_plan_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fees':
          result.fees = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'plan_id':
          result.plan_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_on_conflictSerializer
    implements StructuredSerializer<Gcable_plan_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_on_conflict,
    _$Gcable_plan_on_conflict
  ];
  @override
  final String wireName = 'Gcable_plan_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcable_plan_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gcable_plan_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_plan_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_plan_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_plan_constraint))!
              as Gcable_plan_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_plan_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_plan_bool_exp))!
              as Gcable_plan_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_order_bySerializer
    implements StructuredSerializer<Gcable_plan_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_order_by,
    _$Gcable_plan_order_by
  ];
  @override
  final String wireName = 'Gcable_plan_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fees;
    if (value != null) {
      result
        ..add('fees')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.plan_id;
    if (value != null) {
      result
        ..add('plan_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_plan_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fees':
          result.fees = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'plan_id':
          result.plan_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_pk_columns_inputSerializer
    implements StructuredSerializer<Gcable_plan_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_pk_columns_input,
    _$Gcable_plan_pk_columns_input
  ];
  @override
  final String wireName = 'Gcable_plan_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'plan_id',
      serializers.serialize(object.plan_id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcable_plan_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'plan_id':
          result.plan_id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_set_inputSerializer
    implements StructuredSerializer<Gcable_plan_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_set_input,
    _$Gcable_plan_set_input
  ];
  @override
  final String wireName = 'Gcable_plan_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fees;
    if (value != null) {
      result
        ..add('fees')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.plan_id;
    if (value != null) {
      result
        ..add('plan_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_plan_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fees':
          result.fees = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'plan_id':
          result.plan_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_stream_cursor_inputSerializer
    implements StructuredSerializer<Gcable_plan_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_stream_cursor_input,
    _$Gcable_plan_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcable_plan_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(Gcable_plan_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcable_plan_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_plan_stream_cursor_value_input))!
              as Gcable_plan_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gcable_plan_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_stream_cursor_value_input,
    _$Gcable_plan_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcable_plan_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.desc;
    if (value != null) {
      result
        ..add('desc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fees;
    if (value != null) {
      result
        ..add('fees')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.plan_id;
    if (value != null) {
      result
        ..add('plan_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_plan_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'desc':
          result.desc = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'fees':
          result.fees = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'plan_id':
          result.plan_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_plan_updatesSerializer
    implements StructuredSerializer<Gcable_plan_updates> {
  @override
  final Iterable<Type> types = const [
    Gcable_plan_updates,
    _$Gcable_plan_updates
  ];
  @override
  final String wireName = 'Gcable_plan_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_plan_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcable_plan_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_plan_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_plan_set_input)));
    }
    return result;
  }

  @override
  Gcable_plan_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_plan_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_plan_inc_input))!
              as Gcable_plan_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_plan_set_input))!
              as Gcable_plan_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_plan_bool_exp))!
              as Gcable_plan_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_bool_expSerializer
    implements StructuredSerializer<Gcable_subscription_fee_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_bool_exp,
    _$Gcable_subscription_fee_bool_exp
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_subscription_fee_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscription_fee_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_subscription_fee_bool_exp)])));
    }
    value = object.cable_subscriptions;
    if (value != null) {
      result
        ..add('cable_subscriptions')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_bool_exp)));
    }
    value = object.cable_subscriptions_aggregate;
    if (value != null) {
      result
        ..add('cable_subscriptions_aggregate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_aggregate_bool_exp)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gdate_comparison_exp)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscription_fee_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_bool_exp))!
              as Gcable_subscription_fee_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscription_fee_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case 'cable_subscriptions':
          result.cable_subscriptions.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_subscriptions_bool_exp))!
              as Gcable_subscriptions_bool_exp);
          break;
        case 'cable_subscriptions_aggregate':
          result.cable_subscriptions_aggregate.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_aggregate_bool_exp))!
              as Gcable_subscriptions_aggregate_bool_exp);
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gdate_comparison_exp))!
              as Gdate_comparison_exp);
          break;
        case 'fee':
          result.fee.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_inc_inputSerializer
    implements StructuredSerializer<Gcable_subscription_fee_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_inc_input,
    _$Gcable_subscription_fee_inc_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_insert_inputSerializer
    implements StructuredSerializer<Gcable_subscription_fee_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_insert_input,
    _$Gcable_subscription_fee_insert_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_subscriptions;
    if (value != null) {
      result
        ..add('cable_subscriptions')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_arr_rel_insert_input)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_subscriptions':
          result.cable_subscriptions.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscriptions_arr_rel_insert_input))!
              as Gcable_subscriptions_arr_rel_insert_input);
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_obj_rel_insert_inputSerializer
    implements
        StructuredSerializer<Gcable_subscription_fee_obj_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_obj_rel_insert_input,
    _$Gcable_subscription_fee_obj_rel_insert_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_obj_rel_insert_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_subscription_fee_obj_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(Gcable_subscription_fee_insert_input)),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscription_fee_on_conflict)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_obj_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_obj_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_insert_input))!
              as Gcable_subscription_fee_insert_input);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_on_conflict))!
              as Gcable_subscription_fee_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_on_conflictSerializer
    implements StructuredSerializer<Gcable_subscription_fee_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_on_conflict,
    _$Gcable_subscription_fee_on_conflict
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcable_subscription_fee_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(BuiltList,
              const [const FullType(Gcable_subscription_fee_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscription_fee_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_constraint))!
              as Gcable_subscription_fee_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscription_fee_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_bool_exp))!
              as Gcable_subscription_fee_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_order_bySerializer
    implements StructuredSerializer<Gcable_subscription_fee_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_order_by,
    _$Gcable_subscription_fee_order_by
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_subscriptions_aggregate;
    if (value != null) {
      result
        ..add('cable_subscriptions_aggregate')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_aggregate_order_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_subscriptions_aggregate':
          result.cable_subscriptions_aggregate.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_aggregate_order_by))!
              as Gcable_subscriptions_aggregate_order_by);
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_pk_columns_inputSerializer
    implements StructuredSerializer<Gcable_subscription_fee_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_pk_columns_input,
    _$Gcable_subscription_fee_pk_columns_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcable_subscription_fee_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_set_inputSerializer
    implements StructuredSerializer<Gcable_subscription_fee_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_set_input,
    _$Gcable_subscription_fee_set_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_stream_cursor_inputSerializer
    implements
        StructuredSerializer<Gcable_subscription_fee_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_stream_cursor_input,
    _$Gcable_subscription_fee_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_stream_cursor_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_subscription_fee_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(
              Gcable_subscription_fee_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscription_fee_stream_cursor_value_input))!
              as Gcable_subscription_fee_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_stream_cursor_value_inputSerializer
    implements
        StructuredSerializer<
            Gcable_subscription_fee_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_stream_cursor_value_input,
    _$Gcable_subscription_fee_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_subscription_fee_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new Gcable_subscription_fee_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscription_fee_updatesSerializer
    implements StructuredSerializer<Gcable_subscription_fee_updates> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscription_fee_updates,
    _$Gcable_subscription_fee_updates
  ];
  @override
  final String wireName = 'Gcable_subscription_fee_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscription_fee_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcable_subscription_fee_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscription_fee_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscription_fee_set_input)));
    }
    return result;
  }

  @override
  Gcable_subscription_fee_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscription_fee_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_inc_input))!
              as Gcable_subscription_fee_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_set_input))!
              as Gcable_subscription_fee_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_bool_exp))!
              as Gcable_subscription_fee_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_aggregate_bool_expSerializer
    implements StructuredSerializer<Gcable_subscriptions_aggregate_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_aggregate_bool_exp,
    _$Gcable_subscriptions_aggregate_bool_exp
  ];
  @override
  final String wireName = 'Gcable_subscriptions_aggregate_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_aggregate_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_aggregate_bool_exp_count)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_aggregate_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_aggregate_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'count':
          result.count.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscriptions_aggregate_bool_exp_count))!
              as Gcable_subscriptions_aggregate_bool_exp_count);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_aggregate_bool_exp_countSerializer
    implements
        StructuredSerializer<Gcable_subscriptions_aggregate_bool_exp_count> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_aggregate_bool_exp_count,
    _$Gcable_subscriptions_aggregate_bool_exp_count
  ];
  @override
  final String wireName = 'Gcable_subscriptions_aggregate_bool_exp_count';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_subscriptions_aggregate_bool_exp_count object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GInt_comparison_exp)),
    ];
    Object? value;
    value = object.arguments;
    if (value != null) {
      result
        ..add('arguments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_subscriptions_select_column)])));
    }
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_aggregate_bool_exp_count deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_aggregate_bool_exp_countBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscriptions_select_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_subscriptions_bool_exp))!
              as Gcable_subscriptions_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_aggregate_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_aggregate_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_aggregate_order_by,
    _$Gcable_subscriptions_aggregate_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_aggregate_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_aggregate_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.avg;
    if (value != null) {
      result
        ..add('avg')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_avg_order_by)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.max;
    if (value != null) {
      result
        ..add('max')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_max_order_by)));
    }
    value = object.min;
    if (value != null) {
      result
        ..add('min')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_min_order_by)));
    }
    value = object.stddev;
    if (value != null) {
      result
        ..add('stddev')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_stddev_order_by)));
    }
    value = object.stddev_pop;
    if (value != null) {
      result
        ..add('stddev_pop')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_stddev_pop_order_by)));
    }
    value = object.stddev_samp;
    if (value != null) {
      result
        ..add('stddev_samp')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_stddev_samp_order_by)));
    }
    value = object.sum;
    if (value != null) {
      result
        ..add('sum')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_sum_order_by)));
    }
    value = object.var_pop;
    if (value != null) {
      result
        ..add('var_pop')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_var_pop_order_by)));
    }
    value = object.var_samp;
    if (value != null) {
      result
        ..add('var_samp')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_var_samp_order_by)));
    }
    value = object.variance;
    if (value != null) {
      result
        ..add('variance')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscriptions_variance_order_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_aggregate_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_aggregate_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'avg':
          result.avg.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_avg_order_by))!
              as Gcable_subscriptions_avg_order_by);
          break;
        case 'count':
          result.count = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'max':
          result.max.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_max_order_by))!
              as Gcable_subscriptions_max_order_by);
          break;
        case 'min':
          result.min.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_min_order_by))!
              as Gcable_subscriptions_min_order_by);
          break;
        case 'stddev':
          result.stddev.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_stddev_order_by))!
              as Gcable_subscriptions_stddev_order_by);
          break;
        case 'stddev_pop':
          result.stddev_pop.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_stddev_pop_order_by))!
              as Gcable_subscriptions_stddev_pop_order_by);
          break;
        case 'stddev_samp':
          result.stddev_samp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscriptions_stddev_samp_order_by))!
              as Gcable_subscriptions_stddev_samp_order_by);
          break;
        case 'sum':
          result.sum.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_sum_order_by))!
              as Gcable_subscriptions_sum_order_by);
          break;
        case 'var_pop':
          result.var_pop.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_var_pop_order_by))!
              as Gcable_subscriptions_var_pop_order_by);
          break;
        case 'var_samp':
          result.var_samp.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_var_samp_order_by))!
              as Gcable_subscriptions_var_samp_order_by);
          break;
        case 'variance':
          result.variance.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_variance_order_by))!
              as Gcable_subscriptions_variance_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_arr_rel_insert_inputSerializer
    implements StructuredSerializer<Gcable_subscriptions_arr_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_arr_rel_insert_input,
    _$Gcable_subscriptions_arr_rel_insert_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_arr_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_arr_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(BuiltList,
              const [const FullType(Gcable_subscriptions_insert_input)])),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_on_conflict)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_arr_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_arr_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscriptions_insert_input)
              ]))! as BuiltList<Object?>);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_on_conflict))!
              as Gcable_subscriptions_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_avg_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_avg_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_avg_order_by,
    _$Gcable_subscriptions_avg_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_avg_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_avg_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_avg_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_avg_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_bool_expSerializer
    implements StructuredSerializer<Gcable_subscriptions_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_bool_exp,
    _$Gcable_subscriptions_bool_exp
  ];
  @override
  final String wireName = 'Gcable_subscriptions_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_subscriptions_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gcable_subscriptions_bool_exp)])));
    }
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    value = object.cable_subscription_fee;
    if (value != null) {
      result
        ..add('cable_subscription_fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscription_fee_bool_exp)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz_comparison_exp)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz_comparison_exp)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscriptions_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_subscriptions_bool_exp))!
              as Gcable_subscriptions_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscriptions_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case 'acc_ph_upi':
          result.acc_ph_upi.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'cable_id':
          result.cable_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
        case 'cable_subscription_fee':
          result.cable_subscription_fee.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_bool_exp))!
              as Gcable_subscription_fee_bool_exp);
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gtimestamptz_comparison_exp))!
              as Gtimestamptz_comparison_exp);
          break;
        case 'fee':
          result.fee.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gtimestamptz_comparison_exp))!
              as Gtimestamptz_comparison_exp);
          break;
        case 'trans_id':
          result.trans_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'type':
          result.type.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_inc_inputSerializer
    implements StructuredSerializer<Gcable_subscriptions_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_inc_input,
    _$Gcable_subscriptions_inc_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_insert_inputSerializer
    implements StructuredSerializer<Gcable_subscriptions_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_insert_input,
    _$Gcable_subscriptions_insert_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_obj_rel_insert_input)));
    }
    value = object.cable_subscription_fee;
    if (value != null) {
      result
        ..add('cable_subscription_fee')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_subscription_fee_obj_rel_insert_input)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'acc_ph_upi':
          result.acc_ph_upi = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_opr_obj_rel_insert_input))!
              as Gcable_opr_obj_rel_insert_input);
          break;
        case 'cable_subscription_fee':
          result.cable_subscription_fee.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscription_fee_obj_rel_insert_input))!
              as Gcable_subscription_fee_obj_rel_insert_input);
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_max_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_max_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_max_order_by,
    _$Gcable_subscriptions_max_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_max_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_max_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_max_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_max_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'acc_ph_upi':
          result.acc_ph_upi = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_on':
          result.paid_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_min_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_min_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_min_order_by,
    _$Gcable_subscriptions_min_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_min_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_min_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_min_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_min_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'acc_ph_upi':
          result.acc_ph_upi = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_on':
          result.paid_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_on_conflictSerializer
    implements StructuredSerializer<Gcable_subscriptions_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_on_conflict,
    _$Gcable_subscriptions_on_conflict
  ];
  @override
  final String wireName = 'Gcable_subscriptions_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcable_subscriptions_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(BuiltList,
              const [const FullType(Gcable_subscriptions_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_bool_exp)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_constraint))!
              as Gcable_subscriptions_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcable_subscriptions_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_subscriptions_bool_exp))!
              as Gcable_subscriptions_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_order_by,
    _$Gcable_subscriptions_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_order_by)));
    }
    value = object.cable_subscription_fee;
    if (value != null) {
      result
        ..add('cable_subscription_fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscription_fee_order_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'acc_ph_upi':
          result.acc_ph_upi = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_order_by))!
              as Gcable_opr_order_by);
          break;
        case 'cable_subscription_fee':
          result.cable_subscription_fee.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscription_fee_order_by))!
              as Gcable_subscription_fee_order_by);
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_on':
          result.paid_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_pk_columns_inputSerializer
    implements StructuredSerializer<Gcable_subscriptions_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_pk_columns_input,
    _$Gcable_subscriptions_pk_columns_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcable_subscriptions_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_set_inputSerializer
    implements StructuredSerializer<Gcable_subscriptions_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_set_input,
    _$Gcable_subscriptions_set_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'acc_ph_upi':
          result.acc_ph_upi = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_stddev_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_stddev_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_stddev_order_by,
    _$Gcable_subscriptions_stddev_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_stddev_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_stddev_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_stddev_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_stddev_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_stddev_pop_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_stddev_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_stddev_pop_order_by,
    _$Gcable_subscriptions_stddev_pop_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_stddev_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_stddev_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_stddev_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_stddev_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_stddev_samp_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_stddev_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_stddev_samp_order_by,
    _$Gcable_subscriptions_stddev_samp_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_stddev_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_stddev_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_stddev_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_stddev_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_stream_cursor_inputSerializer
    implements StructuredSerializer<Gcable_subscriptions_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_stream_cursor_input,
    _$Gcable_subscriptions_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType:
              const FullType(Gcable_subscriptions_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_subscriptions_stream_cursor_value_input))!
              as Gcable_subscriptions_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_stream_cursor_value_inputSerializer
    implements
        StructuredSerializer<Gcable_subscriptions_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_stream_cursor_value_input,
    _$Gcable_subscriptions_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcable_subscriptions_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gcable_subscriptions_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.acc_ph_upi;
    if (value != null) {
      result
        ..add('acc_ph_upi')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.type;
    if (value != null) {
      result
        ..add('type')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'acc_ph_upi':
          result.acc_ph_upi = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'type':
          result.type = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_sum_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_sum_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_sum_order_by,
    _$Gcable_subscriptions_sum_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_sum_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_sum_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_sum_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_sum_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_updatesSerializer
    implements StructuredSerializer<Gcable_subscriptions_updates> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_updates,
    _$Gcable_subscriptions_updates
  ];
  @override
  final String wireName = 'Gcable_subscriptions_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcable_subscriptions_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_subscriptions_set_input)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_inc_input))!
              as Gcable_subscriptions_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_subscriptions_set_input))!
              as Gcable_subscriptions_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_subscriptions_bool_exp))!
              as Gcable_subscriptions_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_var_pop_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_var_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_var_pop_order_by,
    _$Gcable_subscriptions_var_pop_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_var_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_var_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_var_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_var_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_var_samp_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_var_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_var_samp_order_by,
    _$Gcable_subscriptions_var_samp_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_var_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_var_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_var_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_var_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcable_subscriptions_variance_order_bySerializer
    implements StructuredSerializer<Gcable_subscriptions_variance_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcable_subscriptions_variance_order_by,
    _$Gcable_subscriptions_variance_order_by
  ];
  @override
  final String wireName = 'Gcable_subscriptions_variance_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcable_subscriptions_variance_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.fee;
    if (value != null) {
      result
        ..add('fee')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcable_subscriptions_variance_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcable_subscriptions_variance_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'fee':
          result.fee = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_aggregate_bool_expSerializer
    implements StructuredSerializer<Gcollectors_aggregate_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_aggregate_bool_exp,
    _$Gcollectors_aggregate_bool_exp
  ];
  @override
  final String wireName = 'Gcollectors_aggregate_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_aggregate_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.bool_and;
    if (value != null) {
      result
        ..add('bool_and')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcollectors_aggregate_bool_exp_bool_and)));
    }
    value = object.bool_or;
    if (value != null) {
      result
        ..add('bool_or')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcollectors_aggregate_bool_exp_bool_or)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcollectors_aggregate_bool_exp_count)));
    }
    return result;
  }

  @override
  Gcollectors_aggregate_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_aggregate_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'bool_and':
          result.bool_and.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_aggregate_bool_exp_bool_and))!
              as Gcollectors_aggregate_bool_exp_bool_and);
          break;
        case 'bool_or':
          result.bool_or.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_aggregate_bool_exp_bool_or))!
              as Gcollectors_aggregate_bool_exp_bool_or);
          break;
        case 'count':
          result.count.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_aggregate_bool_exp_count))!
              as Gcollectors_aggregate_bool_exp_count);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_aggregate_bool_exp_bool_andSerializer
    implements StructuredSerializer<Gcollectors_aggregate_bool_exp_bool_and> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_aggregate_bool_exp_bool_and,
    _$Gcollectors_aggregate_bool_exp_bool_and
  ];
  @override
  final String wireName = 'Gcollectors_aggregate_bool_exp_bool_and';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_aggregate_bool_exp_bool_and object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'arguments',
      serializers.serialize(object.arguments,
          specifiedType: const FullType(
              Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns)),
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GBoolean_comparison_exp)),
    ];
    Object? value;
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    return result;
  }

  @override
  Gcollectors_aggregate_bool_exp_bool_and deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_aggregate_bool_exp_bool_andBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments = serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns))!
              as Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns;
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_aggregate_bool_exp_bool_orSerializer
    implements StructuredSerializer<Gcollectors_aggregate_bool_exp_bool_or> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_aggregate_bool_exp_bool_or,
    _$Gcollectors_aggregate_bool_exp_bool_or
  ];
  @override
  final String wireName = 'Gcollectors_aggregate_bool_exp_bool_or';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_aggregate_bool_exp_bool_or object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'arguments',
      serializers.serialize(object.arguments,
          specifiedType: const FullType(
              Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns)),
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GBoolean_comparison_exp)),
    ];
    Object? value;
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    return result;
  }

  @override
  Gcollectors_aggregate_bool_exp_bool_or deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_aggregate_bool_exp_bool_orBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments = serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns))!
              as Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns;
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_aggregate_bool_exp_countSerializer
    implements StructuredSerializer<Gcollectors_aggregate_bool_exp_count> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_aggregate_bool_exp_count,
    _$Gcollectors_aggregate_bool_exp_count
  ];
  @override
  final String wireName = 'Gcollectors_aggregate_bool_exp_count';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_aggregate_bool_exp_count object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GInt_comparison_exp)),
    ];
    Object? value;
    value = object.arguments;
    if (value != null) {
      result
        ..add('arguments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcollectors_select_column)])));
    }
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    return result;
  }

  @override
  Gcollectors_aggregate_bool_exp_count deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_aggregate_bool_exp_countBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcollectors_select_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_aggregate_order_bySerializer
    implements StructuredSerializer<Gcollectors_aggregate_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_aggregate_order_by,
    _$Gcollectors_aggregate_order_by
  ];
  @override
  final String wireName = 'Gcollectors_aggregate_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_aggregate_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.avg;
    if (value != null) {
      result
        ..add('avg')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_avg_order_by)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.max;
    if (value != null) {
      result
        ..add('max')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_max_order_by)));
    }
    value = object.min;
    if (value != null) {
      result
        ..add('min')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_min_order_by)));
    }
    value = object.stddev;
    if (value != null) {
      result
        ..add('stddev')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_stddev_order_by)));
    }
    value = object.stddev_pop;
    if (value != null) {
      result
        ..add('stddev_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_stddev_pop_order_by)));
    }
    value = object.stddev_samp;
    if (value != null) {
      result
        ..add('stddev_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_stddev_samp_order_by)));
    }
    value = object.sum;
    if (value != null) {
      result
        ..add('sum')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_sum_order_by)));
    }
    value = object.var_pop;
    if (value != null) {
      result
        ..add('var_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_var_pop_order_by)));
    }
    value = object.var_samp;
    if (value != null) {
      result
        ..add('var_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_var_samp_order_by)));
    }
    value = object.variance;
    if (value != null) {
      result
        ..add('variance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_variance_order_by)));
    }
    return result;
  }

  @override
  Gcollectors_aggregate_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_aggregate_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'avg':
          result.avg.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_avg_order_by))!
              as Gcollectors_avg_order_by);
          break;
        case 'count':
          result.count = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'max':
          result.max.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_max_order_by))!
              as Gcollectors_max_order_by);
          break;
        case 'min':
          result.min.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_min_order_by))!
              as Gcollectors_min_order_by);
          break;
        case 'stddev':
          result.stddev.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_stddev_order_by))!
              as Gcollectors_stddev_order_by);
          break;
        case 'stddev_pop':
          result.stddev_pop.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_stddev_pop_order_by))!
              as Gcollectors_stddev_pop_order_by);
          break;
        case 'stddev_samp':
          result.stddev_samp.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_stddev_samp_order_by))!
              as Gcollectors_stddev_samp_order_by);
          break;
        case 'sum':
          result.sum.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_sum_order_by))!
              as Gcollectors_sum_order_by);
          break;
        case 'var_pop':
          result.var_pop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_var_pop_order_by))!
              as Gcollectors_var_pop_order_by);
          break;
        case 'var_samp':
          result.var_samp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_var_samp_order_by))!
              as Gcollectors_var_samp_order_by);
          break;
        case 'variance':
          result.variance.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_variance_order_by))!
              as Gcollectors_variance_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_arr_rel_insert_inputSerializer
    implements StructuredSerializer<Gcollectors_arr_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_arr_rel_insert_input,
    _$Gcollectors_arr_rel_insert_input
  ];
  @override
  final String wireName = 'Gcollectors_arr_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_arr_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gcollectors_insert_input)])),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_on_conflict)));
    }
    return result;
  }

  @override
  Gcollectors_arr_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_arr_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcollectors_insert_input)
              ]))! as BuiltList<Object?>);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_on_conflict))!
              as Gcollectors_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_avg_order_bySerializer
    implements StructuredSerializer<Gcollectors_avg_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_avg_order_by,
    _$Gcollectors_avg_order_by
  ];
  @override
  final String wireName = 'Gcollectors_avg_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_avg_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_avg_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_avg_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_bool_expSerializer
    implements StructuredSerializer<Gcollectors_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_bool_exp,
    _$Gcollectors_bool_exp
  ];
  @override
  final String wireName = 'Gcollectors_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcollectors_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcollectors_bool_exp)])));
    }
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.isAdmin;
    if (value != null) {
      result
        ..add('isAdmin')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBoolean_comparison_exp)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.payments;
    if (value != null) {
      result
        ..add('payments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    value = object.payments_aggregate;
    if (value != null) {
      result
        ..add('payments_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_bool_exp)));
    }
    return result;
  }

  @override
  Gcollectors_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcollectors_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcollectors_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case 'address':
          result.address.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'belongs_to':
          result.belongs_to.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
        case 'collec_id':
          result.collec_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'device_token':
          result.device_token.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'email':
          result.email.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'isAdmin':
          result.isAdmin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
        case 'mob_no':
          result.mob_no.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'name':
          result.name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'password':
          result.password.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'payments':
          result.payments.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
        case 'payments_aggregate':
          result.payments_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_aggregate_bool_exp))!
              as Gpayments_aggregate_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_inc_inputSerializer
    implements StructuredSerializer<Gcollectors_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_inc_input,
    _$Gcollectors_inc_input
  ];
  @override
  final String wireName = 'Gcollectors_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcollectors_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_insert_inputSerializer
    implements StructuredSerializer<Gcollectors_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_insert_input,
    _$Gcollectors_insert_input
  ];
  @override
  final String wireName = 'Gcollectors_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_obj_rel_insert_input)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isAdmin;
    if (value != null) {
      result
        ..add('isAdmin')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.payments;
    if (value != null) {
      result
        ..add('payments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_arr_rel_insert_input)));
    }
    return result;
  }

  @override
  Gcollectors_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_opr_obj_rel_insert_input))!
              as Gcable_opr_obj_rel_insert_input);
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'device_token':
          result.device_token = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isAdmin':
          result.isAdmin = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'mob_no':
          result.mob_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'payments':
          result.payments.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_arr_rel_insert_input))!
              as Gpayments_arr_rel_insert_input);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_max_order_bySerializer
    implements StructuredSerializer<Gcollectors_max_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_max_order_by,
    _$Gcollectors_max_order_by
  ];
  @override
  final String wireName = 'Gcollectors_max_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_max_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_max_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_max_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'device_token':
          result.device_token = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'mob_no':
          result.mob_no = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_min_order_bySerializer
    implements StructuredSerializer<Gcollectors_min_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_min_order_by,
    _$Gcollectors_min_order_by
  ];
  @override
  final String wireName = 'Gcollectors_min_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_min_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_min_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_min_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'device_token':
          result.device_token = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'mob_no':
          result.mob_no = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_obj_rel_insert_inputSerializer
    implements StructuredSerializer<Gcollectors_obj_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_obj_rel_insert_input,
    _$Gcollectors_obj_rel_insert_input
  ];
  @override
  final String wireName = 'Gcollectors_obj_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_obj_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(Gcollectors_insert_input)),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_on_conflict)));
    }
    return result;
  }

  @override
  Gcollectors_obj_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_obj_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_insert_input))!
              as Gcollectors_insert_input);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_on_conflict))!
              as Gcollectors_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_on_conflictSerializer
    implements StructuredSerializer<Gcollectors_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_on_conflict,
    _$Gcollectors_on_conflict
  ];
  @override
  final String wireName = 'Gcollectors_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcollectors_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gcollectors_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    return result;
  }

  @override
  Gcollectors_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_constraint))!
              as Gcollectors_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcollectors_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_order_bySerializer
    implements StructuredSerializer<Gcollectors_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_order_by,
    _$Gcollectors_order_by
  ];
  @override
  final String wireName = 'Gcollectors_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_order_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.isAdmin;
    if (value != null) {
      result
        ..add('isAdmin')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.payments_aggregate;
    if (value != null) {
      result
        ..add('payments_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_order_by)));
    }
    return result;
  }

  @override
  Gcollectors_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_order_by))!
              as Gcable_opr_order_by);
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'device_token':
          result.device_token = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'isAdmin':
          result.isAdmin = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'mob_no':
          result.mob_no = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'payments_aggregate':
          result.payments_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_aggregate_order_by))!
              as Gpayments_aggregate_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_pk_columns_inputSerializer
    implements StructuredSerializer<Gcollectors_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_pk_columns_input,
    _$Gcollectors_pk_columns_input
  ];
  @override
  final String wireName = 'Gcollectors_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'collec_id',
      serializers.serialize(object.collec_id,
          specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcollectors_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_set_inputSerializer
    implements StructuredSerializer<Gcollectors_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_set_input,
    _$Gcollectors_set_input
  ];
  @override
  final String wireName = 'Gcollectors_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isAdmin;
    if (value != null) {
      result
        ..add('isAdmin')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcollectors_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'device_token':
          result.device_token = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isAdmin':
          result.isAdmin = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'mob_no':
          result.mob_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_stddev_order_bySerializer
    implements StructuredSerializer<Gcollectors_stddev_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_stddev_order_by,
    _$Gcollectors_stddev_order_by
  ];
  @override
  final String wireName = 'Gcollectors_stddev_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_stddev_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_stddev_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_stddev_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_stddev_pop_order_bySerializer
    implements StructuredSerializer<Gcollectors_stddev_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_stddev_pop_order_by,
    _$Gcollectors_stddev_pop_order_by
  ];
  @override
  final String wireName = 'Gcollectors_stddev_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_stddev_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_stddev_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_stddev_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_stddev_samp_order_bySerializer
    implements StructuredSerializer<Gcollectors_stddev_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_stddev_samp_order_by,
    _$Gcollectors_stddev_samp_order_by
  ];
  @override
  final String wireName = 'Gcollectors_stddev_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_stddev_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_stddev_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_stddev_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_stream_cursor_inputSerializer
    implements StructuredSerializer<Gcollectors_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_stream_cursor_input,
    _$Gcollectors_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcollectors_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(Gcollectors_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcollectors_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_stream_cursor_value_input))!
              as Gcollectors_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gcollectors_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_stream_cursor_value_input,
    _$Gcollectors_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcollectors_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.address;
    if (value != null) {
      result
        ..add('address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.device_token;
    if (value != null) {
      result
        ..add('device_token')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isAdmin;
    if (value != null) {
      result
        ..add('isAdmin')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.mob_no;
    if (value != null) {
      result
        ..add('mob_no')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.password;
    if (value != null) {
      result
        ..add('password')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcollectors_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'address':
          result.address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'device_token':
          result.device_token = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'isAdmin':
          result.isAdmin = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'mob_no':
          result.mob_no = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'password':
          result.password = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_sum_order_bySerializer
    implements StructuredSerializer<Gcollectors_sum_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_sum_order_by,
    _$Gcollectors_sum_order_by
  ];
  @override
  final String wireName = 'Gcollectors_sum_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_sum_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_sum_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_sum_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_updatesSerializer
    implements StructuredSerializer<Gcollectors_updates> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_updates,
    _$Gcollectors_updates
  ];
  @override
  final String wireName = 'Gcollectors_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcollectors_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_set_input)));
    }
    return result;
  }

  @override
  Gcollectors_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_inc_input))!
              as Gcollectors_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_set_input))!
              as Gcollectors_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_var_pop_order_bySerializer
    implements StructuredSerializer<Gcollectors_var_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_var_pop_order_by,
    _$Gcollectors_var_pop_order_by
  ];
  @override
  final String wireName = 'Gcollectors_var_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_var_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_var_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_var_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_var_samp_order_bySerializer
    implements StructuredSerializer<Gcollectors_var_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_var_samp_order_by,
    _$Gcollectors_var_samp_order_by
  ];
  @override
  final String wireName = 'Gcollectors_var_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_var_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_var_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_var_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcollectors_variance_order_bySerializer
    implements StructuredSerializer<Gcollectors_variance_order_by> {
  @override
  final Iterable<Type> types = const [
    Gcollectors_variance_order_by,
    _$Gcollectors_variance_order_by
  ];
  @override
  final String wireName = 'Gcollectors_variance_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcollectors_variance_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.belongs_to;
    if (value != null) {
      result
        ..add('belongs_to')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collec_id;
    if (value != null) {
      result
        ..add('collec_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcollectors_variance_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcollectors_variance_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'belongs_to':
          result.belongs_to = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collec_id':
          result.collec_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_bool_expSerializer
    implements StructuredSerializer<Gcustomer_bool_exp> {
  @override
  final Iterable<Type> types = const [Gcustomer_bool_exp, _$Gcustomer_bool_exp];
  @override
  final String wireName = 'Gcustomer_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcustomer_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gcustomer_bool_exp)])));
    }
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.first_name;
    if (value != null) {
      result
        ..add('first_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.ip_address;
    if (value != null) {
      result
        ..add('ip_address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.last_name;
    if (value != null) {
      result
        ..add('last_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.orders;
    if (value != null) {
      result
        ..add('orders')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_bool_exp)));
    }
    value = object.orders_aggregate;
    if (value != null) {
      result
        ..add('orders_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_aggregate_bool_exp)));
    }
    value = object.phone;
    if (value != null) {
      result
        ..add('phone')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.username;
    if (value != null) {
      result
        ..add('username')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    return result;
  }

  @override
  Gcustomer_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcustomer_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_bool_exp))!
              as Gcustomer_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gcustomer_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case 'email':
          result.email.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'first_name':
          result.first_name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'ip_address':
          result.ip_address.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'last_name':
          result.last_name.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'orders':
          result.orders.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_bool_exp))!
              as Gorder_bool_exp);
          break;
        case 'orders_aggregate':
          result.orders_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_aggregate_bool_exp))!
              as Gorder_aggregate_bool_exp);
          break;
        case 'phone':
          result.phone.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'username':
          result.username.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_inc_inputSerializer
    implements StructuredSerializer<Gcustomer_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_inc_input,
    _$Gcustomer_inc_input
  ];
  @override
  final String wireName = 'Gcustomer_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gcustomer_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_insert_inputSerializer
    implements StructuredSerializer<Gcustomer_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_insert_input,
    _$Gcustomer_insert_input
  ];
  @override
  final String wireName = 'Gcustomer_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.first_name;
    if (value != null) {
      result
        ..add('first_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ip_address;
    if (value != null) {
      result
        ..add('ip_address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.last_name;
    if (value != null) {
      result
        ..add('last_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.orders;
    if (value != null) {
      result
        ..add('orders')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_arr_rel_insert_input)));
    }
    value = object.phone;
    if (value != null) {
      result
        ..add('phone')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.username;
    if (value != null) {
      result
        ..add('username')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcustomer_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'first_name':
          result.first_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ip_address':
          result.ip_address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'last_name':
          result.last_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'orders':
          result.orders.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_arr_rel_insert_input))!
              as Gorder_arr_rel_insert_input);
          break;
        case 'phone':
          result.phone = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'username':
          result.username = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_obj_rel_insert_inputSerializer
    implements StructuredSerializer<Gcustomer_obj_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_obj_rel_insert_input,
    _$Gcustomer_obj_rel_insert_input
  ];
  @override
  final String wireName = 'Gcustomer_obj_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_obj_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(Gcustomer_insert_input)),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_on_conflict)));
    }
    return result;
  }

  @override
  Gcustomer_obj_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_obj_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_insert_input))!
              as Gcustomer_insert_input);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_on_conflict))!
              as Gcustomer_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_on_conflictSerializer
    implements StructuredSerializer<Gcustomer_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_on_conflict,
    _$Gcustomer_on_conflict
  ];
  @override
  final String wireName = 'Gcustomer_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gcustomer_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gcustomer_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_bool_exp)));
    }
    return result;
  }

  @override
  Gcustomer_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_constraint))!
              as Gcustomer_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gcustomer_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_bool_exp))!
              as Gcustomer_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_order_bySerializer
    implements StructuredSerializer<Gcustomer_order_by> {
  @override
  final Iterable<Type> types = const [Gcustomer_order_by, _$Gcustomer_order_by];
  @override
  final String wireName = 'Gcustomer_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.first_name;
    if (value != null) {
      result
        ..add('first_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.ip_address;
    if (value != null) {
      result
        ..add('ip_address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.last_name;
    if (value != null) {
      result
        ..add('last_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.orders_aggregate;
    if (value != null) {
      result
        ..add('orders_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_aggregate_order_by)));
    }
    value = object.phone;
    if (value != null) {
      result
        ..add('phone')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.username;
    if (value != null) {
      result
        ..add('username')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gcustomer_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'first_name':
          result.first_name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'ip_address':
          result.ip_address = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'last_name':
          result.last_name = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'orders_aggregate':
          result.orders_aggregate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_aggregate_order_by))!
              as Gorder_aggregate_order_by);
          break;
        case 'phone':
          result.phone = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'username':
          result.username = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_pk_columns_inputSerializer
    implements StructuredSerializer<Gcustomer_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_pk_columns_input,
    _$Gcustomer_pk_columns_input
  ];
  @override
  final String wireName = 'Gcustomer_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gcustomer_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_set_inputSerializer
    implements StructuredSerializer<Gcustomer_set_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_set_input,
    _$Gcustomer_set_input
  ];
  @override
  final String wireName = 'Gcustomer_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.first_name;
    if (value != null) {
      result
        ..add('first_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ip_address;
    if (value != null) {
      result
        ..add('ip_address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.last_name;
    if (value != null) {
      result
        ..add('last_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phone;
    if (value != null) {
      result
        ..add('phone')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.username;
    if (value != null) {
      result
        ..add('username')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcustomer_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'first_name':
          result.first_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ip_address':
          result.ip_address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'last_name':
          result.last_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phone':
          result.phone = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'username':
          result.username = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_stream_cursor_inputSerializer
    implements StructuredSerializer<Gcustomer_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_stream_cursor_input,
    _$Gcustomer_stream_cursor_input
  ];
  @override
  final String wireName = 'Gcustomer_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(Gcustomer_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gcustomer_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcustomer_stream_cursor_value_input))!
              as Gcustomer_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gcustomer_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gcustomer_stream_cursor_value_input,
    _$Gcustomer_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gcustomer_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gcustomer_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.email;
    if (value != null) {
      result
        ..add('email')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.first_name;
    if (value != null) {
      result
        ..add('first_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.ip_address;
    if (value != null) {
      result
        ..add('ip_address')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.last_name;
    if (value != null) {
      result
        ..add('last_name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.phone;
    if (value != null) {
      result
        ..add('phone')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.username;
    if (value != null) {
      result
        ..add('username')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gcustomer_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'email':
          result.email = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'first_name':
          result.first_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'ip_address':
          result.ip_address = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'last_name':
          result.last_name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'phone':
          result.phone = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'username':
          result.username = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gcustomer_updatesSerializer
    implements StructuredSerializer<Gcustomer_updates> {
  @override
  final Iterable<Type> types = const [Gcustomer_updates, _$Gcustomer_updates];
  @override
  final String wireName = 'Gcustomer_updates';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gcustomer_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gcustomer_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_set_input)));
    }
    return result;
  }

  @override
  Gcustomer_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gcustomer_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_inc_input))!
              as Gcustomer_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_set_input))!
              as Gcustomer_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_bool_exp))!
              as Gcustomer_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gdate_comparison_expSerializer
    implements StructuredSerializer<Gdate_comparison_exp> {
  @override
  final Iterable<Type> types = const [
    Gdate_comparison_exp,
    _$Gdate_comparison_exp
  ];
  @override
  final String wireName = 'Gdate_comparison_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gdate_comparison_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_eq;
    if (value != null) {
      result
        ..add('_eq')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.G_gt;
    if (value != null) {
      result
        ..add('_gt')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.G_gte;
    if (value != null) {
      result
        ..add('_gte')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.G_in;
    if (value != null) {
      result
        ..add('_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(Gdate)])));
    }
    value = object.G_is_null;
    if (value != null) {
      result
        ..add('_is_null')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_lt;
    if (value != null) {
      result
        ..add('_lt')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.G_lte;
    if (value != null) {
      result
        ..add('_lte')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.G_neq;
    if (value != null) {
      result
        ..add('_neq')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.G_nin;
    if (value != null) {
      result
        ..add('_nin')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(Gdate)])));
    }
    return result;
  }

  @override
  Gdate_comparison_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gdate_comparison_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_eq':
          result.G_eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case '_gt':
          result.G_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case '_gte':
          result.G_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case '_in':
          result.G_in.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(Gdate)]))!
              as BuiltList<Object?>);
          break;
        case '_is_null':
          result.G_is_null = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_lt':
          result.G_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case '_lte':
          result.G_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case '_neq':
          result.G_neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case '_nin':
          result.G_nin.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(BuiltList, const [const FullType(Gdate)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_aggregate_bool_expSerializer
    implements StructuredSerializer<Gnotifications_aggregate_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_aggregate_bool_exp,
    _$Gnotifications_aggregate_bool_exp
  ];
  @override
  final String wireName = 'Gnotifications_aggregate_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_aggregate_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.bool_and;
    if (value != null) {
      result
        ..add('bool_and')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gnotifications_aggregate_bool_exp_bool_and)));
    }
    value = object.bool_or;
    if (value != null) {
      result
        ..add('bool_or')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gnotifications_aggregate_bool_exp_bool_or)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gnotifications_aggregate_bool_exp_count)));
    }
    return result;
  }

  @override
  Gnotifications_aggregate_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_aggregate_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'bool_and':
          result.bool_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gnotifications_aggregate_bool_exp_bool_and))!
              as Gnotifications_aggregate_bool_exp_bool_and);
          break;
        case 'bool_or':
          result.bool_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gnotifications_aggregate_bool_exp_bool_or))!
              as Gnotifications_aggregate_bool_exp_bool_or);
          break;
        case 'count':
          result.count.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_aggregate_bool_exp_count))!
              as Gnotifications_aggregate_bool_exp_count);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_aggregate_bool_exp_bool_andSerializer
    implements
        StructuredSerializer<Gnotifications_aggregate_bool_exp_bool_and> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_aggregate_bool_exp_bool_and,
    _$Gnotifications_aggregate_bool_exp_bool_and
  ];
  @override
  final String wireName = 'Gnotifications_aggregate_bool_exp_bool_and';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      Gnotifications_aggregate_bool_exp_bool_and object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'arguments',
      serializers.serialize(object.arguments,
          specifiedType: const FullType(
              Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns)),
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GBoolean_comparison_exp)),
    ];
    Object? value;
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    return result;
  }

  @override
  Gnotifications_aggregate_bool_exp_bool_and deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_aggregate_bool_exp_bool_andBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments = serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns))!
              as Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns;
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_aggregate_bool_exp_bool_orSerializer
    implements StructuredSerializer<Gnotifications_aggregate_bool_exp_bool_or> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_aggregate_bool_exp_bool_or,
    _$Gnotifications_aggregate_bool_exp_bool_or
  ];
  @override
  final String wireName = 'Gnotifications_aggregate_bool_exp_bool_or';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_aggregate_bool_exp_bool_or object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'arguments',
      serializers.serialize(object.arguments,
          specifiedType: const FullType(
              Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns)),
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GBoolean_comparison_exp)),
    ];
    Object? value;
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    return result;
  }

  @override
  Gnotifications_aggregate_bool_exp_bool_or deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_aggregate_bool_exp_bool_orBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments = serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns))!
              as Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns;
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_aggregate_bool_exp_countSerializer
    implements StructuredSerializer<Gnotifications_aggregate_bool_exp_count> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_aggregate_bool_exp_count,
    _$Gnotifications_aggregate_bool_exp_count
  ];
  @override
  final String wireName = 'Gnotifications_aggregate_bool_exp_count';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_aggregate_bool_exp_count object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GInt_comparison_exp)),
    ];
    Object? value;
    value = object.arguments;
    if (value != null) {
      result
        ..add('arguments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(Gnotifications_select_column)])));
    }
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    return result;
  }

  @override
  Gnotifications_aggregate_bool_exp_count deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_aggregate_bool_exp_countBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gnotifications_select_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_aggregate_order_bySerializer
    implements StructuredSerializer<Gnotifications_aggregate_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_aggregate_order_by,
    _$Gnotifications_aggregate_order_by
  ];
  @override
  final String wireName = 'Gnotifications_aggregate_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_aggregate_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.avg;
    if (value != null) {
      result
        ..add('avg')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_avg_order_by)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.max;
    if (value != null) {
      result
        ..add('max')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_max_order_by)));
    }
    value = object.min;
    if (value != null) {
      result
        ..add('min')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_min_order_by)));
    }
    value = object.stddev;
    if (value != null) {
      result
        ..add('stddev')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_stddev_order_by)));
    }
    value = object.stddev_pop;
    if (value != null) {
      result
        ..add('stddev_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_stddev_pop_order_by)));
    }
    value = object.stddev_samp;
    if (value != null) {
      result
        ..add('stddev_samp')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gnotifications_stddev_samp_order_by)));
    }
    value = object.sum;
    if (value != null) {
      result
        ..add('sum')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_sum_order_by)));
    }
    value = object.var_pop;
    if (value != null) {
      result
        ..add('var_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_var_pop_order_by)));
    }
    value = object.var_samp;
    if (value != null) {
      result
        ..add('var_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_var_samp_order_by)));
    }
    value = object.variance;
    if (value != null) {
      result
        ..add('variance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_variance_order_by)));
    }
    return result;
  }

  @override
  Gnotifications_aggregate_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_aggregate_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'avg':
          result.avg.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_avg_order_by))!
              as Gnotifications_avg_order_by);
          break;
        case 'count':
          result.count = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'max':
          result.max.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_max_order_by))!
              as Gnotifications_max_order_by);
          break;
        case 'min':
          result.min.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_min_order_by))!
              as Gnotifications_min_order_by);
          break;
        case 'stddev':
          result.stddev.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_stddev_order_by))!
              as Gnotifications_stddev_order_by);
          break;
        case 'stddev_pop':
          result.stddev_pop.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_stddev_pop_order_by))!
              as Gnotifications_stddev_pop_order_by);
          break;
        case 'stddev_samp':
          result.stddev_samp.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_stddev_samp_order_by))!
              as Gnotifications_stddev_samp_order_by);
          break;
        case 'sum':
          result.sum.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_sum_order_by))!
              as Gnotifications_sum_order_by);
          break;
        case 'var_pop':
          result.var_pop.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_var_pop_order_by))!
              as Gnotifications_var_pop_order_by);
          break;
        case 'var_samp':
          result.var_samp.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_var_samp_order_by))!
              as Gnotifications_var_samp_order_by);
          break;
        case 'variance':
          result.variance.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_variance_order_by))!
              as Gnotifications_variance_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_arr_rel_insert_inputSerializer
    implements StructuredSerializer<Gnotifications_arr_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_arr_rel_insert_input,
    _$Gnotifications_arr_rel_insert_input
  ];
  @override
  final String wireName = 'Gnotifications_arr_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_arr_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gnotifications_insert_input)])),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_on_conflict)));
    }
    return result;
  }

  @override
  Gnotifications_arr_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_arr_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gnotifications_insert_input)
              ]))! as BuiltList<Object?>);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_on_conflict))!
              as Gnotifications_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_avg_order_bySerializer
    implements StructuredSerializer<Gnotifications_avg_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_avg_order_by,
    _$Gnotifications_avg_order_by
  ];
  @override
  final String wireName = 'Gnotifications_avg_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_avg_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_avg_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_avg_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_bool_expSerializer
    implements StructuredSerializer<Gnotifications_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_bool_exp,
    _$Gnotifications_bool_exp
  ];
  @override
  final String wireName = 'Gnotifications_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gnotifications_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gnotifications_bool_exp)])));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    value = object.isRead;
    if (value != null) {
      result
        ..add('isRead')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GBoolean_comparison_exp)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.payment;
    if (value != null) {
      result
        ..add('payment')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    return result;
  }

  @override
  Gnotifications_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gnotifications_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gnotifications_bool_exp)
              ]))! as BuiltList<Object?>);
          break;
        case 'cable_id':
          result.cable_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
        case 'isRead':
          result.isRead.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GBoolean_comparison_exp))!
              as GBoolean_comparison_exp);
          break;
        case 'not_id':
          result.not_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'pay_id':
          result.pay_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'payment':
          result.payment.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_inc_inputSerializer
    implements StructuredSerializer<Gnotifications_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_inc_input,
    _$Gnotifications_inc_input
  ];
  @override
  final String wireName = 'Gnotifications_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gnotifications_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_insert_inputSerializer
    implements StructuredSerializer<Gnotifications_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_insert_input,
    _$Gnotifications_insert_input
  ];
  @override
  final String wireName = 'Gnotifications_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_obj_rel_insert_input)));
    }
    value = object.isRead;
    if (value != null) {
      result
        ..add('isRead')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.payment;
    if (value != null) {
      result
        ..add('payment')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_obj_rel_insert_input)));
    }
    return result;
  }

  @override
  Gnotifications_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_opr_obj_rel_insert_input))!
              as Gcable_opr_obj_rel_insert_input);
          break;
        case 'isRead':
          result.isRead = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'payment':
          result.payment.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_obj_rel_insert_input))!
              as Gpayments_obj_rel_insert_input);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_max_order_bySerializer
    implements StructuredSerializer<Gnotifications_max_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_max_order_by,
    _$Gnotifications_max_order_by
  ];
  @override
  final String wireName = 'Gnotifications_max_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_max_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_max_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_max_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_min_order_bySerializer
    implements StructuredSerializer<Gnotifications_min_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_min_order_by,
    _$Gnotifications_min_order_by
  ];
  @override
  final String wireName = 'Gnotifications_min_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_min_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_min_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_min_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_on_conflictSerializer
    implements StructuredSerializer<Gnotifications_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_on_conflict,
    _$Gnotifications_on_conflict
  ];
  @override
  final String wireName = 'Gnotifications_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gnotifications_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gnotifications_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    return result;
  }

  @override
  Gnotifications_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_constraint))!
              as Gnotifications_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gnotifications_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_order_bySerializer
    implements StructuredSerializer<Gnotifications_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_order_by,
    _$Gnotifications_order_by
  ];
  @override
  final String wireName = 'Gnotifications_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_order_by)));
    }
    value = object.isRead;
    if (value != null) {
      result
        ..add('isRead')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.payment;
    if (value != null) {
      result
        ..add('payment')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_order_by)));
    }
    return result;
  }

  @override
  Gnotifications_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_order_by))!
              as Gcable_opr_order_by);
          break;
        case 'isRead':
          result.isRead = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'payment':
          result.payment.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_order_by))!
              as Gpayments_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_pk_columns_inputSerializer
    implements StructuredSerializer<Gnotifications_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_pk_columns_input,
    _$Gnotifications_pk_columns_input
  ];
  @override
  final String wireName = 'Gnotifications_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'not_id',
      serializers.serialize(object.not_id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gnotifications_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_set_inputSerializer
    implements StructuredSerializer<Gnotifications_set_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_set_input,
    _$Gnotifications_set_input
  ];
  @override
  final String wireName = 'Gnotifications_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.isRead;
    if (value != null) {
      result
        ..add('isRead')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gnotifications_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'isRead':
          result.isRead = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_stddev_order_bySerializer
    implements StructuredSerializer<Gnotifications_stddev_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_stddev_order_by,
    _$Gnotifications_stddev_order_by
  ];
  @override
  final String wireName = 'Gnotifications_stddev_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_stddev_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_stddev_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_stddev_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_stddev_pop_order_bySerializer
    implements StructuredSerializer<Gnotifications_stddev_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_stddev_pop_order_by,
    _$Gnotifications_stddev_pop_order_by
  ];
  @override
  final String wireName = 'Gnotifications_stddev_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_stddev_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_stddev_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_stddev_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_stddev_samp_order_bySerializer
    implements StructuredSerializer<Gnotifications_stddev_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_stddev_samp_order_by,
    _$Gnotifications_stddev_samp_order_by
  ];
  @override
  final String wireName = 'Gnotifications_stddev_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_stddev_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_stddev_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_stddev_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_stream_cursor_inputSerializer
    implements StructuredSerializer<Gnotifications_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_stream_cursor_input,
    _$Gnotifications_stream_cursor_input
  ];
  @override
  final String wireName = 'Gnotifications_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType:
              const FullType(Gnotifications_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gnotifications_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_stream_cursor_value_input))!
              as Gnotifications_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gnotifications_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_stream_cursor_value_input,
    _$Gnotifications_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gnotifications_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.isRead;
    if (value != null) {
      result
        ..add('isRead')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gnotifications_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'isRead':
          result.isRead = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_sum_order_bySerializer
    implements StructuredSerializer<Gnotifications_sum_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_sum_order_by,
    _$Gnotifications_sum_order_by
  ];
  @override
  final String wireName = 'Gnotifications_sum_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_sum_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_sum_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_sum_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_updatesSerializer
    implements StructuredSerializer<Gnotifications_updates> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_updates,
    _$Gnotifications_updates
  ];
  @override
  final String wireName = 'Gnotifications_updates';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gnotifications_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_set_input)));
    }
    return result;
  }

  @override
  Gnotifications_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_inc_input))!
              as Gnotifications_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_set_input))!
              as Gnotifications_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_var_pop_order_bySerializer
    implements StructuredSerializer<Gnotifications_var_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_var_pop_order_by,
    _$Gnotifications_var_pop_order_by
  ];
  @override
  final String wireName = 'Gnotifications_var_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_var_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_var_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_var_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_var_samp_order_bySerializer
    implements StructuredSerializer<Gnotifications_var_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_var_samp_order_by,
    _$Gnotifications_var_samp_order_by
  ];
  @override
  final String wireName = 'Gnotifications_var_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_var_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_var_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_var_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gnotifications_variance_order_bySerializer
    implements StructuredSerializer<Gnotifications_variance_order_by> {
  @override
  final Iterable<Type> types = const [
    Gnotifications_variance_order_by,
    _$Gnotifications_variance_order_by
  ];
  @override
  final String wireName = 'Gnotifications_variance_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gnotifications_variance_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.not_id;
    if (value != null) {
      result
        ..add('not_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.pay_id;
    if (value != null) {
      result
        ..add('pay_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gnotifications_variance_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gnotifications_variance_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'not_id':
          result.not_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'pay_id':
          result.pay_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_aggregate_bool_expSerializer
    implements StructuredSerializer<Gorder_aggregate_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gorder_aggregate_bool_exp,
    _$Gorder_aggregate_bool_exp
  ];
  @override
  final String wireName = 'Gorder_aggregate_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_aggregate_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_aggregate_bool_exp_count)));
    }
    return result;
  }

  @override
  Gorder_aggregate_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_aggregate_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'count':
          result.count.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gorder_aggregate_bool_exp_count))!
              as Gorder_aggregate_bool_exp_count);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_aggregate_bool_exp_countSerializer
    implements StructuredSerializer<Gorder_aggregate_bool_exp_count> {
  @override
  final Iterable<Type> types = const [
    Gorder_aggregate_bool_exp_count,
    _$Gorder_aggregate_bool_exp_count
  ];
  @override
  final String wireName = 'Gorder_aggregate_bool_exp_count';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_aggregate_bool_exp_count object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GInt_comparison_exp)),
    ];
    Object? value;
    value = object.arguments;
    if (value != null) {
      result
        ..add('arguments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gorder_select_column)])));
    }
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_bool_exp)));
    }
    return result;
  }

  @override
  Gorder_aggregate_bool_exp_count deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_aggregate_bool_exp_countBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gorder_select_column)]))!
              as BuiltList<Object?>);
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_bool_exp))!
              as Gorder_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_aggregate_order_bySerializer
    implements StructuredSerializer<Gorder_aggregate_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_aggregate_order_by,
    _$Gorder_aggregate_order_by
  ];
  @override
  final String wireName = 'Gorder_aggregate_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_aggregate_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.avg;
    if (value != null) {
      result
        ..add('avg')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_avg_order_by)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.max;
    if (value != null) {
      result
        ..add('max')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_max_order_by)));
    }
    value = object.min;
    if (value != null) {
      result
        ..add('min')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_min_order_by)));
    }
    value = object.stddev;
    if (value != null) {
      result
        ..add('stddev')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_stddev_order_by)));
    }
    value = object.stddev_pop;
    if (value != null) {
      result
        ..add('stddev_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_stddev_pop_order_by)));
    }
    value = object.stddev_samp;
    if (value != null) {
      result
        ..add('stddev_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_stddev_samp_order_by)));
    }
    value = object.sum;
    if (value != null) {
      result
        ..add('sum')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_sum_order_by)));
    }
    value = object.var_pop;
    if (value != null) {
      result
        ..add('var_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_var_pop_order_by)));
    }
    value = object.var_samp;
    if (value != null) {
      result
        ..add('var_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_var_samp_order_by)));
    }
    value = object.variance;
    if (value != null) {
      result
        ..add('variance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_variance_order_by)));
    }
    return result;
  }

  @override
  Gorder_aggregate_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_aggregate_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'avg':
          result.avg.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_avg_order_by))!
              as Gorder_avg_order_by);
          break;
        case 'count':
          result.count = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'max':
          result.max.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_max_order_by))!
              as Gorder_max_order_by);
          break;
        case 'min':
          result.min.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_min_order_by))!
              as Gorder_min_order_by);
          break;
        case 'stddev':
          result.stddev.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_stddev_order_by))!
              as Gorder_stddev_order_by);
          break;
        case 'stddev_pop':
          result.stddev_pop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_stddev_pop_order_by))!
              as Gorder_stddev_pop_order_by);
          break;
        case 'stddev_samp':
          result.stddev_samp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_stddev_samp_order_by))!
              as Gorder_stddev_samp_order_by);
          break;
        case 'sum':
          result.sum.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_sum_order_by))!
              as Gorder_sum_order_by);
          break;
        case 'var_pop':
          result.var_pop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_var_pop_order_by))!
              as Gorder_var_pop_order_by);
          break;
        case 'var_samp':
          result.var_samp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_var_samp_order_by))!
              as Gorder_var_samp_order_by);
          break;
        case 'variance':
          result.variance.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_variance_order_by))!
              as Gorder_variance_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_arr_rel_insert_inputSerializer
    implements StructuredSerializer<Gorder_arr_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gorder_arr_rel_insert_input,
    _$Gorder_arr_rel_insert_input
  ];
  @override
  final String wireName = 'Gorder_arr_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_arr_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gorder_insert_input)])),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_on_conflict)));
    }
    return result;
  }

  @override
  Gorder_arr_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_arr_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gorder_insert_input)]))!
              as BuiltList<Object?>);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_on_conflict))!
              as Gorder_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_avg_order_bySerializer
    implements StructuredSerializer<Gorder_avg_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_avg_order_by,
    _$Gorder_avg_order_by
  ];
  @override
  final String wireName = 'Gorder_avg_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_avg_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_avg_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_avg_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_bool_expSerializer
    implements StructuredSerializer<Gorder_bool_exp> {
  @override
  final Iterable<Type> types = const [Gorder_bool_exp, _$Gorder_bool_exp];
  @override
  final String wireName = 'Gorder_bool_exp';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gorder_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gorder_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gorder_bool_exp)])));
    }
    value = object.customer;
    if (value != null) {
      result
        ..add('customer')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_bool_exp)));
    }
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GString_comparison_exp)));
    }
    return result;
  }

  @override
  Gorder_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gorder_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_bool_exp))!
              as Gorder_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gorder_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case 'customer':
          result.customer.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_bool_exp))!
              as Gcustomer_bool_exp);
          break;
        case 'customer_id':
          result.customer_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'discount_price':
          result.discount_price.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'order_date':
          result.order_date.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'product':
          result.product.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'purchase_price':
          result.purchase_price.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
        case 'transaction_id':
          result.transaction_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GString_comparison_exp))!
              as GString_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_inc_inputSerializer
    implements StructuredSerializer<Gorder_inc_input> {
  @override
  final Iterable<Type> types = const [Gorder_inc_input, _$Gorder_inc_input];
  @override
  final String wireName = 'Gorder_inc_input';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gorder_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gorder_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_insert_inputSerializer
    implements StructuredSerializer<Gorder_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gorder_insert_input,
    _$Gorder_insert_input
  ];
  @override
  final String wireName = 'Gorder_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer;
    if (value != null) {
      result
        ..add('customer')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_obj_rel_insert_input)));
    }
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gorder_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer':
          result.customer.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcustomer_obj_rel_insert_input))!
              as Gcustomer_obj_rel_insert_input);
          break;
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'discount_price':
          result.discount_price = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'order_date':
          result.order_date = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'product':
          result.product = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'purchase_price':
          result.purchase_price = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'transaction_id':
          result.transaction_id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_max_order_bySerializer
    implements StructuredSerializer<Gorder_max_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_max_order_by,
    _$Gorder_max_order_by
  ];
  @override
  final String wireName = 'Gorder_max_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_max_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_max_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_max_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'discount_price':
          result.discount_price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'order_date':
          result.order_date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'product':
          result.product = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'purchase_price':
          result.purchase_price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'transaction_id':
          result.transaction_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_min_order_bySerializer
    implements StructuredSerializer<Gorder_min_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_min_order_by,
    _$Gorder_min_order_by
  ];
  @override
  final String wireName = 'Gorder_min_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_min_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_min_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_min_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'discount_price':
          result.discount_price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'order_date':
          result.order_date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'product':
          result.product = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'purchase_price':
          result.purchase_price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'transaction_id':
          result.transaction_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_on_conflictSerializer
    implements StructuredSerializer<Gorder_on_conflict> {
  @override
  final Iterable<Type> types = const [Gorder_on_conflict, _$Gorder_on_conflict];
  @override
  final String wireName = 'Gorder_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gorder_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gorder_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_bool_exp)));
    }
    return result;
  }

  @override
  Gorder_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_constraint))!
              as Gorder_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gorder_update_column)]))!
              as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_bool_exp))!
              as Gorder_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_order_bySerializer
    implements StructuredSerializer<Gorder_order_by> {
  @override
  final Iterable<Type> types = const [Gorder_order_by, _$Gorder_order_by];
  @override
  final String wireName = 'Gorder_order_by';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gorder_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer;
    if (value != null) {
      result
        ..add('customer')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcustomer_order_by)));
    }
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer':
          result.customer.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcustomer_order_by))!
              as Gcustomer_order_by);
          break;
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'discount_price':
          result.discount_price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'order_date':
          result.order_date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'product':
          result.product = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'purchase_price':
          result.purchase_price = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'transaction_id':
          result.transaction_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_pk_columns_inputSerializer
    implements StructuredSerializer<Gorder_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gorder_pk_columns_input,
    _$Gorder_pk_columns_input
  ];
  @override
  final String wireName = 'Gorder_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gorder_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_set_inputSerializer
    implements StructuredSerializer<Gorder_set_input> {
  @override
  final Iterable<Type> types = const [Gorder_set_input, _$Gorder_set_input];
  @override
  final String wireName = 'Gorder_set_input';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gorder_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gorder_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'discount_price':
          result.discount_price = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'order_date':
          result.order_date = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'product':
          result.product = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'purchase_price':
          result.purchase_price = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'transaction_id':
          result.transaction_id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_stddev_order_bySerializer
    implements StructuredSerializer<Gorder_stddev_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_stddev_order_by,
    _$Gorder_stddev_order_by
  ];
  @override
  final String wireName = 'Gorder_stddev_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_stddev_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_stddev_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_stddev_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_stddev_pop_order_bySerializer
    implements StructuredSerializer<Gorder_stddev_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_stddev_pop_order_by,
    _$Gorder_stddev_pop_order_by
  ];
  @override
  final String wireName = 'Gorder_stddev_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_stddev_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_stddev_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_stddev_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_stddev_samp_order_bySerializer
    implements StructuredSerializer<Gorder_stddev_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_stddev_samp_order_by,
    _$Gorder_stddev_samp_order_by
  ];
  @override
  final String wireName = 'Gorder_stddev_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_stddev_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_stddev_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_stddev_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_stream_cursor_inputSerializer
    implements StructuredSerializer<Gorder_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gorder_stream_cursor_input,
    _$Gorder_stream_cursor_input
  ];
  @override
  final String wireName = 'Gorder_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(Gorder_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gorder_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gorder_stream_cursor_value_input))!
              as Gorder_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gorder_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gorder_stream_cursor_value_input,
    _$Gorder_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gorder_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.discount_price;
    if (value != null) {
      result
        ..add('discount_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.order_date;
    if (value != null) {
      result
        ..add('order_date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.product;
    if (value != null) {
      result
        ..add('product')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.purchase_price;
    if (value != null) {
      result
        ..add('purchase_price')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.transaction_id;
    if (value != null) {
      result
        ..add('transaction_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  Gorder_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'discount_price':
          result.discount_price = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'order_date':
          result.order_date = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'product':
          result.product = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'purchase_price':
          result.purchase_price = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
        case 'transaction_id':
          result.transaction_id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_sum_order_bySerializer
    implements StructuredSerializer<Gorder_sum_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_sum_order_by,
    _$Gorder_sum_order_by
  ];
  @override
  final String wireName = 'Gorder_sum_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_sum_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_sum_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_sum_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_updatesSerializer
    implements StructuredSerializer<Gorder_updates> {
  @override
  final Iterable<Type> types = const [Gorder_updates, _$Gorder_updates];
  @override
  final String wireName = 'Gorder_updates';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gorder_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gorder_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_set_input)));
    }
    return result;
  }

  @override
  Gorder_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_inc_input))!
              as Gorder_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_set_input))!
              as Gorder_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gorder_bool_exp))!
              as Gorder_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_var_pop_order_bySerializer
    implements StructuredSerializer<Gorder_var_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_var_pop_order_by,
    _$Gorder_var_pop_order_by
  ];
  @override
  final String wireName = 'Gorder_var_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_var_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_var_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_var_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_var_samp_order_bySerializer
    implements StructuredSerializer<Gorder_var_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_var_samp_order_by,
    _$Gorder_var_samp_order_by
  ];
  @override
  final String wireName = 'Gorder_var_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_var_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_var_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_var_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gorder_variance_order_bySerializer
    implements StructuredSerializer<Gorder_variance_order_by> {
  @override
  final Iterable<Type> types = const [
    Gorder_variance_order_by,
    _$Gorder_variance_order_by
  ];
  @override
  final String wireName = 'Gorder_variance_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gorder_variance_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.customer_id;
    if (value != null) {
      result
        ..add('customer_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gorder_variance_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gorder_variance_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'customer_id':
          result.customer_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_aggregate_bool_expSerializer
    implements StructuredSerializer<Gpayments_aggregate_bool_exp> {
  @override
  final Iterable<Type> types = const [
    Gpayments_aggregate_bool_exp,
    _$Gpayments_aggregate_bool_exp
  ];
  @override
  final String wireName = 'Gpayments_aggregate_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_aggregate_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_aggregate_bool_exp_count)));
    }
    return result;
  }

  @override
  Gpayments_aggregate_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_aggregate_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'count':
          result.count.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_aggregate_bool_exp_count))!
              as Gpayments_aggregate_bool_exp_count);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_aggregate_bool_exp_countSerializer
    implements StructuredSerializer<Gpayments_aggregate_bool_exp_count> {
  @override
  final Iterable<Type> types = const [
    Gpayments_aggregate_bool_exp_count,
    _$Gpayments_aggregate_bool_exp_count
  ];
  @override
  final String wireName = 'Gpayments_aggregate_bool_exp_count';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_aggregate_bool_exp_count object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'predicate',
      serializers.serialize(object.predicate,
          specifiedType: const FullType(GInt_comparison_exp)),
    ];
    Object? value;
    value = object.arguments;
    if (value != null) {
      result
        ..add('arguments')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gpayments_select_column)])));
    }
    value = object.distinct;
    if (value != null) {
      result
        ..add('distinct')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.filter;
    if (value != null) {
      result
        ..add('filter')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    return result;
  }

  @override
  Gpayments_aggregate_bool_exp_count deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_aggregate_bool_exp_countBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'arguments':
          result.arguments.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gpayments_select_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'distinct':
          result.distinct = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case 'filter':
          result.filter.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
        case 'predicate':
          result.predicate.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_aggregate_order_bySerializer
    implements StructuredSerializer<Gpayments_aggregate_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_aggregate_order_by,
    _$Gpayments_aggregate_order_by
  ];
  @override
  final String wireName = 'Gpayments_aggregate_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_aggregate_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.avg;
    if (value != null) {
      result
        ..add('avg')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_avg_order_by)));
    }
    value = object.count;
    if (value != null) {
      result
        ..add('count')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.max;
    if (value != null) {
      result
        ..add('max')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_max_order_by)));
    }
    value = object.min;
    if (value != null) {
      result
        ..add('min')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_min_order_by)));
    }
    value = object.stddev;
    if (value != null) {
      result
        ..add('stddev')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_stddev_order_by)));
    }
    value = object.stddev_pop;
    if (value != null) {
      result
        ..add('stddev_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_stddev_pop_order_by)));
    }
    value = object.stddev_samp;
    if (value != null) {
      result
        ..add('stddev_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_stddev_samp_order_by)));
    }
    value = object.sum;
    if (value != null) {
      result
        ..add('sum')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_sum_order_by)));
    }
    value = object.var_pop;
    if (value != null) {
      result
        ..add('var_pop')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_var_pop_order_by)));
    }
    value = object.var_samp;
    if (value != null) {
      result
        ..add('var_samp')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_var_samp_order_by)));
    }
    value = object.variance;
    if (value != null) {
      result
        ..add('variance')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_variance_order_by)));
    }
    return result;
  }

  @override
  Gpayments_aggregate_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_aggregate_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'avg':
          result.avg.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_avg_order_by))!
              as Gpayments_avg_order_by);
          break;
        case 'count':
          result.count = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'max':
          result.max.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_max_order_by))!
              as Gpayments_max_order_by);
          break;
        case 'min':
          result.min.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_min_order_by))!
              as Gpayments_min_order_by);
          break;
        case 'stddev':
          result.stddev.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_stddev_order_by))!
              as Gpayments_stddev_order_by);
          break;
        case 'stddev_pop':
          result.stddev_pop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_stddev_pop_order_by))!
              as Gpayments_stddev_pop_order_by);
          break;
        case 'stddev_samp':
          result.stddev_samp.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_stddev_samp_order_by))!
              as Gpayments_stddev_samp_order_by);
          break;
        case 'sum':
          result.sum.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_sum_order_by))!
              as Gpayments_sum_order_by);
          break;
        case 'var_pop':
          result.var_pop.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_var_pop_order_by))!
              as Gpayments_var_pop_order_by);
          break;
        case 'var_samp':
          result.var_samp.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_var_samp_order_by))!
              as Gpayments_var_samp_order_by);
          break;
        case 'variance':
          result.variance.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_variance_order_by))!
              as Gpayments_variance_order_by);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_arr_rel_insert_inputSerializer
    implements StructuredSerializer<Gpayments_arr_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_arr_rel_insert_input,
    _$Gpayments_arr_rel_insert_input
  ];
  @override
  final String wireName = 'Gpayments_arr_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_arr_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gpayments_insert_input)])),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_on_conflict)));
    }
    return result;
  }

  @override
  Gpayments_arr_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_arr_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gpayments_insert_input)
              ]))! as BuiltList<Object?>);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_on_conflict))!
              as Gpayments_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_avg_order_bySerializer
    implements StructuredSerializer<Gpayments_avg_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_avg_order_by,
    _$Gpayments_avg_order_by
  ];
  @override
  final String wireName = 'Gpayments_avg_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_avg_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_avg_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_avg_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_bool_expSerializer
    implements StructuredSerializer<Gpayments_bool_exp> {
  @override
  final Iterable<Type> types = const [Gpayments_bool_exp, _$Gpayments_bool_exp];
  @override
  final String wireName = 'Gpayments_bool_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_bool_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_and;
    if (value != null) {
      result
        ..add('_and')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gpayments_bool_exp)])));
    }
    value = object.G_not;
    if (value != null) {
      result
        ..add('_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    value = object.G_or;
    if (value != null) {
      result
        ..add('_or')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gpayments_bool_exp)])));
    }
    value = object.cable_customers_table;
    if (value != null) {
      result
        ..add('cable_customers_table')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_bool_exp)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_bool_exp)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.collector;
    if (value != null) {
      result
        ..add('collector')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_bool_exp)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz_comparison_exp)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.notifications;
    if (value != null) {
      result
        ..add('notifications')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_bool_exp)));
    }
    value = object.notifications_aggregate;
    if (value != null) {
      result
        ..add('notifications_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_aggregate_bool_exp)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gdate_comparison_exp)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInt_comparison_exp)));
    }
    return result;
  }

  @override
  Gpayments_bool_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_bool_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_and':
          result.G_and.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gpayments_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case '_not':
          result.G_not.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
        case '_or':
          result.G_or.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gpayments_bool_exp)]))!
              as BuiltList<Object?>);
          break;
        case 'cable_customers_table':
          result.cable_customers_table.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_bool_exp))!
              as Gcable_customers_table_bool_exp);
          break;
        case 'cable_id':
          result.cable_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_bool_exp))!
              as Gcable_opr_bool_exp);
          break;
        case 'collected_by':
          result.collected_by.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'collector':
          result.collector.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_bool_exp))!
              as Gcollectors_bool_exp);
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gtimestamptz_comparison_exp))!
              as Gtimestamptz_comparison_exp);
          break;
        case 'id':
          result.id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'notifications':
          result.notifications.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gnotifications_bool_exp))!
              as Gnotifications_bool_exp);
          break;
        case 'notifications_aggregate':
          result.notifications_aggregate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_aggregate_bool_exp))!
              as Gnotifications_aggregate_bool_exp);
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gdate_comparison_exp))!
              as Gdate_comparison_exp);
          break;
        case 'trans_id':
          result.trans_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
        case 'user_id':
          result.user_id.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInt_comparison_exp))!
              as GInt_comparison_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_inc_inputSerializer
    implements StructuredSerializer<Gpayments_inc_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_inc_input,
    _$Gpayments_inc_input
  ];
  @override
  final String wireName = 'Gpayments_inc_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_inc_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gpayments_inc_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_inc_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_insert_inputSerializer
    implements StructuredSerializer<Gpayments_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_insert_input,
    _$Gpayments_insert_input
  ];
  @override
  final String wireName = 'Gpayments_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_customers_table;
    if (value != null) {
      result
        ..add('cable_customers_table')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gcable_customers_table_obj_rel_insert_input)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_obj_rel_insert_input)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collector;
    if (value != null) {
      result
        ..add('collector')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_obj_rel_insert_input)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.notifications;
    if (value != null) {
      result
        ..add('notifications')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(Gnotifications_arr_rel_insert_input)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gpayments_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_customers_table':
          result.cable_customers_table.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      Gcable_customers_table_obj_rel_insert_input))!
              as Gcable_customers_table_obj_rel_insert_input);
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_opr_obj_rel_insert_input))!
              as Gcable_opr_obj_rel_insert_input);
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collector':
          result.collector.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcollectors_obj_rel_insert_input))!
              as Gcollectors_obj_rel_insert_input);
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'notifications':
          result.notifications.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_arr_rel_insert_input))!
              as Gnotifications_arr_rel_insert_input);
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_max_order_bySerializer
    implements StructuredSerializer<Gpayments_max_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_max_order_by,
    _$Gpayments_max_order_by
  ];
  @override
  final String wireName = 'Gpayments_max_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_max_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_max_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_max_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_on':
          result.paid_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_min_order_bySerializer
    implements StructuredSerializer<Gpayments_min_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_min_order_by,
    _$Gpayments_min_order_by
  ];
  @override
  final String wireName = 'Gpayments_min_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_min_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_min_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_min_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'paid_on':
          result.paid_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_obj_rel_insert_inputSerializer
    implements StructuredSerializer<Gpayments_obj_rel_insert_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_obj_rel_insert_input,
    _$Gpayments_obj_rel_insert_input
  ];
  @override
  final String wireName = 'Gpayments_obj_rel_insert_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_obj_rel_insert_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(Gpayments_insert_input)),
    ];
    Object? value;
    value = object.on_conflict;
    if (value != null) {
      result
        ..add('on_conflict')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_on_conflict)));
    }
    return result;
  }

  @override
  Gpayments_obj_rel_insert_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_obj_rel_insert_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_insert_input))!
              as Gpayments_insert_input);
          break;
        case 'on_conflict':
          result.on_conflict.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_on_conflict))!
              as Gpayments_on_conflict);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_on_conflictSerializer
    implements StructuredSerializer<Gpayments_on_conflict> {
  @override
  final Iterable<Type> types = const [
    Gpayments_on_conflict,
    _$Gpayments_on_conflict
  ];
  @override
  final String wireName = 'Gpayments_on_conflict';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_on_conflict object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'constraint',
      serializers.serialize(object.constraint,
          specifiedType: const FullType(Gpayments_constraint)),
      'update_columns',
      serializers.serialize(object.update_columns,
          specifiedType: const FullType(
              BuiltList, const [const FullType(Gpayments_update_column)])),
    ];
    Object? value;
    value = object.where;
    if (value != null) {
      result
        ..add('where')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_bool_exp)));
    }
    return result;
  }

  @override
  Gpayments_on_conflict deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_on_conflictBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'constraint':
          result.constraint = serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_constraint))!
              as Gpayments_constraint;
          break;
        case 'update_columns':
          result.update_columns.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(Gpayments_update_column)
              ]))! as BuiltList<Object?>);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_order_bySerializer
    implements StructuredSerializer<Gpayments_order_by> {
  @override
  final Iterable<Type> types = const [Gpayments_order_by, _$Gpayments_order_by];
  @override
  final String wireName = 'Gpayments_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_customers_table;
    if (value != null) {
      result
        ..add('cable_customers_table')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_customers_table_order_by)));
    }
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.cable_opr;
    if (value != null) {
      result
        ..add('cable_opr')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcable_opr_order_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collector;
    if (value != null) {
      result
        ..add('collector')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcollectors_order_by)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.notifications_aggregate;
    if (value != null) {
      result
        ..add('notifications_aggregate')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gnotifications_aggregate_order_by)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_customers_table':
          result.cable_customers_table.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gcable_customers_table_order_by))!
              as Gcable_customers_table_order_by);
          break;
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'cable_opr':
          result.cable_opr.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcable_opr_order_by))!
              as Gcable_opr_order_by);
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collector':
          result.collector.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gcollectors_order_by))!
              as Gcollectors_order_by);
          break;
        case 'date':
          result.date = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'notifications_aggregate':
          result.notifications_aggregate.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gnotifications_aggregate_order_by))!
              as Gnotifications_aggregate_order_by);
          break;
        case 'paid_on':
          result.paid_on = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_pk_columns_inputSerializer
    implements StructuredSerializer<Gpayments_pk_columns_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_pk_columns_input,
    _$Gpayments_pk_columns_input
  ];
  @override
  final String wireName = 'Gpayments_pk_columns_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_pk_columns_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  Gpayments_pk_columns_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_pk_columns_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int))! as int;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_set_inputSerializer
    implements StructuredSerializer<Gpayments_set_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_set_input,
    _$Gpayments_set_input
  ];
  @override
  final String wireName = 'Gpayments_set_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_set_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gpayments_set_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_set_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_stddev_order_bySerializer
    implements StructuredSerializer<Gpayments_stddev_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_stddev_order_by,
    _$Gpayments_stddev_order_by
  ];
  @override
  final String wireName = 'Gpayments_stddev_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_stddev_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_stddev_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_stddev_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_stddev_pop_order_bySerializer
    implements StructuredSerializer<Gpayments_stddev_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_stddev_pop_order_by,
    _$Gpayments_stddev_pop_order_by
  ];
  @override
  final String wireName = 'Gpayments_stddev_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_stddev_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_stddev_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_stddev_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_stddev_samp_order_bySerializer
    implements StructuredSerializer<Gpayments_stddev_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_stddev_samp_order_by,
    _$Gpayments_stddev_samp_order_by
  ];
  @override
  final String wireName = 'Gpayments_stddev_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_stddev_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_stddev_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_stddev_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_stream_cursor_inputSerializer
    implements StructuredSerializer<Gpayments_stream_cursor_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_stream_cursor_input,
    _$Gpayments_stream_cursor_input
  ];
  @override
  final String wireName = 'Gpayments_stream_cursor_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_stream_cursor_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'initial_value',
      serializers.serialize(object.initial_value,
          specifiedType: const FullType(Gpayments_stream_cursor_value_input)),
    ];
    Object? value;
    value = object.ordering;
    if (value != null) {
      result
        ..add('ordering')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gcursor_ordering)));
    }
    return result;
  }

  @override
  Gpayments_stream_cursor_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_stream_cursor_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'initial_value':
          result.initial_value.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(Gpayments_stream_cursor_value_input))!
              as Gpayments_stream_cursor_value_input);
          break;
        case 'ordering':
          result.ordering = serializers.deserialize(value,
                  specifiedType: const FullType(Gcursor_ordering))
              as Gcursor_ordering?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_stream_cursor_value_inputSerializer
    implements StructuredSerializer<Gpayments_stream_cursor_value_input> {
  @override
  final Iterable<Type> types = const [
    Gpayments_stream_cursor_value_input,
    _$Gpayments_stream_cursor_value_input
  ];
  @override
  final String wireName = 'Gpayments_stream_cursor_value_input';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_stream_cursor_value_input object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.date;
    if (value != null) {
      result
        ..add('date')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.paid_on;
    if (value != null) {
      result
        ..add('paid_on')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(Gdate)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    return result;
  }

  @override
  Gpayments_stream_cursor_value_input deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_stream_cursor_value_inputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'date':
          result.date.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'paid_on':
          result.paid_on.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gdate))! as Gdate);
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_sum_order_bySerializer
    implements StructuredSerializer<Gpayments_sum_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_sum_order_by,
    _$Gpayments_sum_order_by
  ];
  @override
  final String wireName = 'Gpayments_sum_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_sum_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_sum_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_sum_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_updatesSerializer
    implements StructuredSerializer<Gpayments_updates> {
  @override
  final Iterable<Type> types = const [Gpayments_updates, _$Gpayments_updates];
  @override
  final String wireName = 'Gpayments_updates';

  @override
  Iterable<Object?> serialize(Serializers serializers, Gpayments_updates object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(Gpayments_bool_exp)),
    ];
    Object? value;
    value = object.G_inc;
    if (value != null) {
      result
        ..add('_inc')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_inc_input)));
    }
    value = object.G_set;
    if (value != null) {
      result
        ..add('_set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gpayments_set_input)));
    }
    return result;
  }

  @override
  Gpayments_updates deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_updatesBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_inc':
          result.G_inc.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_inc_input))!
              as Gpayments_inc_input);
          break;
        case '_set':
          result.G_set.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_set_input))!
              as Gpayments_set_input);
          break;
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(Gpayments_bool_exp))!
              as Gpayments_bool_exp);
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_var_pop_order_bySerializer
    implements StructuredSerializer<Gpayments_var_pop_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_var_pop_order_by,
    _$Gpayments_var_pop_order_by
  ];
  @override
  final String wireName = 'Gpayments_var_pop_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_var_pop_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_var_pop_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_var_pop_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_var_samp_order_bySerializer
    implements StructuredSerializer<Gpayments_var_samp_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_var_samp_order_by,
    _$Gpayments_var_samp_order_by
  ];
  @override
  final String wireName = 'Gpayments_var_samp_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_var_samp_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_var_samp_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_var_samp_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gpayments_variance_order_bySerializer
    implements StructuredSerializer<Gpayments_variance_order_by> {
  @override
  final Iterable<Type> types = const [
    Gpayments_variance_order_by,
    _$Gpayments_variance_order_by
  ];
  @override
  final String wireName = 'Gpayments_variance_order_by';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gpayments_variance_order_by object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.cable_id;
    if (value != null) {
      result
        ..add('cable_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.collected_by;
    if (value != null) {
      result
        ..add('collected_by')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.trans_id;
    if (value != null) {
      result
        ..add('trans_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    value = object.user_id;
    if (value != null) {
      result
        ..add('user_id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gorder_by)));
    }
    return result;
  }

  @override
  Gpayments_variance_order_by deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gpayments_variance_order_byBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'cable_id':
          result.cable_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'collected_by':
          result.collected_by = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'trans_id':
          result.trans_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
        case 'user_id':
          result.user_id = serializers.deserialize(value,
              specifiedType: const FullType(Gorder_by)) as Gorder_by?;
          break;
      }
    }

    return result.build();
  }
}

class _$Gtimestamptz_comparison_expSerializer
    implements StructuredSerializer<Gtimestamptz_comparison_exp> {
  @override
  final Iterable<Type> types = const [
    Gtimestamptz_comparison_exp,
    _$Gtimestamptz_comparison_exp
  ];
  @override
  final String wireName = 'Gtimestamptz_comparison_exp';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, Gtimestamptz_comparison_exp object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_eq;
    if (value != null) {
      result
        ..add('_eq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.G_gt;
    if (value != null) {
      result
        ..add('_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.G_gte;
    if (value != null) {
      result
        ..add('_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.G_in;
    if (value != null) {
      result
        ..add('_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gtimestamptz)])));
    }
    value = object.G_is_null;
    if (value != null) {
      result
        ..add('_is_null')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.G_lt;
    if (value != null) {
      result
        ..add('_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.G_lte;
    if (value != null) {
      result
        ..add('_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.G_neq;
    if (value != null) {
      result
        ..add('_neq')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(Gtimestamptz)));
    }
    value = object.G_nin;
    if (value != null) {
      result
        ..add('_nin')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(Gtimestamptz)])));
    }
    return result;
  }

  @override
  Gtimestamptz_comparison_exp deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new Gtimestamptz_comparison_expBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current! as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_eq':
          result.G_eq.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case '_gt':
          result.G_gt.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case '_gte':
          result.G_gte.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case '_in':
          result.G_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gtimestamptz)]))!
              as BuiltList<Object?>);
          break;
        case '_is_null':
          result.G_is_null = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool?;
          break;
        case '_lt':
          result.G_lt.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case '_lte':
          result.G_lte.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case '_neq':
          result.G_neq.replace(serializers.deserialize(value,
              specifiedType: const FullType(Gtimestamptz))! as Gtimestamptz);
          break;
        case '_nin':
          result.G_nin.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(Gtimestamptz)]))!
              as BuiltList<Object?>);
          break;
      }
    }

    return result.build();
  }
}

class _$Gdate extends Gdate {
  @override
  final String value;

  factory _$Gdate([void Function(GdateBuilder)? updates]) =>
      (new GdateBuilder()..update(updates))._build();

  _$Gdate._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'Gdate', 'value');
  }

  @override
  Gdate rebuild(void Function(GdateBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GdateBuilder toBuilder() => new GdateBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gdate && value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(0, value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gdate')..add('value', value))
        .toString();
  }
}

class GdateBuilder implements Builder<Gdate, GdateBuilder> {
  _$Gdate? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GdateBuilder();

  GdateBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gdate other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gdate;
  }

  @override
  void update(void Function(GdateBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gdate build() => _build();

  _$Gdate _build() {
    final _$result = _$v ??
        new _$Gdate._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'Gdate', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$Gtimestamptz extends Gtimestamptz {
  @override
  final String value;

  factory _$Gtimestamptz([void Function(GtimestamptzBuilder)? updates]) =>
      (new GtimestamptzBuilder()..update(updates))._build();

  _$Gtimestamptz._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, r'Gtimestamptz', 'value');
  }

  @override
  Gtimestamptz rebuild(void Function(GtimestamptzBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GtimestamptzBuilder toBuilder() => new GtimestamptzBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gtimestamptz && value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(0, value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gtimestamptz')..add('value', value))
        .toString();
  }
}

class GtimestamptzBuilder
    implements Builder<Gtimestamptz, GtimestamptzBuilder> {
  _$Gtimestamptz? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GtimestamptzBuilder();

  GtimestamptzBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gtimestamptz other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gtimestamptz;
  }

  @override
  void update(void Function(GtimestamptzBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gtimestamptz build() => _build();

  _$Gtimestamptz _build() {
    final _$result = _$v ??
        new _$Gtimestamptz._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, r'Gtimestamptz', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GBoolean_comparison_exp extends GBoolean_comparison_exp {
  @override
  final bool? G_eq;
  @override
  final bool? G_gt;
  @override
  final bool? G_gte;
  @override
  final BuiltList<bool>? G_in;
  @override
  final bool? G_is_null;
  @override
  final bool? G_lt;
  @override
  final bool? G_lte;
  @override
  final bool? G_neq;
  @override
  final BuiltList<bool>? G_nin;

  factory _$GBoolean_comparison_exp(
          [void Function(GBoolean_comparison_expBuilder)? updates]) =>
      (new GBoolean_comparison_expBuilder()..update(updates))._build();

  _$GBoolean_comparison_exp._(
      {this.G_eq,
      this.G_gt,
      this.G_gte,
      this.G_in,
      this.G_is_null,
      this.G_lt,
      this.G_lte,
      this.G_neq,
      this.G_nin})
      : super._();

  @override
  GBoolean_comparison_exp rebuild(
          void Function(GBoolean_comparison_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GBoolean_comparison_expBuilder toBuilder() =>
      new GBoolean_comparison_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GBoolean_comparison_exp &&
        G_eq == other.G_eq &&
        G_gt == other.G_gt &&
        G_gte == other.G_gte &&
        G_in == other.G_in &&
        G_is_null == other.G_is_null &&
        G_lt == other.G_lt &&
        G_lte == other.G_lte &&
        G_neq == other.G_neq &&
        G_nin == other.G_nin;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc($jc(0, G_eq.hashCode), G_gt.hashCode),
                                G_gte.hashCode),
                            G_in.hashCode),
                        G_is_null.hashCode),
                    G_lt.hashCode),
                G_lte.hashCode),
            G_neq.hashCode),
        G_nin.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GBoolean_comparison_exp')
          ..add('G_eq', G_eq)
          ..add('G_gt', G_gt)
          ..add('G_gte', G_gte)
          ..add('G_in', G_in)
          ..add('G_is_null', G_is_null)
          ..add('G_lt', G_lt)
          ..add('G_lte', G_lte)
          ..add('G_neq', G_neq)
          ..add('G_nin', G_nin))
        .toString();
  }
}

class GBoolean_comparison_expBuilder
    implements
        Builder<GBoolean_comparison_exp, GBoolean_comparison_expBuilder> {
  _$GBoolean_comparison_exp? _$v;

  bool? _G_eq;
  bool? get G_eq => _$this._G_eq;
  set G_eq(bool? G_eq) => _$this._G_eq = G_eq;

  bool? _G_gt;
  bool? get G_gt => _$this._G_gt;
  set G_gt(bool? G_gt) => _$this._G_gt = G_gt;

  bool? _G_gte;
  bool? get G_gte => _$this._G_gte;
  set G_gte(bool? G_gte) => _$this._G_gte = G_gte;

  ListBuilder<bool>? _G_in;
  ListBuilder<bool> get G_in => _$this._G_in ??= new ListBuilder<bool>();
  set G_in(ListBuilder<bool>? G_in) => _$this._G_in = G_in;

  bool? _G_is_null;
  bool? get G_is_null => _$this._G_is_null;
  set G_is_null(bool? G_is_null) => _$this._G_is_null = G_is_null;

  bool? _G_lt;
  bool? get G_lt => _$this._G_lt;
  set G_lt(bool? G_lt) => _$this._G_lt = G_lt;

  bool? _G_lte;
  bool? get G_lte => _$this._G_lte;
  set G_lte(bool? G_lte) => _$this._G_lte = G_lte;

  bool? _G_neq;
  bool? get G_neq => _$this._G_neq;
  set G_neq(bool? G_neq) => _$this._G_neq = G_neq;

  ListBuilder<bool>? _G_nin;
  ListBuilder<bool> get G_nin => _$this._G_nin ??= new ListBuilder<bool>();
  set G_nin(ListBuilder<bool>? G_nin) => _$this._G_nin = G_nin;

  GBoolean_comparison_expBuilder();

  GBoolean_comparison_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_eq = $v.G_eq;
      _G_gt = $v.G_gt;
      _G_gte = $v.G_gte;
      _G_in = $v.G_in?.toBuilder();
      _G_is_null = $v.G_is_null;
      _G_lt = $v.G_lt;
      _G_lte = $v.G_lte;
      _G_neq = $v.G_neq;
      _G_nin = $v.G_nin?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GBoolean_comparison_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GBoolean_comparison_exp;
  }

  @override
  void update(void Function(GBoolean_comparison_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GBoolean_comparison_exp build() => _build();

  _$GBoolean_comparison_exp _build() {
    _$GBoolean_comparison_exp _$result;
    try {
      _$result = _$v ??
          new _$GBoolean_comparison_exp._(
              G_eq: G_eq,
              G_gt: G_gt,
              G_gte: G_gte,
              G_in: _G_in?.build(),
              G_is_null: G_is_null,
              G_lt: G_lt,
              G_lte: G_lte,
              G_neq: G_neq,
              G_nin: _G_nin?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_in';
        _G_in?.build();

        _$failedField = 'G_nin';
        _G_nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GBoolean_comparison_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInt_comparison_exp extends GInt_comparison_exp {
  @override
  final int? G_eq;
  @override
  final int? G_gt;
  @override
  final int? G_gte;
  @override
  final BuiltList<int>? G_in;
  @override
  final bool? G_is_null;
  @override
  final int? G_lt;
  @override
  final int? G_lte;
  @override
  final int? G_neq;
  @override
  final BuiltList<int>? G_nin;

  factory _$GInt_comparison_exp(
          [void Function(GInt_comparison_expBuilder)? updates]) =>
      (new GInt_comparison_expBuilder()..update(updates))._build();

  _$GInt_comparison_exp._(
      {this.G_eq,
      this.G_gt,
      this.G_gte,
      this.G_in,
      this.G_is_null,
      this.G_lt,
      this.G_lte,
      this.G_neq,
      this.G_nin})
      : super._();

  @override
  GInt_comparison_exp rebuild(
          void Function(GInt_comparison_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInt_comparison_expBuilder toBuilder() =>
      new GInt_comparison_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInt_comparison_exp &&
        G_eq == other.G_eq &&
        G_gt == other.G_gt &&
        G_gte == other.G_gte &&
        G_in == other.G_in &&
        G_is_null == other.G_is_null &&
        G_lt == other.G_lt &&
        G_lte == other.G_lte &&
        G_neq == other.G_neq &&
        G_nin == other.G_nin;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc($jc(0, G_eq.hashCode), G_gt.hashCode),
                                G_gte.hashCode),
                            G_in.hashCode),
                        G_is_null.hashCode),
                    G_lt.hashCode),
                G_lte.hashCode),
            G_neq.hashCode),
        G_nin.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GInt_comparison_exp')
          ..add('G_eq', G_eq)
          ..add('G_gt', G_gt)
          ..add('G_gte', G_gte)
          ..add('G_in', G_in)
          ..add('G_is_null', G_is_null)
          ..add('G_lt', G_lt)
          ..add('G_lte', G_lte)
          ..add('G_neq', G_neq)
          ..add('G_nin', G_nin))
        .toString();
  }
}

class GInt_comparison_expBuilder
    implements Builder<GInt_comparison_exp, GInt_comparison_expBuilder> {
  _$GInt_comparison_exp? _$v;

  int? _G_eq;
  int? get G_eq => _$this._G_eq;
  set G_eq(int? G_eq) => _$this._G_eq = G_eq;

  int? _G_gt;
  int? get G_gt => _$this._G_gt;
  set G_gt(int? G_gt) => _$this._G_gt = G_gt;

  int? _G_gte;
  int? get G_gte => _$this._G_gte;
  set G_gte(int? G_gte) => _$this._G_gte = G_gte;

  ListBuilder<int>? _G_in;
  ListBuilder<int> get G_in => _$this._G_in ??= new ListBuilder<int>();
  set G_in(ListBuilder<int>? G_in) => _$this._G_in = G_in;

  bool? _G_is_null;
  bool? get G_is_null => _$this._G_is_null;
  set G_is_null(bool? G_is_null) => _$this._G_is_null = G_is_null;

  int? _G_lt;
  int? get G_lt => _$this._G_lt;
  set G_lt(int? G_lt) => _$this._G_lt = G_lt;

  int? _G_lte;
  int? get G_lte => _$this._G_lte;
  set G_lte(int? G_lte) => _$this._G_lte = G_lte;

  int? _G_neq;
  int? get G_neq => _$this._G_neq;
  set G_neq(int? G_neq) => _$this._G_neq = G_neq;

  ListBuilder<int>? _G_nin;
  ListBuilder<int> get G_nin => _$this._G_nin ??= new ListBuilder<int>();
  set G_nin(ListBuilder<int>? G_nin) => _$this._G_nin = G_nin;

  GInt_comparison_expBuilder();

  GInt_comparison_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_eq = $v.G_eq;
      _G_gt = $v.G_gt;
      _G_gte = $v.G_gte;
      _G_in = $v.G_in?.toBuilder();
      _G_is_null = $v.G_is_null;
      _G_lt = $v.G_lt;
      _G_lte = $v.G_lte;
      _G_neq = $v.G_neq;
      _G_nin = $v.G_nin?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInt_comparison_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInt_comparison_exp;
  }

  @override
  void update(void Function(GInt_comparison_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GInt_comparison_exp build() => _build();

  _$GInt_comparison_exp _build() {
    _$GInt_comparison_exp _$result;
    try {
      _$result = _$v ??
          new _$GInt_comparison_exp._(
              G_eq: G_eq,
              G_gt: G_gt,
              G_gte: G_gte,
              G_in: _G_in?.build(),
              G_is_null: G_is_null,
              G_lt: G_lt,
              G_lte: G_lte,
              G_neq: G_neq,
              G_nin: _G_nin?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_in';
        _G_in?.build();

        _$failedField = 'G_nin';
        _G_nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GInt_comparison_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GSampleInput extends GSampleInput {
  @override
  final String email;
  @override
  final String password;

  factory _$GSampleInput([void Function(GSampleInputBuilder)? updates]) =>
      (new GSampleInputBuilder()..update(updates))._build();

  _$GSampleInput._({required this.email, required this.password}) : super._() {
    BuiltValueNullFieldError.checkNotNull(email, r'GSampleInput', 'email');
    BuiltValueNullFieldError.checkNotNull(
        password, r'GSampleInput', 'password');
  }

  @override
  GSampleInput rebuild(void Function(GSampleInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GSampleInputBuilder toBuilder() => new GSampleInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GSampleInput &&
        email == other.email &&
        password == other.password;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, email.hashCode), password.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GSampleInput')
          ..add('email', email)
          ..add('password', password))
        .toString();
  }
}

class GSampleInputBuilder
    implements Builder<GSampleInput, GSampleInputBuilder> {
  _$GSampleInput? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  GSampleInputBuilder();

  GSampleInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _password = $v.password;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GSampleInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GSampleInput;
  }

  @override
  void update(void Function(GSampleInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GSampleInput build() => _build();

  _$GSampleInput _build() {
    final _$result = _$v ??
        new _$GSampleInput._(
            email: BuiltValueNullFieldError.checkNotNull(
                email, r'GSampleInput', 'email'),
            password: BuiltValueNullFieldError.checkNotNull(
                password, r'GSampleInput', 'password'));
    replace(_$result);
    return _$result;
  }
}

class _$GString_comparison_exp extends GString_comparison_exp {
  @override
  final String? G_eq;
  @override
  final String? G_gt;
  @override
  final String? G_gte;
  @override
  final String? G_ilike;
  @override
  final BuiltList<String>? G_in;
  @override
  final String? G_iregex;
  @override
  final bool? G_is_null;
  @override
  final String? G_like;
  @override
  final String? G_lt;
  @override
  final String? G_lte;
  @override
  final String? G_neq;
  @override
  final String? G_nilike;
  @override
  final BuiltList<String>? G_nin;
  @override
  final String? G_niregex;
  @override
  final String? G_nlike;
  @override
  final String? G_nregex;
  @override
  final String? G_nsimilar;
  @override
  final String? G_regex;
  @override
  final String? G_similar;

  factory _$GString_comparison_exp(
          [void Function(GString_comparison_expBuilder)? updates]) =>
      (new GString_comparison_expBuilder()..update(updates))._build();

  _$GString_comparison_exp._(
      {this.G_eq,
      this.G_gt,
      this.G_gte,
      this.G_ilike,
      this.G_in,
      this.G_iregex,
      this.G_is_null,
      this.G_like,
      this.G_lt,
      this.G_lte,
      this.G_neq,
      this.G_nilike,
      this.G_nin,
      this.G_niregex,
      this.G_nlike,
      this.G_nregex,
      this.G_nsimilar,
      this.G_regex,
      this.G_similar})
      : super._();

  @override
  GString_comparison_exp rebuild(
          void Function(GString_comparison_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GString_comparison_expBuilder toBuilder() =>
      new GString_comparison_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GString_comparison_exp &&
        G_eq == other.G_eq &&
        G_gt == other.G_gt &&
        G_gte == other.G_gte &&
        G_ilike == other.G_ilike &&
        G_in == other.G_in &&
        G_iregex == other.G_iregex &&
        G_is_null == other.G_is_null &&
        G_like == other.G_like &&
        G_lt == other.G_lt &&
        G_lte == other.G_lte &&
        G_neq == other.G_neq &&
        G_nilike == other.G_nilike &&
        G_nin == other.G_nin &&
        G_niregex == other.G_niregex &&
        G_nlike == other.G_nlike &&
        G_nregex == other.G_nregex &&
        G_nsimilar == other.G_nsimilar &&
        G_regex == other.G_regex &&
        G_similar == other.G_similar;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc(0,
                                                                                G_eq.hashCode),
                                                                            G_gt.hashCode),
                                                                        G_gte.hashCode),
                                                                    G_ilike.hashCode),
                                                                G_in.hashCode),
                                                            G_iregex.hashCode),
                                                        G_is_null.hashCode),
                                                    G_like.hashCode),
                                                G_lt.hashCode),
                                            G_lte.hashCode),
                                        G_neq.hashCode),
                                    G_nilike.hashCode),
                                G_nin.hashCode),
                            G_niregex.hashCode),
                        G_nlike.hashCode),
                    G_nregex.hashCode),
                G_nsimilar.hashCode),
            G_regex.hashCode),
        G_similar.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'GString_comparison_exp')
          ..add('G_eq', G_eq)
          ..add('G_gt', G_gt)
          ..add('G_gte', G_gte)
          ..add('G_ilike', G_ilike)
          ..add('G_in', G_in)
          ..add('G_iregex', G_iregex)
          ..add('G_is_null', G_is_null)
          ..add('G_like', G_like)
          ..add('G_lt', G_lt)
          ..add('G_lte', G_lte)
          ..add('G_neq', G_neq)
          ..add('G_nilike', G_nilike)
          ..add('G_nin', G_nin)
          ..add('G_niregex', G_niregex)
          ..add('G_nlike', G_nlike)
          ..add('G_nregex', G_nregex)
          ..add('G_nsimilar', G_nsimilar)
          ..add('G_regex', G_regex)
          ..add('G_similar', G_similar))
        .toString();
  }
}

class GString_comparison_expBuilder
    implements Builder<GString_comparison_exp, GString_comparison_expBuilder> {
  _$GString_comparison_exp? _$v;

  String? _G_eq;
  String? get G_eq => _$this._G_eq;
  set G_eq(String? G_eq) => _$this._G_eq = G_eq;

  String? _G_gt;
  String? get G_gt => _$this._G_gt;
  set G_gt(String? G_gt) => _$this._G_gt = G_gt;

  String? _G_gte;
  String? get G_gte => _$this._G_gte;
  set G_gte(String? G_gte) => _$this._G_gte = G_gte;

  String? _G_ilike;
  String? get G_ilike => _$this._G_ilike;
  set G_ilike(String? G_ilike) => _$this._G_ilike = G_ilike;

  ListBuilder<String>? _G_in;
  ListBuilder<String> get G_in => _$this._G_in ??= new ListBuilder<String>();
  set G_in(ListBuilder<String>? G_in) => _$this._G_in = G_in;

  String? _G_iregex;
  String? get G_iregex => _$this._G_iregex;
  set G_iregex(String? G_iregex) => _$this._G_iregex = G_iregex;

  bool? _G_is_null;
  bool? get G_is_null => _$this._G_is_null;
  set G_is_null(bool? G_is_null) => _$this._G_is_null = G_is_null;

  String? _G_like;
  String? get G_like => _$this._G_like;
  set G_like(String? G_like) => _$this._G_like = G_like;

  String? _G_lt;
  String? get G_lt => _$this._G_lt;
  set G_lt(String? G_lt) => _$this._G_lt = G_lt;

  String? _G_lte;
  String? get G_lte => _$this._G_lte;
  set G_lte(String? G_lte) => _$this._G_lte = G_lte;

  String? _G_neq;
  String? get G_neq => _$this._G_neq;
  set G_neq(String? G_neq) => _$this._G_neq = G_neq;

  String? _G_nilike;
  String? get G_nilike => _$this._G_nilike;
  set G_nilike(String? G_nilike) => _$this._G_nilike = G_nilike;

  ListBuilder<String>? _G_nin;
  ListBuilder<String> get G_nin => _$this._G_nin ??= new ListBuilder<String>();
  set G_nin(ListBuilder<String>? G_nin) => _$this._G_nin = G_nin;

  String? _G_niregex;
  String? get G_niregex => _$this._G_niregex;
  set G_niregex(String? G_niregex) => _$this._G_niregex = G_niregex;

  String? _G_nlike;
  String? get G_nlike => _$this._G_nlike;
  set G_nlike(String? G_nlike) => _$this._G_nlike = G_nlike;

  String? _G_nregex;
  String? get G_nregex => _$this._G_nregex;
  set G_nregex(String? G_nregex) => _$this._G_nregex = G_nregex;

  String? _G_nsimilar;
  String? get G_nsimilar => _$this._G_nsimilar;
  set G_nsimilar(String? G_nsimilar) => _$this._G_nsimilar = G_nsimilar;

  String? _G_regex;
  String? get G_regex => _$this._G_regex;
  set G_regex(String? G_regex) => _$this._G_regex = G_regex;

  String? _G_similar;
  String? get G_similar => _$this._G_similar;
  set G_similar(String? G_similar) => _$this._G_similar = G_similar;

  GString_comparison_expBuilder();

  GString_comparison_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_eq = $v.G_eq;
      _G_gt = $v.G_gt;
      _G_gte = $v.G_gte;
      _G_ilike = $v.G_ilike;
      _G_in = $v.G_in?.toBuilder();
      _G_iregex = $v.G_iregex;
      _G_is_null = $v.G_is_null;
      _G_like = $v.G_like;
      _G_lt = $v.G_lt;
      _G_lte = $v.G_lte;
      _G_neq = $v.G_neq;
      _G_nilike = $v.G_nilike;
      _G_nin = $v.G_nin?.toBuilder();
      _G_niregex = $v.G_niregex;
      _G_nlike = $v.G_nlike;
      _G_nregex = $v.G_nregex;
      _G_nsimilar = $v.G_nsimilar;
      _G_regex = $v.G_regex;
      _G_similar = $v.G_similar;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GString_comparison_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GString_comparison_exp;
  }

  @override
  void update(void Function(GString_comparison_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  GString_comparison_exp build() => _build();

  _$GString_comparison_exp _build() {
    _$GString_comparison_exp _$result;
    try {
      _$result = _$v ??
          new _$GString_comparison_exp._(
              G_eq: G_eq,
              G_gt: G_gt,
              G_gte: G_gte,
              G_ilike: G_ilike,
              G_in: _G_in?.build(),
              G_iregex: G_iregex,
              G_is_null: G_is_null,
              G_like: G_like,
              G_lt: G_lt,
              G_lte: G_lte,
              G_neq: G_neq,
              G_nilike: G_nilike,
              G_nin: _G_nin?.build(),
              G_niregex: G_niregex,
              G_nlike: G_nlike,
              G_nregex: G_nregex,
              G_nsimilar: G_nsimilar,
              G_regex: G_regex,
              G_similar: G_similar);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_in';
        _G_in?.build();

        _$failedField = 'G_nin';
        _G_nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'GString_comparison_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_bool_exp extends Gadmin_panel_user_bool_exp {
  @override
  final BuiltList<Gadmin_panel_user_bool_exp>? G_and;
  @override
  final Gadmin_panel_user_bool_exp? G_not;
  @override
  final BuiltList<Gadmin_panel_user_bool_exp>? G_or;
  @override
  final GString_comparison_exp? email;
  @override
  final GInt_comparison_exp? id;
  @override
  final GString_comparison_exp? pass;
  @override
  final GString_comparison_exp? ph_no;
  @override
  final GInt_comparison_exp? type;

  factory _$Gadmin_panel_user_bool_exp(
          [void Function(Gadmin_panel_user_bool_expBuilder)? updates]) =>
      (new Gadmin_panel_user_bool_expBuilder()..update(updates))._build();

  _$Gadmin_panel_user_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.email,
      this.id,
      this.pass,
      this.ph_no,
      this.type})
      : super._();

  @override
  Gadmin_panel_user_bool_exp rebuild(
          void Function(Gadmin_panel_user_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_bool_expBuilder toBuilder() =>
      new Gadmin_panel_user_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        email == other.email &&
        id == other.id &&
        pass == other.pass &&
        ph_no == other.ph_no &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, G_and.hashCode), G_not.hashCode),
                            G_or.hashCode),
                        email.hashCode),
                    id.hashCode),
                pass.hashCode),
            ph_no.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('email', email)
          ..add('id', id)
          ..add('pass', pass)
          ..add('ph_no', ph_no)
          ..add('type', type))
        .toString();
  }
}

class Gadmin_panel_user_bool_expBuilder
    implements
        Builder<Gadmin_panel_user_bool_exp, Gadmin_panel_user_bool_expBuilder> {
  _$Gadmin_panel_user_bool_exp? _$v;

  ListBuilder<Gadmin_panel_user_bool_exp>? _G_and;
  ListBuilder<Gadmin_panel_user_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gadmin_panel_user_bool_exp>();
  set G_and(ListBuilder<Gadmin_panel_user_bool_exp>? G_and) =>
      _$this._G_and = G_and;

  Gadmin_panel_user_bool_expBuilder? _G_not;
  Gadmin_panel_user_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gadmin_panel_user_bool_expBuilder();
  set G_not(Gadmin_panel_user_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gadmin_panel_user_bool_exp>? _G_or;
  ListBuilder<Gadmin_panel_user_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gadmin_panel_user_bool_exp>();
  set G_or(ListBuilder<Gadmin_panel_user_bool_exp>? G_or) =>
      _$this._G_or = G_or;

  GString_comparison_expBuilder? _email;
  GString_comparison_expBuilder get email =>
      _$this._email ??= new GString_comparison_expBuilder();
  set email(GString_comparison_expBuilder? email) => _$this._email = email;

  GInt_comparison_expBuilder? _id;
  GInt_comparison_expBuilder get id =>
      _$this._id ??= new GInt_comparison_expBuilder();
  set id(GInt_comparison_expBuilder? id) => _$this._id = id;

  GString_comparison_expBuilder? _pass;
  GString_comparison_expBuilder get pass =>
      _$this._pass ??= new GString_comparison_expBuilder();
  set pass(GString_comparison_expBuilder? pass) => _$this._pass = pass;

  GString_comparison_expBuilder? _ph_no;
  GString_comparison_expBuilder get ph_no =>
      _$this._ph_no ??= new GString_comparison_expBuilder();
  set ph_no(GString_comparison_expBuilder? ph_no) => _$this._ph_no = ph_no;

  GInt_comparison_expBuilder? _type;
  GInt_comparison_expBuilder get type =>
      _$this._type ??= new GInt_comparison_expBuilder();
  set type(GInt_comparison_expBuilder? type) => _$this._type = type;

  Gadmin_panel_user_bool_expBuilder();

  Gadmin_panel_user_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _email = $v.email?.toBuilder();
      _id = $v.id?.toBuilder();
      _pass = $v.pass?.toBuilder();
      _ph_no = $v.ph_no?.toBuilder();
      _type = $v.type?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_bool_exp;
  }

  @override
  void update(void Function(Gadmin_panel_user_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_bool_exp build() => _build();

  _$Gadmin_panel_user_bool_exp _build() {
    _$Gadmin_panel_user_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gadmin_panel_user_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              email: _email?.build(),
              id: _id?.build(),
              pass: _pass?.build(),
              ph_no: _ph_no?.build(),
              type: _type?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'email';
        _email?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'pass';
        _pass?.build();
        _$failedField = 'ph_no';
        _ph_no?.build();
        _$failedField = 'type';
        _type?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gadmin_panel_user_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_inc_input extends Gadmin_panel_user_inc_input {
  @override
  final int? id;
  @override
  final int? type;

  factory _$Gadmin_panel_user_inc_input(
          [void Function(Gadmin_panel_user_inc_inputBuilder)? updates]) =>
      (new Gadmin_panel_user_inc_inputBuilder()..update(updates))._build();

  _$Gadmin_panel_user_inc_input._({this.id, this.type}) : super._();

  @override
  Gadmin_panel_user_inc_input rebuild(
          void Function(Gadmin_panel_user_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_inc_inputBuilder toBuilder() =>
      new Gadmin_panel_user_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_inc_input &&
        id == other.id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, id.hashCode), type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_inc_input')
          ..add('id', id)
          ..add('type', type))
        .toString();
  }
}

class Gadmin_panel_user_inc_inputBuilder
    implements
        Builder<Gadmin_panel_user_inc_input,
            Gadmin_panel_user_inc_inputBuilder> {
  _$Gadmin_panel_user_inc_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  int? _type;
  int? get type => _$this._type;
  set type(int? type) => _$this._type = type;

  Gadmin_panel_user_inc_inputBuilder();

  Gadmin_panel_user_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_inc_input;
  }

  @override
  void update(void Function(Gadmin_panel_user_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_inc_input build() => _build();

  _$Gadmin_panel_user_inc_input _build() {
    final _$result =
        _$v ?? new _$Gadmin_panel_user_inc_input._(id: id, type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_insert_input extends Gadmin_panel_user_insert_input {
  @override
  final String? email;
  @override
  final int? id;
  @override
  final String? pass;
  @override
  final String? ph_no;
  @override
  final int? type;

  factory _$Gadmin_panel_user_insert_input(
          [void Function(Gadmin_panel_user_insert_inputBuilder)? updates]) =>
      (new Gadmin_panel_user_insert_inputBuilder()..update(updates))._build();

  _$Gadmin_panel_user_insert_input._(
      {this.email, this.id, this.pass, this.ph_no, this.type})
      : super._();

  @override
  Gadmin_panel_user_insert_input rebuild(
          void Function(Gadmin_panel_user_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_insert_inputBuilder toBuilder() =>
      new Gadmin_panel_user_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_insert_input &&
        email == other.email &&
        id == other.id &&
        pass == other.pass &&
        ph_no == other.ph_no &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, email.hashCode), id.hashCode), pass.hashCode),
            ph_no.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_insert_input')
          ..add('email', email)
          ..add('id', id)
          ..add('pass', pass)
          ..add('ph_no', ph_no)
          ..add('type', type))
        .toString();
  }
}

class Gadmin_panel_user_insert_inputBuilder
    implements
        Builder<Gadmin_panel_user_insert_input,
            Gadmin_panel_user_insert_inputBuilder> {
  _$Gadmin_panel_user_insert_input? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _pass;
  String? get pass => _$this._pass;
  set pass(String? pass) => _$this._pass = pass;

  String? _ph_no;
  String? get ph_no => _$this._ph_no;
  set ph_no(String? ph_no) => _$this._ph_no = ph_no;

  int? _type;
  int? get type => _$this._type;
  set type(int? type) => _$this._type = type;

  Gadmin_panel_user_insert_inputBuilder();

  Gadmin_panel_user_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _id = $v.id;
      _pass = $v.pass;
      _ph_no = $v.ph_no;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_insert_input;
  }

  @override
  void update(void Function(Gadmin_panel_user_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_insert_input build() => _build();

  _$Gadmin_panel_user_insert_input _build() {
    final _$result = _$v ??
        new _$Gadmin_panel_user_insert_input._(
            email: email, id: id, pass: pass, ph_no: ph_no, type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_on_conflict extends Gadmin_panel_user_on_conflict {
  @override
  final Gadmin_panel_user_constraint constraint;
  @override
  final BuiltList<Gadmin_panel_user_update_column> update_columns;
  @override
  final Gadmin_panel_user_bool_exp? where;

  factory _$Gadmin_panel_user_on_conflict(
          [void Function(Gadmin_panel_user_on_conflictBuilder)? updates]) =>
      (new Gadmin_panel_user_on_conflictBuilder()..update(updates))._build();

  _$Gadmin_panel_user_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gadmin_panel_user_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gadmin_panel_user_on_conflict', 'update_columns');
  }

  @override
  Gadmin_panel_user_on_conflict rebuild(
          void Function(Gadmin_panel_user_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_on_conflictBuilder toBuilder() =>
      new Gadmin_panel_user_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gadmin_panel_user_on_conflictBuilder
    implements
        Builder<Gadmin_panel_user_on_conflict,
            Gadmin_panel_user_on_conflictBuilder> {
  _$Gadmin_panel_user_on_conflict? _$v;

  Gadmin_panel_user_constraint? _constraint;
  Gadmin_panel_user_constraint? get constraint => _$this._constraint;
  set constraint(Gadmin_panel_user_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gadmin_panel_user_update_column>? _update_columns;
  ListBuilder<Gadmin_panel_user_update_column> get update_columns =>
      _$this._update_columns ??=
          new ListBuilder<Gadmin_panel_user_update_column>();
  set update_columns(
          ListBuilder<Gadmin_panel_user_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gadmin_panel_user_bool_expBuilder? _where;
  Gadmin_panel_user_bool_expBuilder get where =>
      _$this._where ??= new Gadmin_panel_user_bool_expBuilder();
  set where(Gadmin_panel_user_bool_expBuilder? where) => _$this._where = where;

  Gadmin_panel_user_on_conflictBuilder();

  Gadmin_panel_user_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_on_conflict;
  }

  @override
  void update(void Function(Gadmin_panel_user_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_on_conflict build() => _build();

  _$Gadmin_panel_user_on_conflict _build() {
    _$Gadmin_panel_user_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gadmin_panel_user_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gadmin_panel_user_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gadmin_panel_user_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_order_by extends Gadmin_panel_user_order_by {
  @override
  final Gorder_by? email;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? pass;
  @override
  final Gorder_by? ph_no;
  @override
  final Gorder_by? type;

  factory _$Gadmin_panel_user_order_by(
          [void Function(Gadmin_panel_user_order_byBuilder)? updates]) =>
      (new Gadmin_panel_user_order_byBuilder()..update(updates))._build();

  _$Gadmin_panel_user_order_by._(
      {this.email, this.id, this.pass, this.ph_no, this.type})
      : super._();

  @override
  Gadmin_panel_user_order_by rebuild(
          void Function(Gadmin_panel_user_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_order_byBuilder toBuilder() =>
      new Gadmin_panel_user_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_order_by &&
        email == other.email &&
        id == other.id &&
        pass == other.pass &&
        ph_no == other.ph_no &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, email.hashCode), id.hashCode), pass.hashCode),
            ph_no.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_order_by')
          ..add('email', email)
          ..add('id', id)
          ..add('pass', pass)
          ..add('ph_no', ph_no)
          ..add('type', type))
        .toString();
  }
}

class Gadmin_panel_user_order_byBuilder
    implements
        Builder<Gadmin_panel_user_order_by, Gadmin_panel_user_order_byBuilder> {
  _$Gadmin_panel_user_order_by? _$v;

  Gorder_by? _email;
  Gorder_by? get email => _$this._email;
  set email(Gorder_by? email) => _$this._email = email;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _pass;
  Gorder_by? get pass => _$this._pass;
  set pass(Gorder_by? pass) => _$this._pass = pass;

  Gorder_by? _ph_no;
  Gorder_by? get ph_no => _$this._ph_no;
  set ph_no(Gorder_by? ph_no) => _$this._ph_no = ph_no;

  Gorder_by? _type;
  Gorder_by? get type => _$this._type;
  set type(Gorder_by? type) => _$this._type = type;

  Gadmin_panel_user_order_byBuilder();

  Gadmin_panel_user_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _id = $v.id;
      _pass = $v.pass;
      _ph_no = $v.ph_no;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_order_by;
  }

  @override
  void update(void Function(Gadmin_panel_user_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_order_by build() => _build();

  _$Gadmin_panel_user_order_by _build() {
    final _$result = _$v ??
        new _$Gadmin_panel_user_order_by._(
            email: email, id: id, pass: pass, ph_no: ph_no, type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_pk_columns_input
    extends Gadmin_panel_user_pk_columns_input {
  @override
  final int id;

  factory _$Gadmin_panel_user_pk_columns_input(
          [void Function(Gadmin_panel_user_pk_columns_inputBuilder)?
              updates]) =>
      (new Gadmin_panel_user_pk_columns_inputBuilder()..update(updates))
          ._build();

  _$Gadmin_panel_user_pk_columns_input._({required this.id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        id, r'Gadmin_panel_user_pk_columns_input', 'id');
  }

  @override
  Gadmin_panel_user_pk_columns_input rebuild(
          void Function(Gadmin_panel_user_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_pk_columns_inputBuilder toBuilder() =>
      new Gadmin_panel_user_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_pk_columns_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_pk_columns_input')
          ..add('id', id))
        .toString();
  }
}

class Gadmin_panel_user_pk_columns_inputBuilder
    implements
        Builder<Gadmin_panel_user_pk_columns_input,
            Gadmin_panel_user_pk_columns_inputBuilder> {
  _$Gadmin_panel_user_pk_columns_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gadmin_panel_user_pk_columns_inputBuilder();

  Gadmin_panel_user_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_pk_columns_input;
  }

  @override
  void update(
      void Function(Gadmin_panel_user_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_pk_columns_input build() => _build();

  _$Gadmin_panel_user_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gadmin_panel_user_pk_columns_input._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'Gadmin_panel_user_pk_columns_input', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_set_input extends Gadmin_panel_user_set_input {
  @override
  final String? email;
  @override
  final int? id;
  @override
  final String? pass;
  @override
  final String? ph_no;
  @override
  final int? type;

  factory _$Gadmin_panel_user_set_input(
          [void Function(Gadmin_panel_user_set_inputBuilder)? updates]) =>
      (new Gadmin_panel_user_set_inputBuilder()..update(updates))._build();

  _$Gadmin_panel_user_set_input._(
      {this.email, this.id, this.pass, this.ph_no, this.type})
      : super._();

  @override
  Gadmin_panel_user_set_input rebuild(
          void Function(Gadmin_panel_user_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_set_inputBuilder toBuilder() =>
      new Gadmin_panel_user_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_set_input &&
        email == other.email &&
        id == other.id &&
        pass == other.pass &&
        ph_no == other.ph_no &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, email.hashCode), id.hashCode), pass.hashCode),
            ph_no.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_set_input')
          ..add('email', email)
          ..add('id', id)
          ..add('pass', pass)
          ..add('ph_no', ph_no)
          ..add('type', type))
        .toString();
  }
}

class Gadmin_panel_user_set_inputBuilder
    implements
        Builder<Gadmin_panel_user_set_input,
            Gadmin_panel_user_set_inputBuilder> {
  _$Gadmin_panel_user_set_input? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _pass;
  String? get pass => _$this._pass;
  set pass(String? pass) => _$this._pass = pass;

  String? _ph_no;
  String? get ph_no => _$this._ph_no;
  set ph_no(String? ph_no) => _$this._ph_no = ph_no;

  int? _type;
  int? get type => _$this._type;
  set type(int? type) => _$this._type = type;

  Gadmin_panel_user_set_inputBuilder();

  Gadmin_panel_user_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _id = $v.id;
      _pass = $v.pass;
      _ph_no = $v.ph_no;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_set_input;
  }

  @override
  void update(void Function(Gadmin_panel_user_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_set_input build() => _build();

  _$Gadmin_panel_user_set_input _build() {
    final _$result = _$v ??
        new _$Gadmin_panel_user_set_input._(
            email: email, id: id, pass: pass, ph_no: ph_no, type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_stream_cursor_input
    extends Gadmin_panel_user_stream_cursor_input {
  @override
  final Gadmin_panel_user_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gadmin_panel_user_stream_cursor_input(
          [void Function(Gadmin_panel_user_stream_cursor_inputBuilder)?
              updates]) =>
      (new Gadmin_panel_user_stream_cursor_inputBuilder()..update(updates))
          ._build();

  _$Gadmin_panel_user_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(initial_value,
        r'Gadmin_panel_user_stream_cursor_input', 'initial_value');
  }

  @override
  Gadmin_panel_user_stream_cursor_input rebuild(
          void Function(Gadmin_panel_user_stream_cursor_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_stream_cursor_inputBuilder toBuilder() =>
      new Gadmin_panel_user_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gadmin_panel_user_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gadmin_panel_user_stream_cursor_inputBuilder
    implements
        Builder<Gadmin_panel_user_stream_cursor_input,
            Gadmin_panel_user_stream_cursor_inputBuilder> {
  _$Gadmin_panel_user_stream_cursor_input? _$v;

  Gadmin_panel_user_stream_cursor_value_inputBuilder? _initial_value;
  Gadmin_panel_user_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gadmin_panel_user_stream_cursor_value_inputBuilder();
  set initial_value(
          Gadmin_panel_user_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gadmin_panel_user_stream_cursor_inputBuilder();

  Gadmin_panel_user_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_stream_cursor_input;
  }

  @override
  void update(
      void Function(Gadmin_panel_user_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_stream_cursor_input build() => _build();

  _$Gadmin_panel_user_stream_cursor_input _build() {
    _$Gadmin_panel_user_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gadmin_panel_user_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gadmin_panel_user_stream_cursor_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_stream_cursor_value_input
    extends Gadmin_panel_user_stream_cursor_value_input {
  @override
  final String? email;
  @override
  final int? id;
  @override
  final String? pass;
  @override
  final String? ph_no;
  @override
  final int? type;

  factory _$Gadmin_panel_user_stream_cursor_value_input(
          [void Function(Gadmin_panel_user_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gadmin_panel_user_stream_cursor_value_inputBuilder()
            ..update(updates))
          ._build();

  _$Gadmin_panel_user_stream_cursor_value_input._(
      {this.email, this.id, this.pass, this.ph_no, this.type})
      : super._();

  @override
  Gadmin_panel_user_stream_cursor_value_input rebuild(
          void Function(Gadmin_panel_user_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_stream_cursor_value_inputBuilder toBuilder() =>
      new Gadmin_panel_user_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_stream_cursor_value_input &&
        email == other.email &&
        id == other.id &&
        pass == other.pass &&
        ph_no == other.ph_no &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, email.hashCode), id.hashCode), pass.hashCode),
            ph_no.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gadmin_panel_user_stream_cursor_value_input')
          ..add('email', email)
          ..add('id', id)
          ..add('pass', pass)
          ..add('ph_no', ph_no)
          ..add('type', type))
        .toString();
  }
}

class Gadmin_panel_user_stream_cursor_value_inputBuilder
    implements
        Builder<Gadmin_panel_user_stream_cursor_value_input,
            Gadmin_panel_user_stream_cursor_value_inputBuilder> {
  _$Gadmin_panel_user_stream_cursor_value_input? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _pass;
  String? get pass => _$this._pass;
  set pass(String? pass) => _$this._pass = pass;

  String? _ph_no;
  String? get ph_no => _$this._ph_no;
  set ph_no(String? ph_no) => _$this._ph_no = ph_no;

  int? _type;
  int? get type => _$this._type;
  set type(int? type) => _$this._type = type;

  Gadmin_panel_user_stream_cursor_value_inputBuilder();

  Gadmin_panel_user_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _id = $v.id;
      _pass = $v.pass;
      _ph_no = $v.ph_no;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gadmin_panel_user_stream_cursor_value_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_stream_cursor_value_input build() => _build();

  _$Gadmin_panel_user_stream_cursor_value_input _build() {
    final _$result = _$v ??
        new _$Gadmin_panel_user_stream_cursor_value_input._(
            email: email, id: id, pass: pass, ph_no: ph_no, type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gadmin_panel_user_updates extends Gadmin_panel_user_updates {
  @override
  final Gadmin_panel_user_inc_input? G_inc;
  @override
  final Gadmin_panel_user_set_input? G_set;
  @override
  final Gadmin_panel_user_bool_exp where;

  factory _$Gadmin_panel_user_updates(
          [void Function(Gadmin_panel_user_updatesBuilder)? updates]) =>
      (new Gadmin_panel_user_updatesBuilder()..update(updates))._build();

  _$Gadmin_panel_user_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gadmin_panel_user_updates', 'where');
  }

  @override
  Gadmin_panel_user_updates rebuild(
          void Function(Gadmin_panel_user_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gadmin_panel_user_updatesBuilder toBuilder() =>
      new Gadmin_panel_user_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gadmin_panel_user_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gadmin_panel_user_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gadmin_panel_user_updatesBuilder
    implements
        Builder<Gadmin_panel_user_updates, Gadmin_panel_user_updatesBuilder> {
  _$Gadmin_panel_user_updates? _$v;

  Gadmin_panel_user_inc_inputBuilder? _G_inc;
  Gadmin_panel_user_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gadmin_panel_user_inc_inputBuilder();
  set G_inc(Gadmin_panel_user_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gadmin_panel_user_set_inputBuilder? _G_set;
  Gadmin_panel_user_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gadmin_panel_user_set_inputBuilder();
  set G_set(Gadmin_panel_user_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gadmin_panel_user_bool_expBuilder? _where;
  Gadmin_panel_user_bool_expBuilder get where =>
      _$this._where ??= new Gadmin_panel_user_bool_expBuilder();
  set where(Gadmin_panel_user_bool_expBuilder? where) => _$this._where = where;

  Gadmin_panel_user_updatesBuilder();

  Gadmin_panel_user_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gadmin_panel_user_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gadmin_panel_user_updates;
  }

  @override
  void update(void Function(Gadmin_panel_user_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gadmin_panel_user_updates build() => _build();

  _$Gadmin_panel_user_updates _build() {
    _$Gadmin_panel_user_updates _$result;
    try {
      _$result = _$v ??
          new _$Gadmin_panel_user_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gadmin_panel_user_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_aggregate_bool_exp
    extends Gcable_customers_table_aggregate_bool_exp {
  @override
  final Gcable_customers_table_aggregate_bool_exp_count? count;

  factory _$Gcable_customers_table_aggregate_bool_exp(
          [void Function(Gcable_customers_table_aggregate_bool_expBuilder)?
              updates]) =>
      (new Gcable_customers_table_aggregate_bool_expBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_aggregate_bool_exp._({this.count}) : super._();

  @override
  Gcable_customers_table_aggregate_bool_exp rebuild(
          void Function(Gcable_customers_table_aggregate_bool_expBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_aggregate_bool_expBuilder toBuilder() =>
      new Gcable_customers_table_aggregate_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_aggregate_bool_exp &&
        count == other.count;
  }

  @override
  int get hashCode {
    return $jf($jc(0, count.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_aggregate_bool_exp')
          ..add('count', count))
        .toString();
  }
}

class Gcable_customers_table_aggregate_bool_expBuilder
    implements
        Builder<Gcable_customers_table_aggregate_bool_exp,
            Gcable_customers_table_aggregate_bool_expBuilder> {
  _$Gcable_customers_table_aggregate_bool_exp? _$v;

  Gcable_customers_table_aggregate_bool_exp_countBuilder? _count;
  Gcable_customers_table_aggregate_bool_exp_countBuilder get count =>
      _$this._count ??=
          new Gcable_customers_table_aggregate_bool_exp_countBuilder();
  set count(Gcable_customers_table_aggregate_bool_exp_countBuilder? count) =>
      _$this._count = count;

  Gcable_customers_table_aggregate_bool_expBuilder();

  Gcable_customers_table_aggregate_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _count = $v.count?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_aggregate_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_aggregate_bool_exp;
  }

  @override
  void update(
      void Function(Gcable_customers_table_aggregate_bool_expBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_aggregate_bool_exp build() => _build();

  _$Gcable_customers_table_aggregate_bool_exp _build() {
    _$Gcable_customers_table_aggregate_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_aggregate_bool_exp._(
              count: _count?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'count';
        _count?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_aggregate_bool_exp',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_aggregate_bool_exp_count
    extends Gcable_customers_table_aggregate_bool_exp_count {
  @override
  final BuiltList<Gcable_customers_table_select_column>? arguments;
  @override
  final bool? distinct;
  @override
  final Gcable_customers_table_bool_exp? filter;
  @override
  final GInt_comparison_exp predicate;

  factory _$Gcable_customers_table_aggregate_bool_exp_count(
          [void Function(
                  Gcable_customers_table_aggregate_bool_exp_countBuilder)?
              updates]) =>
      (new Gcable_customers_table_aggregate_bool_exp_countBuilder()
            ..update(updates))
          ._build();

  _$Gcable_customers_table_aggregate_bool_exp_count._(
      {this.arguments, this.distinct, this.filter, required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(predicate,
        r'Gcable_customers_table_aggregate_bool_exp_count', 'predicate');
  }

  @override
  Gcable_customers_table_aggregate_bool_exp_count rebuild(
          void Function(Gcable_customers_table_aggregate_bool_exp_countBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_aggregate_bool_exp_countBuilder toBuilder() =>
      new Gcable_customers_table_aggregate_bool_exp_countBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_aggregate_bool_exp_count &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_aggregate_bool_exp_count')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gcable_customers_table_aggregate_bool_exp_countBuilder
    implements
        Builder<Gcable_customers_table_aggregate_bool_exp_count,
            Gcable_customers_table_aggregate_bool_exp_countBuilder> {
  _$Gcable_customers_table_aggregate_bool_exp_count? _$v;

  ListBuilder<Gcable_customers_table_select_column>? _arguments;
  ListBuilder<Gcable_customers_table_select_column> get arguments =>
      _$this._arguments ??=
          new ListBuilder<Gcable_customers_table_select_column>();
  set arguments(ListBuilder<Gcable_customers_table_select_column>? arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gcable_customers_table_bool_expBuilder? _filter;
  Gcable_customers_table_bool_expBuilder get filter =>
      _$this._filter ??= new Gcable_customers_table_bool_expBuilder();
  set filter(Gcable_customers_table_bool_expBuilder? filter) =>
      _$this._filter = filter;

  GInt_comparison_expBuilder? _predicate;
  GInt_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GInt_comparison_expBuilder();
  set predicate(GInt_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gcable_customers_table_aggregate_bool_exp_countBuilder();

  Gcable_customers_table_aggregate_bool_exp_countBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments?.toBuilder();
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_aggregate_bool_exp_count other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_aggregate_bool_exp_count;
  }

  @override
  void update(
      void Function(Gcable_customers_table_aggregate_bool_exp_countBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_aggregate_bool_exp_count build() => _build();

  _$Gcable_customers_table_aggregate_bool_exp_count _build() {
    _$Gcable_customers_table_aggregate_bool_exp_count _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_aggregate_bool_exp_count._(
              arguments: _arguments?.build(),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'arguments';
        _arguments?.build();

        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_aggregate_bool_exp_count',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_aggregate_order_by
    extends Gcable_customers_table_aggregate_order_by {
  @override
  final Gcable_customers_table_avg_order_by? avg;
  @override
  final Gorder_by? count;
  @override
  final Gcable_customers_table_max_order_by? max;
  @override
  final Gcable_customers_table_min_order_by? min;
  @override
  final Gcable_customers_table_stddev_order_by? stddev;
  @override
  final Gcable_customers_table_stddev_pop_order_by? stddev_pop;
  @override
  final Gcable_customers_table_stddev_samp_order_by? stddev_samp;
  @override
  final Gcable_customers_table_sum_order_by? sum;
  @override
  final Gcable_customers_table_var_pop_order_by? var_pop;
  @override
  final Gcable_customers_table_var_samp_order_by? var_samp;
  @override
  final Gcable_customers_table_variance_order_by? variance;

  factory _$Gcable_customers_table_aggregate_order_by(
          [void Function(Gcable_customers_table_aggregate_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_aggregate_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_aggregate_order_by._(
      {this.avg,
      this.count,
      this.max,
      this.min,
      this.stddev,
      this.stddev_pop,
      this.stddev_samp,
      this.sum,
      this.var_pop,
      this.var_samp,
      this.variance})
      : super._();

  @override
  Gcable_customers_table_aggregate_order_by rebuild(
          void Function(Gcable_customers_table_aggregate_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_aggregate_order_byBuilder toBuilder() =>
      new Gcable_customers_table_aggregate_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_aggregate_order_by &&
        avg == other.avg &&
        count == other.count &&
        max == other.max &&
        min == other.min &&
        stddev == other.stddev &&
        stddev_pop == other.stddev_pop &&
        stddev_samp == other.stddev_samp &&
        sum == other.sum &&
        var_pop == other.var_pop &&
        var_samp == other.var_samp &&
        variance == other.variance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, avg.hashCode),
                                            count.hashCode),
                                        max.hashCode),
                                    min.hashCode),
                                stddev.hashCode),
                            stddev_pop.hashCode),
                        stddev_samp.hashCode),
                    sum.hashCode),
                var_pop.hashCode),
            var_samp.hashCode),
        variance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_aggregate_order_by')
          ..add('avg', avg)
          ..add('count', count)
          ..add('max', max)
          ..add('min', min)
          ..add('stddev', stddev)
          ..add('stddev_pop', stddev_pop)
          ..add('stddev_samp', stddev_samp)
          ..add('sum', sum)
          ..add('var_pop', var_pop)
          ..add('var_samp', var_samp)
          ..add('variance', variance))
        .toString();
  }
}

class Gcable_customers_table_aggregate_order_byBuilder
    implements
        Builder<Gcable_customers_table_aggregate_order_by,
            Gcable_customers_table_aggregate_order_byBuilder> {
  _$Gcable_customers_table_aggregate_order_by? _$v;

  Gcable_customers_table_avg_order_byBuilder? _avg;
  Gcable_customers_table_avg_order_byBuilder get avg =>
      _$this._avg ??= new Gcable_customers_table_avg_order_byBuilder();
  set avg(Gcable_customers_table_avg_order_byBuilder? avg) => _$this._avg = avg;

  Gorder_by? _count;
  Gorder_by? get count => _$this._count;
  set count(Gorder_by? count) => _$this._count = count;

  Gcable_customers_table_max_order_byBuilder? _max;
  Gcable_customers_table_max_order_byBuilder get max =>
      _$this._max ??= new Gcable_customers_table_max_order_byBuilder();
  set max(Gcable_customers_table_max_order_byBuilder? max) => _$this._max = max;

  Gcable_customers_table_min_order_byBuilder? _min;
  Gcable_customers_table_min_order_byBuilder get min =>
      _$this._min ??= new Gcable_customers_table_min_order_byBuilder();
  set min(Gcable_customers_table_min_order_byBuilder? min) => _$this._min = min;

  Gcable_customers_table_stddev_order_byBuilder? _stddev;
  Gcable_customers_table_stddev_order_byBuilder get stddev =>
      _$this._stddev ??= new Gcable_customers_table_stddev_order_byBuilder();
  set stddev(Gcable_customers_table_stddev_order_byBuilder? stddev) =>
      _$this._stddev = stddev;

  Gcable_customers_table_stddev_pop_order_byBuilder? _stddev_pop;
  Gcable_customers_table_stddev_pop_order_byBuilder get stddev_pop =>
      _$this._stddev_pop ??=
          new Gcable_customers_table_stddev_pop_order_byBuilder();
  set stddev_pop(
          Gcable_customers_table_stddev_pop_order_byBuilder? stddev_pop) =>
      _$this._stddev_pop = stddev_pop;

  Gcable_customers_table_stddev_samp_order_byBuilder? _stddev_samp;
  Gcable_customers_table_stddev_samp_order_byBuilder get stddev_samp =>
      _$this._stddev_samp ??=
          new Gcable_customers_table_stddev_samp_order_byBuilder();
  set stddev_samp(
          Gcable_customers_table_stddev_samp_order_byBuilder? stddev_samp) =>
      _$this._stddev_samp = stddev_samp;

  Gcable_customers_table_sum_order_byBuilder? _sum;
  Gcable_customers_table_sum_order_byBuilder get sum =>
      _$this._sum ??= new Gcable_customers_table_sum_order_byBuilder();
  set sum(Gcable_customers_table_sum_order_byBuilder? sum) => _$this._sum = sum;

  Gcable_customers_table_var_pop_order_byBuilder? _var_pop;
  Gcable_customers_table_var_pop_order_byBuilder get var_pop =>
      _$this._var_pop ??= new Gcable_customers_table_var_pop_order_byBuilder();
  set var_pop(Gcable_customers_table_var_pop_order_byBuilder? var_pop) =>
      _$this._var_pop = var_pop;

  Gcable_customers_table_var_samp_order_byBuilder? _var_samp;
  Gcable_customers_table_var_samp_order_byBuilder get var_samp =>
      _$this._var_samp ??=
          new Gcable_customers_table_var_samp_order_byBuilder();
  set var_samp(Gcable_customers_table_var_samp_order_byBuilder? var_samp) =>
      _$this._var_samp = var_samp;

  Gcable_customers_table_variance_order_byBuilder? _variance;
  Gcable_customers_table_variance_order_byBuilder get variance =>
      _$this._variance ??=
          new Gcable_customers_table_variance_order_byBuilder();
  set variance(Gcable_customers_table_variance_order_byBuilder? variance) =>
      _$this._variance = variance;

  Gcable_customers_table_aggregate_order_byBuilder();

  Gcable_customers_table_aggregate_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _avg = $v.avg?.toBuilder();
      _count = $v.count;
      _max = $v.max?.toBuilder();
      _min = $v.min?.toBuilder();
      _stddev = $v.stddev?.toBuilder();
      _stddev_pop = $v.stddev_pop?.toBuilder();
      _stddev_samp = $v.stddev_samp?.toBuilder();
      _sum = $v.sum?.toBuilder();
      _var_pop = $v.var_pop?.toBuilder();
      _var_samp = $v.var_samp?.toBuilder();
      _variance = $v.variance?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_aggregate_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_aggregate_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_aggregate_order_byBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_aggregate_order_by build() => _build();

  _$Gcable_customers_table_aggregate_order_by _build() {
    _$Gcable_customers_table_aggregate_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_aggregate_order_by._(
              avg: _avg?.build(),
              count: count,
              max: _max?.build(),
              min: _min?.build(),
              stddev: _stddev?.build(),
              stddev_pop: _stddev_pop?.build(),
              stddev_samp: _stddev_samp?.build(),
              sum: _sum?.build(),
              var_pop: _var_pop?.build(),
              var_samp: _var_samp?.build(),
              variance: _variance?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'avg';
        _avg?.build();

        _$failedField = 'max';
        _max?.build();
        _$failedField = 'min';
        _min?.build();
        _$failedField = 'stddev';
        _stddev?.build();
        _$failedField = 'stddev_pop';
        _stddev_pop?.build();
        _$failedField = 'stddev_samp';
        _stddev_samp?.build();
        _$failedField = 'sum';
        _sum?.build();
        _$failedField = 'var_pop';
        _var_pop?.build();
        _$failedField = 'var_samp';
        _var_samp?.build();
        _$failedField = 'variance';
        _variance?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_aggregate_order_by',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_arr_rel_insert_input
    extends Gcable_customers_table_arr_rel_insert_input {
  @override
  final BuiltList<Gcable_customers_table_insert_input> data;
  @override
  final Gcable_customers_table_on_conflict? on_conflict;

  factory _$Gcable_customers_table_arr_rel_insert_input(
          [void Function(Gcable_customers_table_arr_rel_insert_inputBuilder)?
              updates]) =>
      (new Gcable_customers_table_arr_rel_insert_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_customers_table_arr_rel_insert_input._(
      {required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcable_customers_table_arr_rel_insert_input', 'data');
  }

  @override
  Gcable_customers_table_arr_rel_insert_input rebuild(
          void Function(Gcable_customers_table_arr_rel_insert_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_arr_rel_insert_inputBuilder toBuilder() =>
      new Gcable_customers_table_arr_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_arr_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_arr_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcable_customers_table_arr_rel_insert_inputBuilder
    implements
        Builder<Gcable_customers_table_arr_rel_insert_input,
            Gcable_customers_table_arr_rel_insert_inputBuilder> {
  _$Gcable_customers_table_arr_rel_insert_input? _$v;

  ListBuilder<Gcable_customers_table_insert_input>? _data;
  ListBuilder<Gcable_customers_table_insert_input> get data =>
      _$this._data ??= new ListBuilder<Gcable_customers_table_insert_input>();
  set data(ListBuilder<Gcable_customers_table_insert_input>? data) =>
      _$this._data = data;

  Gcable_customers_table_on_conflictBuilder? _on_conflict;
  Gcable_customers_table_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcable_customers_table_on_conflictBuilder();
  set on_conflict(Gcable_customers_table_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcable_customers_table_arr_rel_insert_inputBuilder();

  Gcable_customers_table_arr_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_arr_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_arr_rel_insert_input;
  }

  @override
  void update(
      void Function(Gcable_customers_table_arr_rel_insert_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_arr_rel_insert_input build() => _build();

  _$Gcable_customers_table_arr_rel_insert_input _build() {
    _$Gcable_customers_table_arr_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_arr_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_arr_rel_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_avg_order_by
    extends Gcable_customers_table_avg_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_avg_order_by(
          [void Function(Gcable_customers_table_avg_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_avg_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_avg_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_avg_order_by rebuild(
          void Function(Gcable_customers_table_avg_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_avg_order_byBuilder toBuilder() =>
      new Gcable_customers_table_avg_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_avg_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_avg_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_avg_order_byBuilder
    implements
        Builder<Gcable_customers_table_avg_order_by,
            Gcable_customers_table_avg_order_byBuilder> {
  _$Gcable_customers_table_avg_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_avg_order_byBuilder();

  Gcable_customers_table_avg_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_avg_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_avg_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_avg_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_avg_order_by build() => _build();

  _$Gcable_customers_table_avg_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_avg_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_bool_exp
    extends Gcable_customers_table_bool_exp {
  @override
  final BuiltList<Gcable_customers_table_bool_exp>? G_and;
  @override
  final Gcable_customers_table_bool_exp? G_not;
  @override
  final BuiltList<Gcable_customers_table_bool_exp>? G_or;
  @override
  final GString_comparison_exp? address;
  @override
  final GInt_comparison_exp? belongs_to;
  @override
  final Gcable_opr_bool_exp? cable_opr;
  @override
  final GString_comparison_exp? desc;
  @override
  final Gtimestamptz_comparison_exp? joined_on;
  @override
  final GString_comparison_exp? name;
  @override
  final Gtimestamptz_comparison_exp? paid_month;
  @override
  final Gpayments_bool_exp? payments;
  @override
  final Gpayments_aggregate_bool_exp? payments_aggregate;
  @override
  final GString_comparison_exp? phone_number;
  @override
  final GInt_comparison_exp? price;
  @override
  final GInt_comparison_exp? user_id;

  factory _$Gcable_customers_table_bool_exp(
          [void Function(Gcable_customers_table_bool_expBuilder)? updates]) =>
      (new Gcable_customers_table_bool_expBuilder()..update(updates))._build();

  _$Gcable_customers_table_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.address,
      this.belongs_to,
      this.cable_opr,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.payments,
      this.payments_aggregate,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_bool_exp rebuild(
          void Function(Gcable_customers_table_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_bool_expBuilder toBuilder() =>
      new Gcable_customers_table_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        cable_opr == other.cable_opr &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        payments == other.payments &&
        payments_aggregate == other.payments_aggregate &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(0,
                                                                G_and.hashCode),
                                                            G_not.hashCode),
                                                        G_or.hashCode),
                                                    address.hashCode),
                                                belongs_to.hashCode),
                                            cable_opr.hashCode),
                                        desc.hashCode),
                                    joined_on.hashCode),
                                name.hashCode),
                            paid_month.hashCode),
                        payments.hashCode),
                    payments_aggregate.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('cable_opr', cable_opr)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('payments', payments)
          ..add('payments_aggregate', payments_aggregate)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_bool_expBuilder
    implements
        Builder<Gcable_customers_table_bool_exp,
            Gcable_customers_table_bool_expBuilder> {
  _$Gcable_customers_table_bool_exp? _$v;

  ListBuilder<Gcable_customers_table_bool_exp>? _G_and;
  ListBuilder<Gcable_customers_table_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcable_customers_table_bool_exp>();
  set G_and(ListBuilder<Gcable_customers_table_bool_exp>? G_and) =>
      _$this._G_and = G_and;

  Gcable_customers_table_bool_expBuilder? _G_not;
  Gcable_customers_table_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcable_customers_table_bool_expBuilder();
  set G_not(Gcable_customers_table_bool_expBuilder? G_not) =>
      _$this._G_not = G_not;

  ListBuilder<Gcable_customers_table_bool_exp>? _G_or;
  ListBuilder<Gcable_customers_table_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcable_customers_table_bool_exp>();
  set G_or(ListBuilder<Gcable_customers_table_bool_exp>? G_or) =>
      _$this._G_or = G_or;

  GString_comparison_expBuilder? _address;
  GString_comparison_expBuilder get address =>
      _$this._address ??= new GString_comparison_expBuilder();
  set address(GString_comparison_expBuilder? address) =>
      _$this._address = address;

  GInt_comparison_expBuilder? _belongs_to;
  GInt_comparison_expBuilder get belongs_to =>
      _$this._belongs_to ??= new GInt_comparison_expBuilder();
  set belongs_to(GInt_comparison_expBuilder? belongs_to) =>
      _$this._belongs_to = belongs_to;

  Gcable_opr_bool_expBuilder? _cable_opr;
  Gcable_opr_bool_expBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_bool_expBuilder();
  set cable_opr(Gcable_opr_bool_expBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  GString_comparison_expBuilder? _desc;
  GString_comparison_expBuilder get desc =>
      _$this._desc ??= new GString_comparison_expBuilder();
  set desc(GString_comparison_expBuilder? desc) => _$this._desc = desc;

  Gtimestamptz_comparison_expBuilder? _joined_on;
  Gtimestamptz_comparison_expBuilder get joined_on =>
      _$this._joined_on ??= new Gtimestamptz_comparison_expBuilder();
  set joined_on(Gtimestamptz_comparison_expBuilder? joined_on) =>
      _$this._joined_on = joined_on;

  GString_comparison_expBuilder? _name;
  GString_comparison_expBuilder get name =>
      _$this._name ??= new GString_comparison_expBuilder();
  set name(GString_comparison_expBuilder? name) => _$this._name = name;

  Gtimestamptz_comparison_expBuilder? _paid_month;
  Gtimestamptz_comparison_expBuilder get paid_month =>
      _$this._paid_month ??= new Gtimestamptz_comparison_expBuilder();
  set paid_month(Gtimestamptz_comparison_expBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  Gpayments_bool_expBuilder? _payments;
  Gpayments_bool_expBuilder get payments =>
      _$this._payments ??= new Gpayments_bool_expBuilder();
  set payments(Gpayments_bool_expBuilder? payments) =>
      _$this._payments = payments;

  Gpayments_aggregate_bool_expBuilder? _payments_aggregate;
  Gpayments_aggregate_bool_expBuilder get payments_aggregate =>
      _$this._payments_aggregate ??= new Gpayments_aggregate_bool_expBuilder();
  set payments_aggregate(
          Gpayments_aggregate_bool_expBuilder? payments_aggregate) =>
      _$this._payments_aggregate = payments_aggregate;

  GString_comparison_expBuilder? _phone_number;
  GString_comparison_expBuilder get phone_number =>
      _$this._phone_number ??= new GString_comparison_expBuilder();
  set phone_number(GString_comparison_expBuilder? phone_number) =>
      _$this._phone_number = phone_number;

  GInt_comparison_expBuilder? _price;
  GInt_comparison_expBuilder get price =>
      _$this._price ??= new GInt_comparison_expBuilder();
  set price(GInt_comparison_expBuilder? price) => _$this._price = price;

  GInt_comparison_expBuilder? _user_id;
  GInt_comparison_expBuilder get user_id =>
      _$this._user_id ??= new GInt_comparison_expBuilder();
  set user_id(GInt_comparison_expBuilder? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_bool_expBuilder();

  Gcable_customers_table_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _address = $v.address?.toBuilder();
      _belongs_to = $v.belongs_to?.toBuilder();
      _cable_opr = $v.cable_opr?.toBuilder();
      _desc = $v.desc?.toBuilder();
      _joined_on = $v.joined_on?.toBuilder();
      _name = $v.name?.toBuilder();
      _paid_month = $v.paid_month?.toBuilder();
      _payments = $v.payments?.toBuilder();
      _payments_aggregate = $v.payments_aggregate?.toBuilder();
      _phone_number = $v.phone_number?.toBuilder();
      _price = $v.price?.toBuilder();
      _user_id = $v.user_id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_bool_exp;
  }

  @override
  void update(void Function(Gcable_customers_table_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_bool_exp build() => _build();

  _$Gcable_customers_table_bool_exp _build() {
    _$Gcable_customers_table_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              address: _address?.build(),
              belongs_to: _belongs_to?.build(),
              cable_opr: _cable_opr?.build(),
              desc: _desc?.build(),
              joined_on: _joined_on?.build(),
              name: _name?.build(),
              paid_month: _paid_month?.build(),
              payments: _payments?.build(),
              payments_aggregate: _payments_aggregate?.build(),
              phone_number: _phone_number?.build(),
              price: _price?.build(),
              user_id: _user_id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'address';
        _address?.build();
        _$failedField = 'belongs_to';
        _belongs_to?.build();
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'desc';
        _desc?.build();
        _$failedField = 'joined_on';
        _joined_on?.build();
        _$failedField = 'name';
        _name?.build();
        _$failedField = 'paid_month';
        _paid_month?.build();
        _$failedField = 'payments';
        _payments?.build();
        _$failedField = 'payments_aggregate';
        _payments_aggregate?.build();
        _$failedField = 'phone_number';
        _phone_number?.build();
        _$failedField = 'price';
        _price?.build();
        _$failedField = 'user_id';
        _user_id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_inc_input
    extends Gcable_customers_table_inc_input {
  @override
  final int? belongs_to;
  @override
  final int? price;
  @override
  final int? user_id;

  factory _$Gcable_customers_table_inc_input(
          [void Function(Gcable_customers_table_inc_inputBuilder)? updates]) =>
      (new Gcable_customers_table_inc_inputBuilder()..update(updates))._build();

  _$Gcable_customers_table_inc_input._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_inc_input rebuild(
          void Function(Gcable_customers_table_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_inc_inputBuilder toBuilder() =>
      new Gcable_customers_table_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_inc_input &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_inc_input')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_inc_inputBuilder
    implements
        Builder<Gcable_customers_table_inc_input,
            Gcable_customers_table_inc_inputBuilder> {
  _$Gcable_customers_table_inc_input? _$v;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  int? _price;
  int? get price => _$this._price;
  set price(int? price) => _$this._price = price;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_inc_inputBuilder();

  Gcable_customers_table_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_inc_input;
  }

  @override
  void update(void Function(Gcable_customers_table_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_inc_input build() => _build();

  _$Gcable_customers_table_inc_input _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_inc_input._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_insert_input
    extends Gcable_customers_table_insert_input {
  @override
  final String? address;
  @override
  final int? belongs_to;
  @override
  final Gcable_opr_obj_rel_insert_input? cable_opr;
  @override
  final String? desc;
  @override
  final Gtimestamptz? joined_on;
  @override
  final String? name;
  @override
  final Gtimestamptz? paid_month;
  @override
  final Gpayments_arr_rel_insert_input? payments;
  @override
  final String? phone_number;
  @override
  final int? price;
  @override
  final int? user_id;

  factory _$Gcable_customers_table_insert_input(
          [void Function(Gcable_customers_table_insert_inputBuilder)?
              updates]) =>
      (new Gcable_customers_table_insert_inputBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_insert_input._(
      {this.address,
      this.belongs_to,
      this.cable_opr,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.payments,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_insert_input rebuild(
          void Function(Gcable_customers_table_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_insert_inputBuilder toBuilder() =>
      new Gcable_customers_table_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_insert_input &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        cable_opr == other.cable_opr &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        payments == other.payments &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, address.hashCode),
                                            belongs_to.hashCode),
                                        cable_opr.hashCode),
                                    desc.hashCode),
                                joined_on.hashCode),
                            name.hashCode),
                        paid_month.hashCode),
                    payments.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_insert_input')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('cable_opr', cable_opr)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('payments', payments)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_insert_inputBuilder
    implements
        Builder<Gcable_customers_table_insert_input,
            Gcable_customers_table_insert_inputBuilder> {
  _$Gcable_customers_table_insert_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  Gcable_opr_obj_rel_insert_inputBuilder? _cable_opr;
  Gcable_opr_obj_rel_insert_inputBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_obj_rel_insert_inputBuilder();
  set cable_opr(Gcable_opr_obj_rel_insert_inputBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  String? _desc;
  String? get desc => _$this._desc;
  set desc(String? desc) => _$this._desc = desc;

  GtimestamptzBuilder? _joined_on;
  GtimestamptzBuilder get joined_on =>
      _$this._joined_on ??= new GtimestamptzBuilder();
  set joined_on(GtimestamptzBuilder? joined_on) =>
      _$this._joined_on = joined_on;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  GtimestamptzBuilder? _paid_month;
  GtimestamptzBuilder get paid_month =>
      _$this._paid_month ??= new GtimestamptzBuilder();
  set paid_month(GtimestamptzBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  Gpayments_arr_rel_insert_inputBuilder? _payments;
  Gpayments_arr_rel_insert_inputBuilder get payments =>
      _$this._payments ??= new Gpayments_arr_rel_insert_inputBuilder();
  set payments(Gpayments_arr_rel_insert_inputBuilder? payments) =>
      _$this._payments = payments;

  String? _phone_number;
  String? get phone_number => _$this._phone_number;
  set phone_number(String? phone_number) => _$this._phone_number = phone_number;

  int? _price;
  int? get price => _$this._price;
  set price(int? price) => _$this._price = price;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_insert_inputBuilder();

  Gcable_customers_table_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _cable_opr = $v.cable_opr?.toBuilder();
      _desc = $v.desc;
      _joined_on = $v.joined_on?.toBuilder();
      _name = $v.name;
      _paid_month = $v.paid_month?.toBuilder();
      _payments = $v.payments?.toBuilder();
      _phone_number = $v.phone_number;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_insert_input;
  }

  @override
  void update(
      void Function(Gcable_customers_table_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_insert_input build() => _build();

  _$Gcable_customers_table_insert_input _build() {
    _$Gcable_customers_table_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_insert_input._(
              address: address,
              belongs_to: belongs_to,
              cable_opr: _cable_opr?.build(),
              desc: desc,
              joined_on: _joined_on?.build(),
              name: name,
              paid_month: _paid_month?.build(),
              payments: _payments?.build(),
              phone_number: phone_number,
              price: price,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'joined_on';
        _joined_on?.build();

        _$failedField = 'paid_month';
        _paid_month?.build();
        _$failedField = 'payments';
        _payments?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_max_order_by
    extends Gcable_customers_table_max_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? desc;
  @override
  final Gorder_by? joined_on;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? paid_month;
  @override
  final Gorder_by? phone_number;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_max_order_by(
          [void Function(Gcable_customers_table_max_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_max_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_max_order_by._(
      {this.address,
      this.belongs_to,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_max_order_by rebuild(
          void Function(Gcable_customers_table_max_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_max_order_byBuilder toBuilder() =>
      new Gcable_customers_table_max_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_max_order_by &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, address.hashCode),
                                    belongs_to.hashCode),
                                desc.hashCode),
                            joined_on.hashCode),
                        name.hashCode),
                    paid_month.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_max_order_by')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_max_order_byBuilder
    implements
        Builder<Gcable_customers_table_max_order_by,
            Gcable_customers_table_max_order_byBuilder> {
  _$Gcable_customers_table_max_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _desc;
  Gorder_by? get desc => _$this._desc;
  set desc(Gorder_by? desc) => _$this._desc = desc;

  Gorder_by? _joined_on;
  Gorder_by? get joined_on => _$this._joined_on;
  set joined_on(Gorder_by? joined_on) => _$this._joined_on = joined_on;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _paid_month;
  Gorder_by? get paid_month => _$this._paid_month;
  set paid_month(Gorder_by? paid_month) => _$this._paid_month = paid_month;

  Gorder_by? _phone_number;
  Gorder_by? get phone_number => _$this._phone_number;
  set phone_number(Gorder_by? phone_number) =>
      _$this._phone_number = phone_number;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_max_order_byBuilder();

  Gcable_customers_table_max_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _desc = $v.desc;
      _joined_on = $v.joined_on;
      _name = $v.name;
      _paid_month = $v.paid_month;
      _phone_number = $v.phone_number;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_max_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_max_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_max_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_max_order_by build() => _build();

  _$Gcable_customers_table_max_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_max_order_by._(
            address: address,
            belongs_to: belongs_to,
            desc: desc,
            joined_on: joined_on,
            name: name,
            paid_month: paid_month,
            phone_number: phone_number,
            price: price,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_min_order_by
    extends Gcable_customers_table_min_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? desc;
  @override
  final Gorder_by? joined_on;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? paid_month;
  @override
  final Gorder_by? phone_number;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_min_order_by(
          [void Function(Gcable_customers_table_min_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_min_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_min_order_by._(
      {this.address,
      this.belongs_to,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_min_order_by rebuild(
          void Function(Gcable_customers_table_min_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_min_order_byBuilder toBuilder() =>
      new Gcable_customers_table_min_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_min_order_by &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, address.hashCode),
                                    belongs_to.hashCode),
                                desc.hashCode),
                            joined_on.hashCode),
                        name.hashCode),
                    paid_month.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_min_order_by')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_min_order_byBuilder
    implements
        Builder<Gcable_customers_table_min_order_by,
            Gcable_customers_table_min_order_byBuilder> {
  _$Gcable_customers_table_min_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _desc;
  Gorder_by? get desc => _$this._desc;
  set desc(Gorder_by? desc) => _$this._desc = desc;

  Gorder_by? _joined_on;
  Gorder_by? get joined_on => _$this._joined_on;
  set joined_on(Gorder_by? joined_on) => _$this._joined_on = joined_on;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _paid_month;
  Gorder_by? get paid_month => _$this._paid_month;
  set paid_month(Gorder_by? paid_month) => _$this._paid_month = paid_month;

  Gorder_by? _phone_number;
  Gorder_by? get phone_number => _$this._phone_number;
  set phone_number(Gorder_by? phone_number) =>
      _$this._phone_number = phone_number;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_min_order_byBuilder();

  Gcable_customers_table_min_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _desc = $v.desc;
      _joined_on = $v.joined_on;
      _name = $v.name;
      _paid_month = $v.paid_month;
      _phone_number = $v.phone_number;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_min_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_min_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_min_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_min_order_by build() => _build();

  _$Gcable_customers_table_min_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_min_order_by._(
            address: address,
            belongs_to: belongs_to,
            desc: desc,
            joined_on: joined_on,
            name: name,
            paid_month: paid_month,
            phone_number: phone_number,
            price: price,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_obj_rel_insert_input
    extends Gcable_customers_table_obj_rel_insert_input {
  @override
  final Gcable_customers_table_insert_input data;
  @override
  final Gcable_customers_table_on_conflict? on_conflict;

  factory _$Gcable_customers_table_obj_rel_insert_input(
          [void Function(Gcable_customers_table_obj_rel_insert_inputBuilder)?
              updates]) =>
      (new Gcable_customers_table_obj_rel_insert_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_customers_table_obj_rel_insert_input._(
      {required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcable_customers_table_obj_rel_insert_input', 'data');
  }

  @override
  Gcable_customers_table_obj_rel_insert_input rebuild(
          void Function(Gcable_customers_table_obj_rel_insert_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_obj_rel_insert_inputBuilder toBuilder() =>
      new Gcable_customers_table_obj_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_obj_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_obj_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcable_customers_table_obj_rel_insert_inputBuilder
    implements
        Builder<Gcable_customers_table_obj_rel_insert_input,
            Gcable_customers_table_obj_rel_insert_inputBuilder> {
  _$Gcable_customers_table_obj_rel_insert_input? _$v;

  Gcable_customers_table_insert_inputBuilder? _data;
  Gcable_customers_table_insert_inputBuilder get data =>
      _$this._data ??= new Gcable_customers_table_insert_inputBuilder();
  set data(Gcable_customers_table_insert_inputBuilder? data) =>
      _$this._data = data;

  Gcable_customers_table_on_conflictBuilder? _on_conflict;
  Gcable_customers_table_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcable_customers_table_on_conflictBuilder();
  set on_conflict(Gcable_customers_table_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcable_customers_table_obj_rel_insert_inputBuilder();

  Gcable_customers_table_obj_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_obj_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_obj_rel_insert_input;
  }

  @override
  void update(
      void Function(Gcable_customers_table_obj_rel_insert_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_obj_rel_insert_input build() => _build();

  _$Gcable_customers_table_obj_rel_insert_input _build() {
    _$Gcable_customers_table_obj_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_obj_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_obj_rel_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_on_conflict
    extends Gcable_customers_table_on_conflict {
  @override
  final Gcable_customers_table_constraint constraint;
  @override
  final BuiltList<Gcable_customers_table_update_column> update_columns;
  @override
  final Gcable_customers_table_bool_exp? where;

  factory _$Gcable_customers_table_on_conflict(
          [void Function(Gcable_customers_table_on_conflictBuilder)?
              updates]) =>
      (new Gcable_customers_table_on_conflictBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcable_customers_table_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(update_columns,
        r'Gcable_customers_table_on_conflict', 'update_columns');
  }

  @override
  Gcable_customers_table_on_conflict rebuild(
          void Function(Gcable_customers_table_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_on_conflictBuilder toBuilder() =>
      new Gcable_customers_table_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcable_customers_table_on_conflictBuilder
    implements
        Builder<Gcable_customers_table_on_conflict,
            Gcable_customers_table_on_conflictBuilder> {
  _$Gcable_customers_table_on_conflict? _$v;

  Gcable_customers_table_constraint? _constraint;
  Gcable_customers_table_constraint? get constraint => _$this._constraint;
  set constraint(Gcable_customers_table_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcable_customers_table_update_column>? _update_columns;
  ListBuilder<Gcable_customers_table_update_column> get update_columns =>
      _$this._update_columns ??=
          new ListBuilder<Gcable_customers_table_update_column>();
  set update_columns(
          ListBuilder<Gcable_customers_table_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcable_customers_table_bool_expBuilder? _where;
  Gcable_customers_table_bool_expBuilder get where =>
      _$this._where ??= new Gcable_customers_table_bool_expBuilder();
  set where(Gcable_customers_table_bool_expBuilder? where) =>
      _$this._where = where;

  Gcable_customers_table_on_conflictBuilder();

  Gcable_customers_table_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_on_conflict;
  }

  @override
  void update(
      void Function(Gcable_customers_table_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_on_conflict build() => _build();

  _$Gcable_customers_table_on_conflict _build() {
    _$Gcable_customers_table_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(constraint,
                  r'Gcable_customers_table_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_order_by
    extends Gcable_customers_table_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gorder_by? belongs_to;
  @override
  final Gcable_opr_order_by? cable_opr;
  @override
  final Gorder_by? desc;
  @override
  final Gorder_by? joined_on;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? paid_month;
  @override
  final Gpayments_aggregate_order_by? payments_aggregate;
  @override
  final Gorder_by? phone_number;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_order_by(
          [void Function(Gcable_customers_table_order_byBuilder)? updates]) =>
      (new Gcable_customers_table_order_byBuilder()..update(updates))._build();

  _$Gcable_customers_table_order_by._(
      {this.address,
      this.belongs_to,
      this.cable_opr,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.payments_aggregate,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_order_by rebuild(
          void Function(Gcable_customers_table_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_order_byBuilder toBuilder() =>
      new Gcable_customers_table_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_order_by &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        cable_opr == other.cable_opr &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        payments_aggregate == other.payments_aggregate &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, address.hashCode),
                                            belongs_to.hashCode),
                                        cable_opr.hashCode),
                                    desc.hashCode),
                                joined_on.hashCode),
                            name.hashCode),
                        paid_month.hashCode),
                    payments_aggregate.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_order_by')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('cable_opr', cable_opr)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('payments_aggregate', payments_aggregate)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_order_byBuilder
    implements
        Builder<Gcable_customers_table_order_by,
            Gcable_customers_table_order_byBuilder> {
  _$Gcable_customers_table_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gcable_opr_order_byBuilder? _cable_opr;
  Gcable_opr_order_byBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_order_byBuilder();
  set cable_opr(Gcable_opr_order_byBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gorder_by? _desc;
  Gorder_by? get desc => _$this._desc;
  set desc(Gorder_by? desc) => _$this._desc = desc;

  Gorder_by? _joined_on;
  Gorder_by? get joined_on => _$this._joined_on;
  set joined_on(Gorder_by? joined_on) => _$this._joined_on = joined_on;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _paid_month;
  Gorder_by? get paid_month => _$this._paid_month;
  set paid_month(Gorder_by? paid_month) => _$this._paid_month = paid_month;

  Gpayments_aggregate_order_byBuilder? _payments_aggregate;
  Gpayments_aggregate_order_byBuilder get payments_aggregate =>
      _$this._payments_aggregate ??= new Gpayments_aggregate_order_byBuilder();
  set payments_aggregate(
          Gpayments_aggregate_order_byBuilder? payments_aggregate) =>
      _$this._payments_aggregate = payments_aggregate;

  Gorder_by? _phone_number;
  Gorder_by? get phone_number => _$this._phone_number;
  set phone_number(Gorder_by? phone_number) =>
      _$this._phone_number = phone_number;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_order_byBuilder();

  Gcable_customers_table_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _cable_opr = $v.cable_opr?.toBuilder();
      _desc = $v.desc;
      _joined_on = $v.joined_on;
      _name = $v.name;
      _paid_month = $v.paid_month;
      _payments_aggregate = $v.payments_aggregate?.toBuilder();
      _phone_number = $v.phone_number;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_order_by;
  }

  @override
  void update(void Function(Gcable_customers_table_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_order_by build() => _build();

  _$Gcable_customers_table_order_by _build() {
    _$Gcable_customers_table_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_order_by._(
              address: address,
              belongs_to: belongs_to,
              cable_opr: _cable_opr?.build(),
              desc: desc,
              joined_on: joined_on,
              name: name,
              paid_month: paid_month,
              payments_aggregate: _payments_aggregate?.build(),
              phone_number: phone_number,
              price: price,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'payments_aggregate';
        _payments_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_pk_columns_input
    extends Gcable_customers_table_pk_columns_input {
  @override
  final int user_id;

  factory _$Gcable_customers_table_pk_columns_input(
          [void Function(Gcable_customers_table_pk_columns_inputBuilder)?
              updates]) =>
      (new Gcable_customers_table_pk_columns_inputBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_pk_columns_input._({required this.user_id})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        user_id, r'Gcable_customers_table_pk_columns_input', 'user_id');
  }

  @override
  Gcable_customers_table_pk_columns_input rebuild(
          void Function(Gcable_customers_table_pk_columns_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_pk_columns_inputBuilder toBuilder() =>
      new Gcable_customers_table_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_pk_columns_input &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_pk_columns_input')
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_pk_columns_inputBuilder
    implements
        Builder<Gcable_customers_table_pk_columns_input,
            Gcable_customers_table_pk_columns_inputBuilder> {
  _$Gcable_customers_table_pk_columns_input? _$v;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_pk_columns_inputBuilder();

  Gcable_customers_table_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_pk_columns_input;
  }

  @override
  void update(
      void Function(Gcable_customers_table_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_pk_columns_input build() => _build();

  _$Gcable_customers_table_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_pk_columns_input._(
            user_id: BuiltValueNullFieldError.checkNotNull(user_id,
                r'Gcable_customers_table_pk_columns_input', 'user_id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_set_input
    extends Gcable_customers_table_set_input {
  @override
  final String? address;
  @override
  final int? belongs_to;
  @override
  final String? desc;
  @override
  final Gtimestamptz? joined_on;
  @override
  final String? name;
  @override
  final Gtimestamptz? paid_month;
  @override
  final String? phone_number;
  @override
  final int? price;
  @override
  final int? user_id;

  factory _$Gcable_customers_table_set_input(
          [void Function(Gcable_customers_table_set_inputBuilder)? updates]) =>
      (new Gcable_customers_table_set_inputBuilder()..update(updates))._build();

  _$Gcable_customers_table_set_input._(
      {this.address,
      this.belongs_to,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_set_input rebuild(
          void Function(Gcable_customers_table_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_set_inputBuilder toBuilder() =>
      new Gcable_customers_table_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_set_input &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, address.hashCode),
                                    belongs_to.hashCode),
                                desc.hashCode),
                            joined_on.hashCode),
                        name.hashCode),
                    paid_month.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_set_input')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_set_inputBuilder
    implements
        Builder<Gcable_customers_table_set_input,
            Gcable_customers_table_set_inputBuilder> {
  _$Gcable_customers_table_set_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  String? _desc;
  String? get desc => _$this._desc;
  set desc(String? desc) => _$this._desc = desc;

  GtimestamptzBuilder? _joined_on;
  GtimestamptzBuilder get joined_on =>
      _$this._joined_on ??= new GtimestamptzBuilder();
  set joined_on(GtimestamptzBuilder? joined_on) =>
      _$this._joined_on = joined_on;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  GtimestamptzBuilder? _paid_month;
  GtimestamptzBuilder get paid_month =>
      _$this._paid_month ??= new GtimestamptzBuilder();
  set paid_month(GtimestamptzBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  String? _phone_number;
  String? get phone_number => _$this._phone_number;
  set phone_number(String? phone_number) => _$this._phone_number = phone_number;

  int? _price;
  int? get price => _$this._price;
  set price(int? price) => _$this._price = price;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_set_inputBuilder();

  Gcable_customers_table_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _desc = $v.desc;
      _joined_on = $v.joined_on?.toBuilder();
      _name = $v.name;
      _paid_month = $v.paid_month?.toBuilder();
      _phone_number = $v.phone_number;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_set_input;
  }

  @override
  void update(void Function(Gcable_customers_table_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_set_input build() => _build();

  _$Gcable_customers_table_set_input _build() {
    _$Gcable_customers_table_set_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_set_input._(
              address: address,
              belongs_to: belongs_to,
              desc: desc,
              joined_on: _joined_on?.build(),
              name: name,
              paid_month: _paid_month?.build(),
              phone_number: phone_number,
              price: price,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'joined_on';
        _joined_on?.build();

        _$failedField = 'paid_month';
        _paid_month?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_set_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_stddev_order_by
    extends Gcable_customers_table_stddev_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_stddev_order_by(
          [void Function(Gcable_customers_table_stddev_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_stddev_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_stddev_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_stddev_order_by rebuild(
          void Function(Gcable_customers_table_stddev_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_stddev_order_byBuilder toBuilder() =>
      new Gcable_customers_table_stddev_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_stddev_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_stddev_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_stddev_order_byBuilder
    implements
        Builder<Gcable_customers_table_stddev_order_by,
            Gcable_customers_table_stddev_order_byBuilder> {
  _$Gcable_customers_table_stddev_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_stddev_order_byBuilder();

  Gcable_customers_table_stddev_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_stddev_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_stddev_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_stddev_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_stddev_order_by build() => _build();

  _$Gcable_customers_table_stddev_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_stddev_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_stddev_pop_order_by
    extends Gcable_customers_table_stddev_pop_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_stddev_pop_order_by(
          [void Function(Gcable_customers_table_stddev_pop_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_stddev_pop_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_stddev_pop_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_stddev_pop_order_by rebuild(
          void Function(Gcable_customers_table_stddev_pop_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_stddev_pop_order_byBuilder toBuilder() =>
      new Gcable_customers_table_stddev_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_stddev_pop_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_stddev_pop_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_stddev_pop_order_byBuilder
    implements
        Builder<Gcable_customers_table_stddev_pop_order_by,
            Gcable_customers_table_stddev_pop_order_byBuilder> {
  _$Gcable_customers_table_stddev_pop_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_stddev_pop_order_byBuilder();

  Gcable_customers_table_stddev_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_stddev_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_stddev_pop_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_stddev_pop_order_byBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_stddev_pop_order_by build() => _build();

  _$Gcable_customers_table_stddev_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_stddev_pop_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_stddev_samp_order_by
    extends Gcable_customers_table_stddev_samp_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_stddev_samp_order_by(
          [void Function(Gcable_customers_table_stddev_samp_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_stddev_samp_order_byBuilder()
            ..update(updates))
          ._build();

  _$Gcable_customers_table_stddev_samp_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_stddev_samp_order_by rebuild(
          void Function(Gcable_customers_table_stddev_samp_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_stddev_samp_order_byBuilder toBuilder() =>
      new Gcable_customers_table_stddev_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_stddev_samp_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_stddev_samp_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_stddev_samp_order_byBuilder
    implements
        Builder<Gcable_customers_table_stddev_samp_order_by,
            Gcable_customers_table_stddev_samp_order_byBuilder> {
  _$Gcable_customers_table_stddev_samp_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_stddev_samp_order_byBuilder();

  Gcable_customers_table_stddev_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_stddev_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_stddev_samp_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_stddev_samp_order_byBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_stddev_samp_order_by build() => _build();

  _$Gcable_customers_table_stddev_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_stddev_samp_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_stream_cursor_input
    extends Gcable_customers_table_stream_cursor_input {
  @override
  final Gcable_customers_table_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcable_customers_table_stream_cursor_input(
          [void Function(Gcable_customers_table_stream_cursor_inputBuilder)?
              updates]) =>
      (new Gcable_customers_table_stream_cursor_inputBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(initial_value,
        r'Gcable_customers_table_stream_cursor_input', 'initial_value');
  }

  @override
  Gcable_customers_table_stream_cursor_input rebuild(
          void Function(Gcable_customers_table_stream_cursor_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_stream_cursor_inputBuilder toBuilder() =>
      new Gcable_customers_table_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcable_customers_table_stream_cursor_inputBuilder
    implements
        Builder<Gcable_customers_table_stream_cursor_input,
            Gcable_customers_table_stream_cursor_inputBuilder> {
  _$Gcable_customers_table_stream_cursor_input? _$v;

  Gcable_customers_table_stream_cursor_value_inputBuilder? _initial_value;
  Gcable_customers_table_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcable_customers_table_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcable_customers_table_stream_cursor_value_inputBuilder?
              initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcable_customers_table_stream_cursor_inputBuilder();

  Gcable_customers_table_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_stream_cursor_input;
  }

  @override
  void update(
      void Function(Gcable_customers_table_stream_cursor_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_stream_cursor_input build() => _build();

  _$Gcable_customers_table_stream_cursor_input _build() {
    _$Gcable_customers_table_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_stream_cursor_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_stream_cursor_value_input
    extends Gcable_customers_table_stream_cursor_value_input {
  @override
  final String? address;
  @override
  final int? belongs_to;
  @override
  final String? desc;
  @override
  final Gtimestamptz? joined_on;
  @override
  final String? name;
  @override
  final Gtimestamptz? paid_month;
  @override
  final String? phone_number;
  @override
  final int? price;
  @override
  final int? user_id;

  factory _$Gcable_customers_table_stream_cursor_value_input(
          [void Function(
                  Gcable_customers_table_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcable_customers_table_stream_cursor_value_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_customers_table_stream_cursor_value_input._(
      {this.address,
      this.belongs_to,
      this.desc,
      this.joined_on,
      this.name,
      this.paid_month,
      this.phone_number,
      this.price,
      this.user_id})
      : super._();

  @override
  Gcable_customers_table_stream_cursor_value_input rebuild(
          void Function(Gcable_customers_table_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcable_customers_table_stream_cursor_value_inputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_stream_cursor_value_input &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        desc == other.desc &&
        joined_on == other.joined_on &&
        name == other.name &&
        paid_month == other.paid_month &&
        phone_number == other.phone_number &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, address.hashCode),
                                    belongs_to.hashCode),
                                desc.hashCode),
                            joined_on.hashCode),
                        name.hashCode),
                    paid_month.hashCode),
                phone_number.hashCode),
            price.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_stream_cursor_value_input')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('desc', desc)
          ..add('joined_on', joined_on)
          ..add('name', name)
          ..add('paid_month', paid_month)
          ..add('phone_number', phone_number)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_stream_cursor_value_inputBuilder
    implements
        Builder<Gcable_customers_table_stream_cursor_value_input,
            Gcable_customers_table_stream_cursor_value_inputBuilder> {
  _$Gcable_customers_table_stream_cursor_value_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  String? _desc;
  String? get desc => _$this._desc;
  set desc(String? desc) => _$this._desc = desc;

  GtimestamptzBuilder? _joined_on;
  GtimestamptzBuilder get joined_on =>
      _$this._joined_on ??= new GtimestamptzBuilder();
  set joined_on(GtimestamptzBuilder? joined_on) =>
      _$this._joined_on = joined_on;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  GtimestamptzBuilder? _paid_month;
  GtimestamptzBuilder get paid_month =>
      _$this._paid_month ??= new GtimestamptzBuilder();
  set paid_month(GtimestamptzBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  String? _phone_number;
  String? get phone_number => _$this._phone_number;
  set phone_number(String? phone_number) => _$this._phone_number = phone_number;

  int? _price;
  int? get price => _$this._price;
  set price(int? price) => _$this._price = price;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_stream_cursor_value_inputBuilder();

  Gcable_customers_table_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _desc = $v.desc;
      _joined_on = $v.joined_on?.toBuilder();
      _name = $v.name;
      _paid_month = $v.paid_month?.toBuilder();
      _phone_number = $v.phone_number;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcable_customers_table_stream_cursor_value_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_stream_cursor_value_input build() => _build();

  _$Gcable_customers_table_stream_cursor_value_input _build() {
    _$Gcable_customers_table_stream_cursor_value_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_stream_cursor_value_input._(
              address: address,
              belongs_to: belongs_to,
              desc: desc,
              joined_on: _joined_on?.build(),
              name: name,
              paid_month: _paid_month?.build(),
              phone_number: phone_number,
              price: price,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'joined_on';
        _joined_on?.build();

        _$failedField = 'paid_month';
        _paid_month?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_stream_cursor_value_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_sum_order_by
    extends Gcable_customers_table_sum_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_sum_order_by(
          [void Function(Gcable_customers_table_sum_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_sum_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_sum_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_sum_order_by rebuild(
          void Function(Gcable_customers_table_sum_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_sum_order_byBuilder toBuilder() =>
      new Gcable_customers_table_sum_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_sum_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_sum_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_sum_order_byBuilder
    implements
        Builder<Gcable_customers_table_sum_order_by,
            Gcable_customers_table_sum_order_byBuilder> {
  _$Gcable_customers_table_sum_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_sum_order_byBuilder();

  Gcable_customers_table_sum_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_sum_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_sum_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_sum_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_sum_order_by build() => _build();

  _$Gcable_customers_table_sum_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_sum_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_updates extends Gcable_customers_table_updates {
  @override
  final Gcable_customers_table_inc_input? G_inc;
  @override
  final Gcable_customers_table_set_input? G_set;
  @override
  final Gcable_customers_table_bool_exp where;

  factory _$Gcable_customers_table_updates(
          [void Function(Gcable_customers_table_updatesBuilder)? updates]) =>
      (new Gcable_customers_table_updatesBuilder()..update(updates))._build();

  _$Gcable_customers_table_updates._(
      {this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gcable_customers_table_updates', 'where');
  }

  @override
  Gcable_customers_table_updates rebuild(
          void Function(Gcable_customers_table_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_updatesBuilder toBuilder() =>
      new Gcable_customers_table_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_customers_table_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcable_customers_table_updatesBuilder
    implements
        Builder<Gcable_customers_table_updates,
            Gcable_customers_table_updatesBuilder> {
  _$Gcable_customers_table_updates? _$v;

  Gcable_customers_table_inc_inputBuilder? _G_inc;
  Gcable_customers_table_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcable_customers_table_inc_inputBuilder();
  set G_inc(Gcable_customers_table_inc_inputBuilder? G_inc) =>
      _$this._G_inc = G_inc;

  Gcable_customers_table_set_inputBuilder? _G_set;
  Gcable_customers_table_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcable_customers_table_set_inputBuilder();
  set G_set(Gcable_customers_table_set_inputBuilder? G_set) =>
      _$this._G_set = G_set;

  Gcable_customers_table_bool_expBuilder? _where;
  Gcable_customers_table_bool_expBuilder get where =>
      _$this._where ??= new Gcable_customers_table_bool_expBuilder();
  set where(Gcable_customers_table_bool_expBuilder? where) =>
      _$this._where = where;

  Gcable_customers_table_updatesBuilder();

  Gcable_customers_table_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_updates;
  }

  @override
  void update(void Function(Gcable_customers_table_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_updates build() => _build();

  _$Gcable_customers_table_updates _build() {
    _$Gcable_customers_table_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcable_customers_table_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_customers_table_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_var_pop_order_by
    extends Gcable_customers_table_var_pop_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_var_pop_order_by(
          [void Function(Gcable_customers_table_var_pop_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_var_pop_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_var_pop_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_var_pop_order_by rebuild(
          void Function(Gcable_customers_table_var_pop_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_var_pop_order_byBuilder toBuilder() =>
      new Gcable_customers_table_var_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_var_pop_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_var_pop_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_var_pop_order_byBuilder
    implements
        Builder<Gcable_customers_table_var_pop_order_by,
            Gcable_customers_table_var_pop_order_byBuilder> {
  _$Gcable_customers_table_var_pop_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_var_pop_order_byBuilder();

  Gcable_customers_table_var_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_var_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_var_pop_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_var_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_var_pop_order_by build() => _build();

  _$Gcable_customers_table_var_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_var_pop_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_var_samp_order_by
    extends Gcable_customers_table_var_samp_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_var_samp_order_by(
          [void Function(Gcable_customers_table_var_samp_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_var_samp_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_var_samp_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_var_samp_order_by rebuild(
          void Function(Gcable_customers_table_var_samp_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_var_samp_order_byBuilder toBuilder() =>
      new Gcable_customers_table_var_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_var_samp_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_var_samp_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_var_samp_order_byBuilder
    implements
        Builder<Gcable_customers_table_var_samp_order_by,
            Gcable_customers_table_var_samp_order_byBuilder> {
  _$Gcable_customers_table_var_samp_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_var_samp_order_byBuilder();

  Gcable_customers_table_var_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_var_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_var_samp_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_var_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_var_samp_order_by build() => _build();

  _$Gcable_customers_table_var_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_var_samp_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_customers_table_variance_order_by
    extends Gcable_customers_table_variance_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? price;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_customers_table_variance_order_by(
          [void Function(Gcable_customers_table_variance_order_byBuilder)?
              updates]) =>
      (new Gcable_customers_table_variance_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_customers_table_variance_order_by._(
      {this.belongs_to, this.price, this.user_id})
      : super._();

  @override
  Gcable_customers_table_variance_order_by rebuild(
          void Function(Gcable_customers_table_variance_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_customers_table_variance_order_byBuilder toBuilder() =>
      new Gcable_customers_table_variance_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_customers_table_variance_order_by &&
        belongs_to == other.belongs_to &&
        price == other.price &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc(0, belongs_to.hashCode), price.hashCode), user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_customers_table_variance_order_by')
          ..add('belongs_to', belongs_to)
          ..add('price', price)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_customers_table_variance_order_byBuilder
    implements
        Builder<Gcable_customers_table_variance_order_by,
            Gcable_customers_table_variance_order_byBuilder> {
  _$Gcable_customers_table_variance_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _price;
  Gorder_by? get price => _$this._price;
  set price(Gorder_by? price) => _$this._price = price;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_customers_table_variance_order_byBuilder();

  Gcable_customers_table_variance_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _price = $v.price;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_customers_table_variance_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_customers_table_variance_order_by;
  }

  @override
  void update(
      void Function(Gcable_customers_table_variance_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_customers_table_variance_order_by build() => _build();

  _$Gcable_customers_table_variance_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_customers_table_variance_order_by._(
            belongs_to: belongs_to, price: price, user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_bool_exp extends Gcable_opr_bool_exp {
  @override
  final BuiltList<Gcable_opr_bool_exp>? G_and;
  @override
  final Gcable_opr_bool_exp? G_not;
  @override
  final BuiltList<Gcable_opr_bool_exp>? G_or;
  @override
  final GString_comparison_exp? address;
  @override
  final Gcable_customers_table_bool_exp? cable_customers_tables;
  @override
  final Gcable_customers_table_aggregate_bool_exp?
      cable_customers_tables_aggregate;
  @override
  final GString_comparison_exp? cable_name;
  @override
  final Gcable_subscriptions_bool_exp? cable_subscriptions;
  @override
  final Gcable_subscriptions_aggregate_bool_exp? cable_subscriptions_aggregate;
  @override
  final Gcollectors_bool_exp? collectors;
  @override
  final Gcollectors_aggregate_bool_exp? collectors_aggregate;
  @override
  final GString_comparison_exp? email;
  @override
  final GBoolean_comparison_exp? isActive;
  @override
  final Gnotifications_bool_exp? notifications;
  @override
  final Gnotifications_aggregate_bool_exp? notifications_aggregate;
  @override
  final Gtimestamptz_comparison_exp? paid_month;
  @override
  final GString_comparison_exp? password;
  @override
  final Gpayments_bool_exp? payments;
  @override
  final Gpayments_aggregate_bool_exp? payments_aggregate;
  @override
  final GString_comparison_exp? phone_no;
  @override
  final GInt_comparison_exp? user_id;

  factory _$Gcable_opr_bool_exp(
          [void Function(Gcable_opr_bool_expBuilder)? updates]) =>
      (new Gcable_opr_bool_expBuilder()..update(updates))._build();

  _$Gcable_opr_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.address,
      this.cable_customers_tables,
      this.cable_customers_tables_aggregate,
      this.cable_name,
      this.cable_subscriptions,
      this.cable_subscriptions_aggregate,
      this.collectors,
      this.collectors_aggregate,
      this.email,
      this.isActive,
      this.notifications,
      this.notifications_aggregate,
      this.paid_month,
      this.password,
      this.payments,
      this.payments_aggregate,
      this.phone_no,
      this.user_id})
      : super._();

  @override
  Gcable_opr_bool_exp rebuild(
          void Function(Gcable_opr_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_bool_expBuilder toBuilder() =>
      new Gcable_opr_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        address == other.address &&
        cable_customers_tables == other.cable_customers_tables &&
        cable_customers_tables_aggregate ==
            other.cable_customers_tables_aggregate &&
        cable_name == other.cable_name &&
        cable_subscriptions == other.cable_subscriptions &&
        cable_subscriptions_aggregate == other.cable_subscriptions_aggregate &&
        collectors == other.collectors &&
        collectors_aggregate == other.collectors_aggregate &&
        email == other.email &&
        isActive == other.isActive &&
        notifications == other.notifications &&
        notifications_aggregate == other.notifications_aggregate &&
        paid_month == other.paid_month &&
        password == other.password &&
        payments == other.payments &&
        payments_aggregate == other.payments_aggregate &&
        phone_no == other.phone_no &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc(0, G_and.hashCode), G_not.hashCode),
                                                                                G_or.hashCode),
                                                                            address.hashCode),
                                                                        cable_customers_tables.hashCode),
                                                                    cable_customers_tables_aggregate.hashCode),
                                                                cable_name.hashCode),
                                                            cable_subscriptions.hashCode),
                                                        cable_subscriptions_aggregate.hashCode),
                                                    collectors.hashCode),
                                                collectors_aggregate.hashCode),
                                            email.hashCode),
                                        isActive.hashCode),
                                    notifications.hashCode),
                                notifications_aggregate.hashCode),
                            paid_month.hashCode),
                        password.hashCode),
                    payments.hashCode),
                payments_aggregate.hashCode),
            phone_no.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('address', address)
          ..add('cable_customers_tables', cable_customers_tables)
          ..add('cable_customers_tables_aggregate',
              cable_customers_tables_aggregate)
          ..add('cable_name', cable_name)
          ..add('cable_subscriptions', cable_subscriptions)
          ..add('cable_subscriptions_aggregate', cable_subscriptions_aggregate)
          ..add('collectors', collectors)
          ..add('collectors_aggregate', collectors_aggregate)
          ..add('email', email)
          ..add('isActive', isActive)
          ..add('notifications', notifications)
          ..add('notifications_aggregate', notifications_aggregate)
          ..add('paid_month', paid_month)
          ..add('password', password)
          ..add('payments', payments)
          ..add('payments_aggregate', payments_aggregate)
          ..add('phone_no', phone_no)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_bool_expBuilder
    implements Builder<Gcable_opr_bool_exp, Gcable_opr_bool_expBuilder> {
  _$Gcable_opr_bool_exp? _$v;

  ListBuilder<Gcable_opr_bool_exp>? _G_and;
  ListBuilder<Gcable_opr_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcable_opr_bool_exp>();
  set G_and(ListBuilder<Gcable_opr_bool_exp>? G_and) => _$this._G_and = G_and;

  Gcable_opr_bool_expBuilder? _G_not;
  Gcable_opr_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcable_opr_bool_expBuilder();
  set G_not(Gcable_opr_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gcable_opr_bool_exp>? _G_or;
  ListBuilder<Gcable_opr_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcable_opr_bool_exp>();
  set G_or(ListBuilder<Gcable_opr_bool_exp>? G_or) => _$this._G_or = G_or;

  GString_comparison_expBuilder? _address;
  GString_comparison_expBuilder get address =>
      _$this._address ??= new GString_comparison_expBuilder();
  set address(GString_comparison_expBuilder? address) =>
      _$this._address = address;

  Gcable_customers_table_bool_expBuilder? _cable_customers_tables;
  Gcable_customers_table_bool_expBuilder get cable_customers_tables =>
      _$this._cable_customers_tables ??=
          new Gcable_customers_table_bool_expBuilder();
  set cable_customers_tables(
          Gcable_customers_table_bool_expBuilder? cable_customers_tables) =>
      _$this._cable_customers_tables = cable_customers_tables;

  Gcable_customers_table_aggregate_bool_expBuilder?
      _cable_customers_tables_aggregate;
  Gcable_customers_table_aggregate_bool_expBuilder
      get cable_customers_tables_aggregate =>
          _$this._cable_customers_tables_aggregate ??=
              new Gcable_customers_table_aggregate_bool_expBuilder();
  set cable_customers_tables_aggregate(
          Gcable_customers_table_aggregate_bool_expBuilder?
              cable_customers_tables_aggregate) =>
      _$this._cable_customers_tables_aggregate =
          cable_customers_tables_aggregate;

  GString_comparison_expBuilder? _cable_name;
  GString_comparison_expBuilder get cable_name =>
      _$this._cable_name ??= new GString_comparison_expBuilder();
  set cable_name(GString_comparison_expBuilder? cable_name) =>
      _$this._cable_name = cable_name;

  Gcable_subscriptions_bool_expBuilder? _cable_subscriptions;
  Gcable_subscriptions_bool_expBuilder get cable_subscriptions =>
      _$this._cable_subscriptions ??=
          new Gcable_subscriptions_bool_expBuilder();
  set cable_subscriptions(
          Gcable_subscriptions_bool_expBuilder? cable_subscriptions) =>
      _$this._cable_subscriptions = cable_subscriptions;

  Gcable_subscriptions_aggregate_bool_expBuilder?
      _cable_subscriptions_aggregate;
  Gcable_subscriptions_aggregate_bool_expBuilder
      get cable_subscriptions_aggregate =>
          _$this._cable_subscriptions_aggregate ??=
              new Gcable_subscriptions_aggregate_bool_expBuilder();
  set cable_subscriptions_aggregate(
          Gcable_subscriptions_aggregate_bool_expBuilder?
              cable_subscriptions_aggregate) =>
      _$this._cable_subscriptions_aggregate = cable_subscriptions_aggregate;

  Gcollectors_bool_expBuilder? _collectors;
  Gcollectors_bool_expBuilder get collectors =>
      _$this._collectors ??= new Gcollectors_bool_expBuilder();
  set collectors(Gcollectors_bool_expBuilder? collectors) =>
      _$this._collectors = collectors;

  Gcollectors_aggregate_bool_expBuilder? _collectors_aggregate;
  Gcollectors_aggregate_bool_expBuilder get collectors_aggregate =>
      _$this._collectors_aggregate ??=
          new Gcollectors_aggregate_bool_expBuilder();
  set collectors_aggregate(
          Gcollectors_aggregate_bool_expBuilder? collectors_aggregate) =>
      _$this._collectors_aggregate = collectors_aggregate;

  GString_comparison_expBuilder? _email;
  GString_comparison_expBuilder get email =>
      _$this._email ??= new GString_comparison_expBuilder();
  set email(GString_comparison_expBuilder? email) => _$this._email = email;

  GBoolean_comparison_expBuilder? _isActive;
  GBoolean_comparison_expBuilder get isActive =>
      _$this._isActive ??= new GBoolean_comparison_expBuilder();
  set isActive(GBoolean_comparison_expBuilder? isActive) =>
      _$this._isActive = isActive;

  Gnotifications_bool_expBuilder? _notifications;
  Gnotifications_bool_expBuilder get notifications =>
      _$this._notifications ??= new Gnotifications_bool_expBuilder();
  set notifications(Gnotifications_bool_expBuilder? notifications) =>
      _$this._notifications = notifications;

  Gnotifications_aggregate_bool_expBuilder? _notifications_aggregate;
  Gnotifications_aggregate_bool_expBuilder get notifications_aggregate =>
      _$this._notifications_aggregate ??=
          new Gnotifications_aggregate_bool_expBuilder();
  set notifications_aggregate(
          Gnotifications_aggregate_bool_expBuilder? notifications_aggregate) =>
      _$this._notifications_aggregate = notifications_aggregate;

  Gtimestamptz_comparison_expBuilder? _paid_month;
  Gtimestamptz_comparison_expBuilder get paid_month =>
      _$this._paid_month ??= new Gtimestamptz_comparison_expBuilder();
  set paid_month(Gtimestamptz_comparison_expBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  GString_comparison_expBuilder? _password;
  GString_comparison_expBuilder get password =>
      _$this._password ??= new GString_comparison_expBuilder();
  set password(GString_comparison_expBuilder? password) =>
      _$this._password = password;

  Gpayments_bool_expBuilder? _payments;
  Gpayments_bool_expBuilder get payments =>
      _$this._payments ??= new Gpayments_bool_expBuilder();
  set payments(Gpayments_bool_expBuilder? payments) =>
      _$this._payments = payments;

  Gpayments_aggregate_bool_expBuilder? _payments_aggregate;
  Gpayments_aggregate_bool_expBuilder get payments_aggregate =>
      _$this._payments_aggregate ??= new Gpayments_aggregate_bool_expBuilder();
  set payments_aggregate(
          Gpayments_aggregate_bool_expBuilder? payments_aggregate) =>
      _$this._payments_aggregate = payments_aggregate;

  GString_comparison_expBuilder? _phone_no;
  GString_comparison_expBuilder get phone_no =>
      _$this._phone_no ??= new GString_comparison_expBuilder();
  set phone_no(GString_comparison_expBuilder? phone_no) =>
      _$this._phone_no = phone_no;

  GInt_comparison_expBuilder? _user_id;
  GInt_comparison_expBuilder get user_id =>
      _$this._user_id ??= new GInt_comparison_expBuilder();
  set user_id(GInt_comparison_expBuilder? user_id) => _$this._user_id = user_id;

  Gcable_opr_bool_expBuilder();

  Gcable_opr_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _address = $v.address?.toBuilder();
      _cable_customers_tables = $v.cable_customers_tables?.toBuilder();
      _cable_customers_tables_aggregate =
          $v.cable_customers_tables_aggregate?.toBuilder();
      _cable_name = $v.cable_name?.toBuilder();
      _cable_subscriptions = $v.cable_subscriptions?.toBuilder();
      _cable_subscriptions_aggregate =
          $v.cable_subscriptions_aggregate?.toBuilder();
      _collectors = $v.collectors?.toBuilder();
      _collectors_aggregate = $v.collectors_aggregate?.toBuilder();
      _email = $v.email?.toBuilder();
      _isActive = $v.isActive?.toBuilder();
      _notifications = $v.notifications?.toBuilder();
      _notifications_aggregate = $v.notifications_aggregate?.toBuilder();
      _paid_month = $v.paid_month?.toBuilder();
      _password = $v.password?.toBuilder();
      _payments = $v.payments?.toBuilder();
      _payments_aggregate = $v.payments_aggregate?.toBuilder();
      _phone_no = $v.phone_no?.toBuilder();
      _user_id = $v.user_id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_bool_exp;
  }

  @override
  void update(void Function(Gcable_opr_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_bool_exp build() => _build();

  _$Gcable_opr_bool_exp _build() {
    _$Gcable_opr_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              address: _address?.build(),
              cable_customers_tables: _cable_customers_tables?.build(),
              cable_customers_tables_aggregate:
                  _cable_customers_tables_aggregate?.build(),
              cable_name: _cable_name?.build(),
              cable_subscriptions: _cable_subscriptions?.build(),
              cable_subscriptions_aggregate:
                  _cable_subscriptions_aggregate?.build(),
              collectors: _collectors?.build(),
              collectors_aggregate: _collectors_aggregate?.build(),
              email: _email?.build(),
              isActive: _isActive?.build(),
              notifications: _notifications?.build(),
              notifications_aggregate: _notifications_aggregate?.build(),
              paid_month: _paid_month?.build(),
              password: _password?.build(),
              payments: _payments?.build(),
              payments_aggregate: _payments_aggregate?.build(),
              phone_no: _phone_no?.build(),
              user_id: _user_id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'address';
        _address?.build();
        _$failedField = 'cable_customers_tables';
        _cable_customers_tables?.build();
        _$failedField = 'cable_customers_tables_aggregate';
        _cable_customers_tables_aggregate?.build();
        _$failedField = 'cable_name';
        _cable_name?.build();
        _$failedField = 'cable_subscriptions';
        _cable_subscriptions?.build();
        _$failedField = 'cable_subscriptions_aggregate';
        _cable_subscriptions_aggregate?.build();
        _$failedField = 'collectors';
        _collectors?.build();
        _$failedField = 'collectors_aggregate';
        _collectors_aggregate?.build();
        _$failedField = 'email';
        _email?.build();
        _$failedField = 'isActive';
        _isActive?.build();
        _$failedField = 'notifications';
        _notifications?.build();
        _$failedField = 'notifications_aggregate';
        _notifications_aggregate?.build();
        _$failedField = 'paid_month';
        _paid_month?.build();
        _$failedField = 'password';
        _password?.build();
        _$failedField = 'payments';
        _payments?.build();
        _$failedField = 'payments_aggregate';
        _payments_aggregate?.build();
        _$failedField = 'phone_no';
        _phone_no?.build();
        _$failedField = 'user_id';
        _user_id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_inc_input extends Gcable_opr_inc_input {
  @override
  final int? user_id;

  factory _$Gcable_opr_inc_input(
          [void Function(Gcable_opr_inc_inputBuilder)? updates]) =>
      (new Gcable_opr_inc_inputBuilder()..update(updates))._build();

  _$Gcable_opr_inc_input._({this.user_id}) : super._();

  @override
  Gcable_opr_inc_input rebuild(
          void Function(Gcable_opr_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_inc_inputBuilder toBuilder() =>
      new Gcable_opr_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_inc_input && user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_inc_input')
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_inc_inputBuilder
    implements Builder<Gcable_opr_inc_input, Gcable_opr_inc_inputBuilder> {
  _$Gcable_opr_inc_input? _$v;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_opr_inc_inputBuilder();

  Gcable_opr_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_inc_input;
  }

  @override
  void update(void Function(Gcable_opr_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_inc_input build() => _build();

  _$Gcable_opr_inc_input _build() {
    final _$result = _$v ?? new _$Gcable_opr_inc_input._(user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_insert_input extends Gcable_opr_insert_input {
  @override
  final String? address;
  @override
  final Gcable_customers_table_arr_rel_insert_input? cable_customers_tables;
  @override
  final String? cable_name;
  @override
  final Gcable_subscriptions_arr_rel_insert_input? cable_subscriptions;
  @override
  final Gcollectors_arr_rel_insert_input? collectors;
  @override
  final String? email;
  @override
  final bool? isActive;
  @override
  final Gnotifications_arr_rel_insert_input? notifications;
  @override
  final Gtimestamptz? paid_month;
  @override
  final String? password;
  @override
  final Gpayments_arr_rel_insert_input? payments;
  @override
  final String? phone_no;
  @override
  final int? user_id;

  factory _$Gcable_opr_insert_input(
          [void Function(Gcable_opr_insert_inputBuilder)? updates]) =>
      (new Gcable_opr_insert_inputBuilder()..update(updates))._build();

  _$Gcable_opr_insert_input._(
      {this.address,
      this.cable_customers_tables,
      this.cable_name,
      this.cable_subscriptions,
      this.collectors,
      this.email,
      this.isActive,
      this.notifications,
      this.paid_month,
      this.password,
      this.payments,
      this.phone_no,
      this.user_id})
      : super._();

  @override
  Gcable_opr_insert_input rebuild(
          void Function(Gcable_opr_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_insert_inputBuilder toBuilder() =>
      new Gcable_opr_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_insert_input &&
        address == other.address &&
        cable_customers_tables == other.cable_customers_tables &&
        cable_name == other.cable_name &&
        cable_subscriptions == other.cable_subscriptions &&
        collectors == other.collectors &&
        email == other.email &&
        isActive == other.isActive &&
        notifications == other.notifications &&
        paid_month == other.paid_month &&
        password == other.password &&
        payments == other.payments &&
        phone_no == other.phone_no &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(0, address.hashCode),
                                                    cable_customers_tables
                                                        .hashCode),
                                                cable_name.hashCode),
                                            cable_subscriptions.hashCode),
                                        collectors.hashCode),
                                    email.hashCode),
                                isActive.hashCode),
                            notifications.hashCode),
                        paid_month.hashCode),
                    password.hashCode),
                payments.hashCode),
            phone_no.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_insert_input')
          ..add('address', address)
          ..add('cable_customers_tables', cable_customers_tables)
          ..add('cable_name', cable_name)
          ..add('cable_subscriptions', cable_subscriptions)
          ..add('collectors', collectors)
          ..add('email', email)
          ..add('isActive', isActive)
          ..add('notifications', notifications)
          ..add('paid_month', paid_month)
          ..add('password', password)
          ..add('payments', payments)
          ..add('phone_no', phone_no)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_insert_inputBuilder
    implements
        Builder<Gcable_opr_insert_input, Gcable_opr_insert_inputBuilder> {
  _$Gcable_opr_insert_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  Gcable_customers_table_arr_rel_insert_inputBuilder? _cable_customers_tables;
  Gcable_customers_table_arr_rel_insert_inputBuilder
      get cable_customers_tables => _$this._cable_customers_tables ??=
          new Gcable_customers_table_arr_rel_insert_inputBuilder();
  set cable_customers_tables(
          Gcable_customers_table_arr_rel_insert_inputBuilder?
              cable_customers_tables) =>
      _$this._cable_customers_tables = cable_customers_tables;

  String? _cable_name;
  String? get cable_name => _$this._cable_name;
  set cable_name(String? cable_name) => _$this._cable_name = cable_name;

  Gcable_subscriptions_arr_rel_insert_inputBuilder? _cable_subscriptions;
  Gcable_subscriptions_arr_rel_insert_inputBuilder get cable_subscriptions =>
      _$this._cable_subscriptions ??=
          new Gcable_subscriptions_arr_rel_insert_inputBuilder();
  set cable_subscriptions(
          Gcable_subscriptions_arr_rel_insert_inputBuilder?
              cable_subscriptions) =>
      _$this._cable_subscriptions = cable_subscriptions;

  Gcollectors_arr_rel_insert_inputBuilder? _collectors;
  Gcollectors_arr_rel_insert_inputBuilder get collectors =>
      _$this._collectors ??= new Gcollectors_arr_rel_insert_inputBuilder();
  set collectors(Gcollectors_arr_rel_insert_inputBuilder? collectors) =>
      _$this._collectors = collectors;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  Gnotifications_arr_rel_insert_inputBuilder? _notifications;
  Gnotifications_arr_rel_insert_inputBuilder get notifications =>
      _$this._notifications ??=
          new Gnotifications_arr_rel_insert_inputBuilder();
  set notifications(
          Gnotifications_arr_rel_insert_inputBuilder? notifications) =>
      _$this._notifications = notifications;

  GtimestamptzBuilder? _paid_month;
  GtimestamptzBuilder get paid_month =>
      _$this._paid_month ??= new GtimestamptzBuilder();
  set paid_month(GtimestamptzBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  Gpayments_arr_rel_insert_inputBuilder? _payments;
  Gpayments_arr_rel_insert_inputBuilder get payments =>
      _$this._payments ??= new Gpayments_arr_rel_insert_inputBuilder();
  set payments(Gpayments_arr_rel_insert_inputBuilder? payments) =>
      _$this._payments = payments;

  String? _phone_no;
  String? get phone_no => _$this._phone_no;
  set phone_no(String? phone_no) => _$this._phone_no = phone_no;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_opr_insert_inputBuilder();

  Gcable_opr_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _cable_customers_tables = $v.cable_customers_tables?.toBuilder();
      _cable_name = $v.cable_name;
      _cable_subscriptions = $v.cable_subscriptions?.toBuilder();
      _collectors = $v.collectors?.toBuilder();
      _email = $v.email;
      _isActive = $v.isActive;
      _notifications = $v.notifications?.toBuilder();
      _paid_month = $v.paid_month?.toBuilder();
      _password = $v.password;
      _payments = $v.payments?.toBuilder();
      _phone_no = $v.phone_no;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_insert_input;
  }

  @override
  void update(void Function(Gcable_opr_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_insert_input build() => _build();

  _$Gcable_opr_insert_input _build() {
    _$Gcable_opr_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_insert_input._(
              address: address,
              cable_customers_tables: _cable_customers_tables?.build(),
              cable_name: cable_name,
              cable_subscriptions: _cable_subscriptions?.build(),
              collectors: _collectors?.build(),
              email: email,
              isActive: isActive,
              notifications: _notifications?.build(),
              paid_month: _paid_month?.build(),
              password: password,
              payments: _payments?.build(),
              phone_no: phone_no,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_customers_tables';
        _cable_customers_tables?.build();

        _$failedField = 'cable_subscriptions';
        _cable_subscriptions?.build();
        _$failedField = 'collectors';
        _collectors?.build();

        _$failedField = 'notifications';
        _notifications?.build();
        _$failedField = 'paid_month';
        _paid_month?.build();

        _$failedField = 'payments';
        _payments?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_obj_rel_insert_input
    extends Gcable_opr_obj_rel_insert_input {
  @override
  final Gcable_opr_insert_input data;
  @override
  final Gcable_opr_on_conflict? on_conflict;

  factory _$Gcable_opr_obj_rel_insert_input(
          [void Function(Gcable_opr_obj_rel_insert_inputBuilder)? updates]) =>
      (new Gcable_opr_obj_rel_insert_inputBuilder()..update(updates))._build();

  _$Gcable_opr_obj_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcable_opr_obj_rel_insert_input', 'data');
  }

  @override
  Gcable_opr_obj_rel_insert_input rebuild(
          void Function(Gcable_opr_obj_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_obj_rel_insert_inputBuilder toBuilder() =>
      new Gcable_opr_obj_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_obj_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_obj_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcable_opr_obj_rel_insert_inputBuilder
    implements
        Builder<Gcable_opr_obj_rel_insert_input,
            Gcable_opr_obj_rel_insert_inputBuilder> {
  _$Gcable_opr_obj_rel_insert_input? _$v;

  Gcable_opr_insert_inputBuilder? _data;
  Gcable_opr_insert_inputBuilder get data =>
      _$this._data ??= new Gcable_opr_insert_inputBuilder();
  set data(Gcable_opr_insert_inputBuilder? data) => _$this._data = data;

  Gcable_opr_on_conflictBuilder? _on_conflict;
  Gcable_opr_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcable_opr_on_conflictBuilder();
  set on_conflict(Gcable_opr_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcable_opr_obj_rel_insert_inputBuilder();

  Gcable_opr_obj_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_obj_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_obj_rel_insert_input;
  }

  @override
  void update(void Function(Gcable_opr_obj_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_obj_rel_insert_input build() => _build();

  _$Gcable_opr_obj_rel_insert_input _build() {
    _$Gcable_opr_obj_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_obj_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_obj_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_on_conflict extends Gcable_opr_on_conflict {
  @override
  final Gcable_opr_constraint constraint;
  @override
  final BuiltList<Gcable_opr_update_column> update_columns;
  @override
  final Gcable_opr_bool_exp? where;

  factory _$Gcable_opr_on_conflict(
          [void Function(Gcable_opr_on_conflictBuilder)? updates]) =>
      (new Gcable_opr_on_conflictBuilder()..update(updates))._build();

  _$Gcable_opr_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcable_opr_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gcable_opr_on_conflict', 'update_columns');
  }

  @override
  Gcable_opr_on_conflict rebuild(
          void Function(Gcable_opr_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_on_conflictBuilder toBuilder() =>
      new Gcable_opr_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcable_opr_on_conflictBuilder
    implements Builder<Gcable_opr_on_conflict, Gcable_opr_on_conflictBuilder> {
  _$Gcable_opr_on_conflict? _$v;

  Gcable_opr_constraint? _constraint;
  Gcable_opr_constraint? get constraint => _$this._constraint;
  set constraint(Gcable_opr_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcable_opr_update_column>? _update_columns;
  ListBuilder<Gcable_opr_update_column> get update_columns =>
      _$this._update_columns ??= new ListBuilder<Gcable_opr_update_column>();
  set update_columns(ListBuilder<Gcable_opr_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcable_opr_bool_expBuilder? _where;
  Gcable_opr_bool_expBuilder get where =>
      _$this._where ??= new Gcable_opr_bool_expBuilder();
  set where(Gcable_opr_bool_expBuilder? where) => _$this._where = where;

  Gcable_opr_on_conflictBuilder();

  Gcable_opr_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_on_conflict;
  }

  @override
  void update(void Function(Gcable_opr_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_on_conflict build() => _build();

  _$Gcable_opr_on_conflict _build() {
    _$Gcable_opr_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gcable_opr_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_order_by extends Gcable_opr_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gcable_customers_table_aggregate_order_by?
      cable_customers_tables_aggregate;
  @override
  final Gorder_by? cable_name;
  @override
  final Gcable_subscriptions_aggregate_order_by? cable_subscriptions_aggregate;
  @override
  final Gcollectors_aggregate_order_by? collectors_aggregate;
  @override
  final Gorder_by? email;
  @override
  final Gorder_by? isActive;
  @override
  final Gnotifications_aggregate_order_by? notifications_aggregate;
  @override
  final Gorder_by? paid_month;
  @override
  final Gorder_by? password;
  @override
  final Gpayments_aggregate_order_by? payments_aggregate;
  @override
  final Gorder_by? phone_no;
  @override
  final Gorder_by? user_id;

  factory _$Gcable_opr_order_by(
          [void Function(Gcable_opr_order_byBuilder)? updates]) =>
      (new Gcable_opr_order_byBuilder()..update(updates))._build();

  _$Gcable_opr_order_by._(
      {this.address,
      this.cable_customers_tables_aggregate,
      this.cable_name,
      this.cable_subscriptions_aggregate,
      this.collectors_aggregate,
      this.email,
      this.isActive,
      this.notifications_aggregate,
      this.paid_month,
      this.password,
      this.payments_aggregate,
      this.phone_no,
      this.user_id})
      : super._();

  @override
  Gcable_opr_order_by rebuild(
          void Function(Gcable_opr_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_order_byBuilder toBuilder() =>
      new Gcable_opr_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_order_by &&
        address == other.address &&
        cable_customers_tables_aggregate ==
            other.cable_customers_tables_aggregate &&
        cable_name == other.cable_name &&
        cable_subscriptions_aggregate == other.cable_subscriptions_aggregate &&
        collectors_aggregate == other.collectors_aggregate &&
        email == other.email &&
        isActive == other.isActive &&
        notifications_aggregate == other.notifications_aggregate &&
        paid_month == other.paid_month &&
        password == other.password &&
        payments_aggregate == other.payments_aggregate &&
        phone_no == other.phone_no &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(0, address.hashCode),
                                                    cable_customers_tables_aggregate
                                                        .hashCode),
                                                cable_name.hashCode),
                                            cable_subscriptions_aggregate
                                                .hashCode),
                                        collectors_aggregate.hashCode),
                                    email.hashCode),
                                isActive.hashCode),
                            notifications_aggregate.hashCode),
                        paid_month.hashCode),
                    password.hashCode),
                payments_aggregate.hashCode),
            phone_no.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_order_by')
          ..add('address', address)
          ..add('cable_customers_tables_aggregate',
              cable_customers_tables_aggregate)
          ..add('cable_name', cable_name)
          ..add('cable_subscriptions_aggregate', cable_subscriptions_aggregate)
          ..add('collectors_aggregate', collectors_aggregate)
          ..add('email', email)
          ..add('isActive', isActive)
          ..add('notifications_aggregate', notifications_aggregate)
          ..add('paid_month', paid_month)
          ..add('password', password)
          ..add('payments_aggregate', payments_aggregate)
          ..add('phone_no', phone_no)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_order_byBuilder
    implements Builder<Gcable_opr_order_by, Gcable_opr_order_byBuilder> {
  _$Gcable_opr_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gcable_customers_table_aggregate_order_byBuilder?
      _cable_customers_tables_aggregate;
  Gcable_customers_table_aggregate_order_byBuilder
      get cable_customers_tables_aggregate =>
          _$this._cable_customers_tables_aggregate ??=
              new Gcable_customers_table_aggregate_order_byBuilder();
  set cable_customers_tables_aggregate(
          Gcable_customers_table_aggregate_order_byBuilder?
              cable_customers_tables_aggregate) =>
      _$this._cable_customers_tables_aggregate =
          cable_customers_tables_aggregate;

  Gorder_by? _cable_name;
  Gorder_by? get cable_name => _$this._cable_name;
  set cable_name(Gorder_by? cable_name) => _$this._cable_name = cable_name;

  Gcable_subscriptions_aggregate_order_byBuilder?
      _cable_subscriptions_aggregate;
  Gcable_subscriptions_aggregate_order_byBuilder
      get cable_subscriptions_aggregate =>
          _$this._cable_subscriptions_aggregate ??=
              new Gcable_subscriptions_aggregate_order_byBuilder();
  set cable_subscriptions_aggregate(
          Gcable_subscriptions_aggregate_order_byBuilder?
              cable_subscriptions_aggregate) =>
      _$this._cable_subscriptions_aggregate = cable_subscriptions_aggregate;

  Gcollectors_aggregate_order_byBuilder? _collectors_aggregate;
  Gcollectors_aggregate_order_byBuilder get collectors_aggregate =>
      _$this._collectors_aggregate ??=
          new Gcollectors_aggregate_order_byBuilder();
  set collectors_aggregate(
          Gcollectors_aggregate_order_byBuilder? collectors_aggregate) =>
      _$this._collectors_aggregate = collectors_aggregate;

  Gorder_by? _email;
  Gorder_by? get email => _$this._email;
  set email(Gorder_by? email) => _$this._email = email;

  Gorder_by? _isActive;
  Gorder_by? get isActive => _$this._isActive;
  set isActive(Gorder_by? isActive) => _$this._isActive = isActive;

  Gnotifications_aggregate_order_byBuilder? _notifications_aggregate;
  Gnotifications_aggregate_order_byBuilder get notifications_aggregate =>
      _$this._notifications_aggregate ??=
          new Gnotifications_aggregate_order_byBuilder();
  set notifications_aggregate(
          Gnotifications_aggregate_order_byBuilder? notifications_aggregate) =>
      _$this._notifications_aggregate = notifications_aggregate;

  Gorder_by? _paid_month;
  Gorder_by? get paid_month => _$this._paid_month;
  set paid_month(Gorder_by? paid_month) => _$this._paid_month = paid_month;

  Gorder_by? _password;
  Gorder_by? get password => _$this._password;
  set password(Gorder_by? password) => _$this._password = password;

  Gpayments_aggregate_order_byBuilder? _payments_aggregate;
  Gpayments_aggregate_order_byBuilder get payments_aggregate =>
      _$this._payments_aggregate ??= new Gpayments_aggregate_order_byBuilder();
  set payments_aggregate(
          Gpayments_aggregate_order_byBuilder? payments_aggregate) =>
      _$this._payments_aggregate = payments_aggregate;

  Gorder_by? _phone_no;
  Gorder_by? get phone_no => _$this._phone_no;
  set phone_no(Gorder_by? phone_no) => _$this._phone_no = phone_no;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gcable_opr_order_byBuilder();

  Gcable_opr_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _cable_customers_tables_aggregate =
          $v.cable_customers_tables_aggregate?.toBuilder();
      _cable_name = $v.cable_name;
      _cable_subscriptions_aggregate =
          $v.cable_subscriptions_aggregate?.toBuilder();
      _collectors_aggregate = $v.collectors_aggregate?.toBuilder();
      _email = $v.email;
      _isActive = $v.isActive;
      _notifications_aggregate = $v.notifications_aggregate?.toBuilder();
      _paid_month = $v.paid_month;
      _password = $v.password;
      _payments_aggregate = $v.payments_aggregate?.toBuilder();
      _phone_no = $v.phone_no;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_order_by;
  }

  @override
  void update(void Function(Gcable_opr_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_order_by build() => _build();

  _$Gcable_opr_order_by _build() {
    _$Gcable_opr_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_order_by._(
              address: address,
              cable_customers_tables_aggregate:
                  _cable_customers_tables_aggregate?.build(),
              cable_name: cable_name,
              cable_subscriptions_aggregate:
                  _cable_subscriptions_aggregate?.build(),
              collectors_aggregate: _collectors_aggregate?.build(),
              email: email,
              isActive: isActive,
              notifications_aggregate: _notifications_aggregate?.build(),
              paid_month: paid_month,
              password: password,
              payments_aggregate: _payments_aggregate?.build(),
              phone_no: phone_no,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_customers_tables_aggregate';
        _cable_customers_tables_aggregate?.build();

        _$failedField = 'cable_subscriptions_aggregate';
        _cable_subscriptions_aggregate?.build();
        _$failedField = 'collectors_aggregate';
        _collectors_aggregate?.build();

        _$failedField = 'notifications_aggregate';
        _notifications_aggregate?.build();

        _$failedField = 'payments_aggregate';
        _payments_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_pk_columns_input extends Gcable_opr_pk_columns_input {
  @override
  final int user_id;

  factory _$Gcable_opr_pk_columns_input(
          [void Function(Gcable_opr_pk_columns_inputBuilder)? updates]) =>
      (new Gcable_opr_pk_columns_inputBuilder()..update(updates))._build();

  _$Gcable_opr_pk_columns_input._({required this.user_id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        user_id, r'Gcable_opr_pk_columns_input', 'user_id');
  }

  @override
  Gcable_opr_pk_columns_input rebuild(
          void Function(Gcable_opr_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_pk_columns_inputBuilder toBuilder() =>
      new Gcable_opr_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_pk_columns_input && user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_pk_columns_input')
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_pk_columns_inputBuilder
    implements
        Builder<Gcable_opr_pk_columns_input,
            Gcable_opr_pk_columns_inputBuilder> {
  _$Gcable_opr_pk_columns_input? _$v;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_opr_pk_columns_inputBuilder();

  Gcable_opr_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_pk_columns_input;
  }

  @override
  void update(void Function(Gcable_opr_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_pk_columns_input build() => _build();

  _$Gcable_opr_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcable_opr_pk_columns_input._(
            user_id: BuiltValueNullFieldError.checkNotNull(
                user_id, r'Gcable_opr_pk_columns_input', 'user_id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_set_input extends Gcable_opr_set_input {
  @override
  final String? address;
  @override
  final String? cable_name;
  @override
  final String? email;
  @override
  final bool? isActive;
  @override
  final Gtimestamptz? paid_month;
  @override
  final String? password;
  @override
  final String? phone_no;
  @override
  final int? user_id;

  factory _$Gcable_opr_set_input(
          [void Function(Gcable_opr_set_inputBuilder)? updates]) =>
      (new Gcable_opr_set_inputBuilder()..update(updates))._build();

  _$Gcable_opr_set_input._(
      {this.address,
      this.cable_name,
      this.email,
      this.isActive,
      this.paid_month,
      this.password,
      this.phone_no,
      this.user_id})
      : super._();

  @override
  Gcable_opr_set_input rebuild(
          void Function(Gcable_opr_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_set_inputBuilder toBuilder() =>
      new Gcable_opr_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_set_input &&
        address == other.address &&
        cable_name == other.cable_name &&
        email == other.email &&
        isActive == other.isActive &&
        paid_month == other.paid_month &&
        password == other.password &&
        phone_no == other.phone_no &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, address.hashCode), cable_name.hashCode),
                            email.hashCode),
                        isActive.hashCode),
                    paid_month.hashCode),
                password.hashCode),
            phone_no.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_set_input')
          ..add('address', address)
          ..add('cable_name', cable_name)
          ..add('email', email)
          ..add('isActive', isActive)
          ..add('paid_month', paid_month)
          ..add('password', password)
          ..add('phone_no', phone_no)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_set_inputBuilder
    implements Builder<Gcable_opr_set_input, Gcable_opr_set_inputBuilder> {
  _$Gcable_opr_set_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  String? _cable_name;
  String? get cable_name => _$this._cable_name;
  set cable_name(String? cable_name) => _$this._cable_name = cable_name;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  GtimestamptzBuilder? _paid_month;
  GtimestamptzBuilder get paid_month =>
      _$this._paid_month ??= new GtimestamptzBuilder();
  set paid_month(GtimestamptzBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  String? _phone_no;
  String? get phone_no => _$this._phone_no;
  set phone_no(String? phone_no) => _$this._phone_no = phone_no;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_opr_set_inputBuilder();

  Gcable_opr_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _cable_name = $v.cable_name;
      _email = $v.email;
      _isActive = $v.isActive;
      _paid_month = $v.paid_month?.toBuilder();
      _password = $v.password;
      _phone_no = $v.phone_no;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_set_input;
  }

  @override
  void update(void Function(Gcable_opr_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_set_input build() => _build();

  _$Gcable_opr_set_input _build() {
    _$Gcable_opr_set_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_set_input._(
              address: address,
              cable_name: cable_name,
              email: email,
              isActive: isActive,
              paid_month: _paid_month?.build(),
              password: password,
              phone_no: phone_no,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'paid_month';
        _paid_month?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_set_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_stream_cursor_input extends Gcable_opr_stream_cursor_input {
  @override
  final Gcable_opr_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcable_opr_stream_cursor_input(
          [void Function(Gcable_opr_stream_cursor_inputBuilder)? updates]) =>
      (new Gcable_opr_stream_cursor_inputBuilder()..update(updates))._build();

  _$Gcable_opr_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gcable_opr_stream_cursor_input', 'initial_value');
  }

  @override
  Gcable_opr_stream_cursor_input rebuild(
          void Function(Gcable_opr_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_stream_cursor_inputBuilder toBuilder() =>
      new Gcable_opr_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcable_opr_stream_cursor_inputBuilder
    implements
        Builder<Gcable_opr_stream_cursor_input,
            Gcable_opr_stream_cursor_inputBuilder> {
  _$Gcable_opr_stream_cursor_input? _$v;

  Gcable_opr_stream_cursor_value_inputBuilder? _initial_value;
  Gcable_opr_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcable_opr_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcable_opr_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcable_opr_stream_cursor_inputBuilder();

  Gcable_opr_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_stream_cursor_input;
  }

  @override
  void update(void Function(Gcable_opr_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_stream_cursor_input build() => _build();

  _$Gcable_opr_stream_cursor_input _build() {
    _$Gcable_opr_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_stream_cursor_value_input
    extends Gcable_opr_stream_cursor_value_input {
  @override
  final String? address;
  @override
  final String? cable_name;
  @override
  final String? email;
  @override
  final bool? isActive;
  @override
  final Gtimestamptz? paid_month;
  @override
  final String? password;
  @override
  final String? phone_no;
  @override
  final int? user_id;

  factory _$Gcable_opr_stream_cursor_value_input(
          [void Function(Gcable_opr_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcable_opr_stream_cursor_value_inputBuilder()..update(updates))
          ._build();

  _$Gcable_opr_stream_cursor_value_input._(
      {this.address,
      this.cable_name,
      this.email,
      this.isActive,
      this.paid_month,
      this.password,
      this.phone_no,
      this.user_id})
      : super._();

  @override
  Gcable_opr_stream_cursor_value_input rebuild(
          void Function(Gcable_opr_stream_cursor_value_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcable_opr_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_stream_cursor_value_input &&
        address == other.address &&
        cable_name == other.cable_name &&
        email == other.email &&
        isActive == other.isActive &&
        paid_month == other.paid_month &&
        password == other.password &&
        phone_no == other.phone_no &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, address.hashCode), cable_name.hashCode),
                            email.hashCode),
                        isActive.hashCode),
                    paid_month.hashCode),
                password.hashCode),
            phone_no.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_stream_cursor_value_input')
          ..add('address', address)
          ..add('cable_name', cable_name)
          ..add('email', email)
          ..add('isActive', isActive)
          ..add('paid_month', paid_month)
          ..add('password', password)
          ..add('phone_no', phone_no)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gcable_opr_stream_cursor_value_inputBuilder
    implements
        Builder<Gcable_opr_stream_cursor_value_input,
            Gcable_opr_stream_cursor_value_inputBuilder> {
  _$Gcable_opr_stream_cursor_value_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  String? _cable_name;
  String? get cable_name => _$this._cable_name;
  set cable_name(String? cable_name) => _$this._cable_name = cable_name;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  GtimestamptzBuilder? _paid_month;
  GtimestamptzBuilder get paid_month =>
      _$this._paid_month ??= new GtimestamptzBuilder();
  set paid_month(GtimestamptzBuilder? paid_month) =>
      _$this._paid_month = paid_month;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  String? _phone_no;
  String? get phone_no => _$this._phone_no;
  set phone_no(String? phone_no) => _$this._phone_no = phone_no;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gcable_opr_stream_cursor_value_inputBuilder();

  Gcable_opr_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _cable_name = $v.cable_name;
      _email = $v.email;
      _isActive = $v.isActive;
      _paid_month = $v.paid_month?.toBuilder();
      _password = $v.password;
      _phone_no = $v.phone_no;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcable_opr_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_stream_cursor_value_input build() => _build();

  _$Gcable_opr_stream_cursor_value_input _build() {
    _$Gcable_opr_stream_cursor_value_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_stream_cursor_value_input._(
              address: address,
              cable_name: cable_name,
              email: email,
              isActive: isActive,
              paid_month: _paid_month?.build(),
              password: password,
              phone_no: phone_no,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'paid_month';
        _paid_month?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_stream_cursor_value_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_opr_updates extends Gcable_opr_updates {
  @override
  final Gcable_opr_inc_input? G_inc;
  @override
  final Gcable_opr_set_input? G_set;
  @override
  final Gcable_opr_bool_exp where;

  factory _$Gcable_opr_updates(
          [void Function(Gcable_opr_updatesBuilder)? updates]) =>
      (new Gcable_opr_updatesBuilder()..update(updates))._build();

  _$Gcable_opr_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gcable_opr_updates', 'where');
  }

  @override
  Gcable_opr_updates rebuild(
          void Function(Gcable_opr_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_opr_updatesBuilder toBuilder() =>
      new Gcable_opr_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_opr_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_opr_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcable_opr_updatesBuilder
    implements Builder<Gcable_opr_updates, Gcable_opr_updatesBuilder> {
  _$Gcable_opr_updates? _$v;

  Gcable_opr_inc_inputBuilder? _G_inc;
  Gcable_opr_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcable_opr_inc_inputBuilder();
  set G_inc(Gcable_opr_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gcable_opr_set_inputBuilder? _G_set;
  Gcable_opr_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcable_opr_set_inputBuilder();
  set G_set(Gcable_opr_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gcable_opr_bool_expBuilder? _where;
  Gcable_opr_bool_expBuilder get where =>
      _$this._where ??= new Gcable_opr_bool_expBuilder();
  set where(Gcable_opr_bool_expBuilder? where) => _$this._where = where;

  Gcable_opr_updatesBuilder();

  Gcable_opr_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_opr_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_opr_updates;
  }

  @override
  void update(void Function(Gcable_opr_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_opr_updates build() => _build();

  _$Gcable_opr_updates _build() {
    _$Gcable_opr_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcable_opr_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_opr_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_bool_exp extends Gcable_plan_bool_exp {
  @override
  final BuiltList<Gcable_plan_bool_exp>? G_and;
  @override
  final Gcable_plan_bool_exp? G_not;
  @override
  final BuiltList<Gcable_plan_bool_exp>? G_or;
  @override
  final GInt_comparison_exp? cable_id;
  @override
  final GString_comparison_exp? desc;
  @override
  final GInt_comparison_exp? fees;
  @override
  final GString_comparison_exp? name;
  @override
  final GInt_comparison_exp? plan_id;

  factory _$Gcable_plan_bool_exp(
          [void Function(Gcable_plan_bool_expBuilder)? updates]) =>
      (new Gcable_plan_bool_expBuilder()..update(updates))._build();

  _$Gcable_plan_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.cable_id,
      this.desc,
      this.fees,
      this.name,
      this.plan_id})
      : super._();

  @override
  Gcable_plan_bool_exp rebuild(
          void Function(Gcable_plan_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_bool_expBuilder toBuilder() =>
      new Gcable_plan_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        cable_id == other.cable_id &&
        desc == other.desc &&
        fees == other.fees &&
        name == other.name &&
        plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, G_and.hashCode), G_not.hashCode),
                            G_or.hashCode),
                        cable_id.hashCode),
                    desc.hashCode),
                fees.hashCode),
            name.hashCode),
        plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('cable_id', cable_id)
          ..add('desc', desc)
          ..add('fees', fees)
          ..add('name', name)
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_bool_expBuilder
    implements Builder<Gcable_plan_bool_exp, Gcable_plan_bool_expBuilder> {
  _$Gcable_plan_bool_exp? _$v;

  ListBuilder<Gcable_plan_bool_exp>? _G_and;
  ListBuilder<Gcable_plan_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcable_plan_bool_exp>();
  set G_and(ListBuilder<Gcable_plan_bool_exp>? G_and) => _$this._G_and = G_and;

  Gcable_plan_bool_expBuilder? _G_not;
  Gcable_plan_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcable_plan_bool_expBuilder();
  set G_not(Gcable_plan_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gcable_plan_bool_exp>? _G_or;
  ListBuilder<Gcable_plan_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcable_plan_bool_exp>();
  set G_or(ListBuilder<Gcable_plan_bool_exp>? G_or) => _$this._G_or = G_or;

  GInt_comparison_expBuilder? _cable_id;
  GInt_comparison_expBuilder get cable_id =>
      _$this._cable_id ??= new GInt_comparison_expBuilder();
  set cable_id(GInt_comparison_expBuilder? cable_id) =>
      _$this._cable_id = cable_id;

  GString_comparison_expBuilder? _desc;
  GString_comparison_expBuilder get desc =>
      _$this._desc ??= new GString_comparison_expBuilder();
  set desc(GString_comparison_expBuilder? desc) => _$this._desc = desc;

  GInt_comparison_expBuilder? _fees;
  GInt_comparison_expBuilder get fees =>
      _$this._fees ??= new GInt_comparison_expBuilder();
  set fees(GInt_comparison_expBuilder? fees) => _$this._fees = fees;

  GString_comparison_expBuilder? _name;
  GString_comparison_expBuilder get name =>
      _$this._name ??= new GString_comparison_expBuilder();
  set name(GString_comparison_expBuilder? name) => _$this._name = name;

  GInt_comparison_expBuilder? _plan_id;
  GInt_comparison_expBuilder get plan_id =>
      _$this._plan_id ??= new GInt_comparison_expBuilder();
  set plan_id(GInt_comparison_expBuilder? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_bool_expBuilder();

  Gcable_plan_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _cable_id = $v.cable_id?.toBuilder();
      _desc = $v.desc?.toBuilder();
      _fees = $v.fees?.toBuilder();
      _name = $v.name?.toBuilder();
      _plan_id = $v.plan_id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_bool_exp;
  }

  @override
  void update(void Function(Gcable_plan_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_bool_exp build() => _build();

  _$Gcable_plan_bool_exp _build() {
    _$Gcable_plan_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_plan_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              cable_id: _cable_id?.build(),
              desc: _desc?.build(),
              fees: _fees?.build(),
              name: _name?.build(),
              plan_id: _plan_id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'cable_id';
        _cable_id?.build();
        _$failedField = 'desc';
        _desc?.build();
        _$failedField = 'fees';
        _fees?.build();
        _$failedField = 'name';
        _name?.build();
        _$failedField = 'plan_id';
        _plan_id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_plan_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_inc_input extends Gcable_plan_inc_input {
  @override
  final int? cable_id;
  @override
  final int? fees;
  @override
  final int? plan_id;

  factory _$Gcable_plan_inc_input(
          [void Function(Gcable_plan_inc_inputBuilder)? updates]) =>
      (new Gcable_plan_inc_inputBuilder()..update(updates))._build();

  _$Gcable_plan_inc_input._({this.cable_id, this.fees, this.plan_id})
      : super._();

  @override
  Gcable_plan_inc_input rebuild(
          void Function(Gcable_plan_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_inc_inputBuilder toBuilder() =>
      new Gcable_plan_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_inc_input &&
        cable_id == other.cable_id &&
        fees == other.fees &&
        plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), fees.hashCode), plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_inc_input')
          ..add('cable_id', cable_id)
          ..add('fees', fees)
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_inc_inputBuilder
    implements Builder<Gcable_plan_inc_input, Gcable_plan_inc_inputBuilder> {
  _$Gcable_plan_inc_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  int? _fees;
  int? get fees => _$this._fees;
  set fees(int? fees) => _$this._fees = fees;

  int? _plan_id;
  int? get plan_id => _$this._plan_id;
  set plan_id(int? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_inc_inputBuilder();

  Gcable_plan_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fees = $v.fees;
      _plan_id = $v.plan_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_inc_input;
  }

  @override
  void update(void Function(Gcable_plan_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_inc_input build() => _build();

  _$Gcable_plan_inc_input _build() {
    final _$result = _$v ??
        new _$Gcable_plan_inc_input._(
            cable_id: cable_id, fees: fees, plan_id: plan_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_insert_input extends Gcable_plan_insert_input {
  @override
  final int? cable_id;
  @override
  final String? desc;
  @override
  final int? fees;
  @override
  final String? name;
  @override
  final int? plan_id;

  factory _$Gcable_plan_insert_input(
          [void Function(Gcable_plan_insert_inputBuilder)? updates]) =>
      (new Gcable_plan_insert_inputBuilder()..update(updates))._build();

  _$Gcable_plan_insert_input._(
      {this.cable_id, this.desc, this.fees, this.name, this.plan_id})
      : super._();

  @override
  Gcable_plan_insert_input rebuild(
          void Function(Gcable_plan_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_insert_inputBuilder toBuilder() =>
      new Gcable_plan_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_insert_input &&
        cable_id == other.cable_id &&
        desc == other.desc &&
        fees == other.fees &&
        name == other.name &&
        plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, cable_id.hashCode), desc.hashCode), fees.hashCode),
            name.hashCode),
        plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_insert_input')
          ..add('cable_id', cable_id)
          ..add('desc', desc)
          ..add('fees', fees)
          ..add('name', name)
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_insert_inputBuilder
    implements
        Builder<Gcable_plan_insert_input, Gcable_plan_insert_inputBuilder> {
  _$Gcable_plan_insert_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  String? _desc;
  String? get desc => _$this._desc;
  set desc(String? desc) => _$this._desc = desc;

  int? _fees;
  int? get fees => _$this._fees;
  set fees(int? fees) => _$this._fees = fees;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  int? _plan_id;
  int? get plan_id => _$this._plan_id;
  set plan_id(int? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_insert_inputBuilder();

  Gcable_plan_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _desc = $v.desc;
      _fees = $v.fees;
      _name = $v.name;
      _plan_id = $v.plan_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_insert_input;
  }

  @override
  void update(void Function(Gcable_plan_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_insert_input build() => _build();

  _$Gcable_plan_insert_input _build() {
    final _$result = _$v ??
        new _$Gcable_plan_insert_input._(
            cable_id: cable_id,
            desc: desc,
            fees: fees,
            name: name,
            plan_id: plan_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_on_conflict extends Gcable_plan_on_conflict {
  @override
  final Gcable_plan_constraint constraint;
  @override
  final BuiltList<Gcable_plan_update_column> update_columns;
  @override
  final Gcable_plan_bool_exp? where;

  factory _$Gcable_plan_on_conflict(
          [void Function(Gcable_plan_on_conflictBuilder)? updates]) =>
      (new Gcable_plan_on_conflictBuilder()..update(updates))._build();

  _$Gcable_plan_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcable_plan_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gcable_plan_on_conflict', 'update_columns');
  }

  @override
  Gcable_plan_on_conflict rebuild(
          void Function(Gcable_plan_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_on_conflictBuilder toBuilder() =>
      new Gcable_plan_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcable_plan_on_conflictBuilder
    implements
        Builder<Gcable_plan_on_conflict, Gcable_plan_on_conflictBuilder> {
  _$Gcable_plan_on_conflict? _$v;

  Gcable_plan_constraint? _constraint;
  Gcable_plan_constraint? get constraint => _$this._constraint;
  set constraint(Gcable_plan_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcable_plan_update_column>? _update_columns;
  ListBuilder<Gcable_plan_update_column> get update_columns =>
      _$this._update_columns ??= new ListBuilder<Gcable_plan_update_column>();
  set update_columns(ListBuilder<Gcable_plan_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcable_plan_bool_expBuilder? _where;
  Gcable_plan_bool_expBuilder get where =>
      _$this._where ??= new Gcable_plan_bool_expBuilder();
  set where(Gcable_plan_bool_expBuilder? where) => _$this._where = where;

  Gcable_plan_on_conflictBuilder();

  Gcable_plan_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_on_conflict;
  }

  @override
  void update(void Function(Gcable_plan_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_on_conflict build() => _build();

  _$Gcable_plan_on_conflict _build() {
    _$Gcable_plan_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcable_plan_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gcable_plan_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_plan_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_order_by extends Gcable_plan_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? desc;
  @override
  final Gorder_by? fees;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? plan_id;

  factory _$Gcable_plan_order_by(
          [void Function(Gcable_plan_order_byBuilder)? updates]) =>
      (new Gcable_plan_order_byBuilder()..update(updates))._build();

  _$Gcable_plan_order_by._(
      {this.cable_id, this.desc, this.fees, this.name, this.plan_id})
      : super._();

  @override
  Gcable_plan_order_by rebuild(
          void Function(Gcable_plan_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_order_byBuilder toBuilder() =>
      new Gcable_plan_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_order_by &&
        cable_id == other.cable_id &&
        desc == other.desc &&
        fees == other.fees &&
        name == other.name &&
        plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, cable_id.hashCode), desc.hashCode), fees.hashCode),
            name.hashCode),
        plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_order_by')
          ..add('cable_id', cable_id)
          ..add('desc', desc)
          ..add('fees', fees)
          ..add('name', name)
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_order_byBuilder
    implements Builder<Gcable_plan_order_by, Gcable_plan_order_byBuilder> {
  _$Gcable_plan_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _desc;
  Gorder_by? get desc => _$this._desc;
  set desc(Gorder_by? desc) => _$this._desc = desc;

  Gorder_by? _fees;
  Gorder_by? get fees => _$this._fees;
  set fees(Gorder_by? fees) => _$this._fees = fees;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _plan_id;
  Gorder_by? get plan_id => _$this._plan_id;
  set plan_id(Gorder_by? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_order_byBuilder();

  Gcable_plan_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _desc = $v.desc;
      _fees = $v.fees;
      _name = $v.name;
      _plan_id = $v.plan_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_order_by;
  }

  @override
  void update(void Function(Gcable_plan_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_order_by build() => _build();

  _$Gcable_plan_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_plan_order_by._(
            cable_id: cable_id,
            desc: desc,
            fees: fees,
            name: name,
            plan_id: plan_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_pk_columns_input extends Gcable_plan_pk_columns_input {
  @override
  final int plan_id;

  factory _$Gcable_plan_pk_columns_input(
          [void Function(Gcable_plan_pk_columns_inputBuilder)? updates]) =>
      (new Gcable_plan_pk_columns_inputBuilder()..update(updates))._build();

  _$Gcable_plan_pk_columns_input._({required this.plan_id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        plan_id, r'Gcable_plan_pk_columns_input', 'plan_id');
  }

  @override
  Gcable_plan_pk_columns_input rebuild(
          void Function(Gcable_plan_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_pk_columns_inputBuilder toBuilder() =>
      new Gcable_plan_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_pk_columns_input && plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_pk_columns_input')
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_pk_columns_inputBuilder
    implements
        Builder<Gcable_plan_pk_columns_input,
            Gcable_plan_pk_columns_inputBuilder> {
  _$Gcable_plan_pk_columns_input? _$v;

  int? _plan_id;
  int? get plan_id => _$this._plan_id;
  set plan_id(int? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_pk_columns_inputBuilder();

  Gcable_plan_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _plan_id = $v.plan_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_pk_columns_input;
  }

  @override
  void update(void Function(Gcable_plan_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_pk_columns_input build() => _build();

  _$Gcable_plan_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcable_plan_pk_columns_input._(
            plan_id: BuiltValueNullFieldError.checkNotNull(
                plan_id, r'Gcable_plan_pk_columns_input', 'plan_id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_set_input extends Gcable_plan_set_input {
  @override
  final int? cable_id;
  @override
  final String? desc;
  @override
  final int? fees;
  @override
  final String? name;
  @override
  final int? plan_id;

  factory _$Gcable_plan_set_input(
          [void Function(Gcable_plan_set_inputBuilder)? updates]) =>
      (new Gcable_plan_set_inputBuilder()..update(updates))._build();

  _$Gcable_plan_set_input._(
      {this.cable_id, this.desc, this.fees, this.name, this.plan_id})
      : super._();

  @override
  Gcable_plan_set_input rebuild(
          void Function(Gcable_plan_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_set_inputBuilder toBuilder() =>
      new Gcable_plan_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_set_input &&
        cable_id == other.cable_id &&
        desc == other.desc &&
        fees == other.fees &&
        name == other.name &&
        plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, cable_id.hashCode), desc.hashCode), fees.hashCode),
            name.hashCode),
        plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_set_input')
          ..add('cable_id', cable_id)
          ..add('desc', desc)
          ..add('fees', fees)
          ..add('name', name)
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_set_inputBuilder
    implements Builder<Gcable_plan_set_input, Gcable_plan_set_inputBuilder> {
  _$Gcable_plan_set_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  String? _desc;
  String? get desc => _$this._desc;
  set desc(String? desc) => _$this._desc = desc;

  int? _fees;
  int? get fees => _$this._fees;
  set fees(int? fees) => _$this._fees = fees;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  int? _plan_id;
  int? get plan_id => _$this._plan_id;
  set plan_id(int? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_set_inputBuilder();

  Gcable_plan_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _desc = $v.desc;
      _fees = $v.fees;
      _name = $v.name;
      _plan_id = $v.plan_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_set_input;
  }

  @override
  void update(void Function(Gcable_plan_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_set_input build() => _build();

  _$Gcable_plan_set_input _build() {
    final _$result = _$v ??
        new _$Gcable_plan_set_input._(
            cable_id: cable_id,
            desc: desc,
            fees: fees,
            name: name,
            plan_id: plan_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_stream_cursor_input
    extends Gcable_plan_stream_cursor_input {
  @override
  final Gcable_plan_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcable_plan_stream_cursor_input(
          [void Function(Gcable_plan_stream_cursor_inputBuilder)? updates]) =>
      (new Gcable_plan_stream_cursor_inputBuilder()..update(updates))._build();

  _$Gcable_plan_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gcable_plan_stream_cursor_input', 'initial_value');
  }

  @override
  Gcable_plan_stream_cursor_input rebuild(
          void Function(Gcable_plan_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_stream_cursor_inputBuilder toBuilder() =>
      new Gcable_plan_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcable_plan_stream_cursor_inputBuilder
    implements
        Builder<Gcable_plan_stream_cursor_input,
            Gcable_plan_stream_cursor_inputBuilder> {
  _$Gcable_plan_stream_cursor_input? _$v;

  Gcable_plan_stream_cursor_value_inputBuilder? _initial_value;
  Gcable_plan_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcable_plan_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcable_plan_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcable_plan_stream_cursor_inputBuilder();

  Gcable_plan_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_stream_cursor_input;
  }

  @override
  void update(void Function(Gcable_plan_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_stream_cursor_input build() => _build();

  _$Gcable_plan_stream_cursor_input _build() {
    _$Gcable_plan_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_plan_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_plan_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_stream_cursor_value_input
    extends Gcable_plan_stream_cursor_value_input {
  @override
  final int? cable_id;
  @override
  final String? desc;
  @override
  final int? fees;
  @override
  final String? name;
  @override
  final int? plan_id;

  factory _$Gcable_plan_stream_cursor_value_input(
          [void Function(Gcable_plan_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcable_plan_stream_cursor_value_inputBuilder()..update(updates))
          ._build();

  _$Gcable_plan_stream_cursor_value_input._(
      {this.cable_id, this.desc, this.fees, this.name, this.plan_id})
      : super._();

  @override
  Gcable_plan_stream_cursor_value_input rebuild(
          void Function(Gcable_plan_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcable_plan_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_stream_cursor_value_input &&
        cable_id == other.cable_id &&
        desc == other.desc &&
        fees == other.fees &&
        name == other.name &&
        plan_id == other.plan_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc($jc(0, cable_id.hashCode), desc.hashCode), fees.hashCode),
            name.hashCode),
        plan_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_plan_stream_cursor_value_input')
          ..add('cable_id', cable_id)
          ..add('desc', desc)
          ..add('fees', fees)
          ..add('name', name)
          ..add('plan_id', plan_id))
        .toString();
  }
}

class Gcable_plan_stream_cursor_value_inputBuilder
    implements
        Builder<Gcable_plan_stream_cursor_value_input,
            Gcable_plan_stream_cursor_value_inputBuilder> {
  _$Gcable_plan_stream_cursor_value_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  String? _desc;
  String? get desc => _$this._desc;
  set desc(String? desc) => _$this._desc = desc;

  int? _fees;
  int? get fees => _$this._fees;
  set fees(int? fees) => _$this._fees = fees;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  int? _plan_id;
  int? get plan_id => _$this._plan_id;
  set plan_id(int? plan_id) => _$this._plan_id = plan_id;

  Gcable_plan_stream_cursor_value_inputBuilder();

  Gcable_plan_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _desc = $v.desc;
      _fees = $v.fees;
      _name = $v.name;
      _plan_id = $v.plan_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcable_plan_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_stream_cursor_value_input build() => _build();

  _$Gcable_plan_stream_cursor_value_input _build() {
    final _$result = _$v ??
        new _$Gcable_plan_stream_cursor_value_input._(
            cable_id: cable_id,
            desc: desc,
            fees: fees,
            name: name,
            plan_id: plan_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_plan_updates extends Gcable_plan_updates {
  @override
  final Gcable_plan_inc_input? G_inc;
  @override
  final Gcable_plan_set_input? G_set;
  @override
  final Gcable_plan_bool_exp where;

  factory _$Gcable_plan_updates(
          [void Function(Gcable_plan_updatesBuilder)? updates]) =>
      (new Gcable_plan_updatesBuilder()..update(updates))._build();

  _$Gcable_plan_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gcable_plan_updates', 'where');
  }

  @override
  Gcable_plan_updates rebuild(
          void Function(Gcable_plan_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_plan_updatesBuilder toBuilder() =>
      new Gcable_plan_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_plan_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_plan_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcable_plan_updatesBuilder
    implements Builder<Gcable_plan_updates, Gcable_plan_updatesBuilder> {
  _$Gcable_plan_updates? _$v;

  Gcable_plan_inc_inputBuilder? _G_inc;
  Gcable_plan_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcable_plan_inc_inputBuilder();
  set G_inc(Gcable_plan_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gcable_plan_set_inputBuilder? _G_set;
  Gcable_plan_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcable_plan_set_inputBuilder();
  set G_set(Gcable_plan_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gcable_plan_bool_expBuilder? _where;
  Gcable_plan_bool_expBuilder get where =>
      _$this._where ??= new Gcable_plan_bool_expBuilder();
  set where(Gcable_plan_bool_expBuilder? where) => _$this._where = where;

  Gcable_plan_updatesBuilder();

  Gcable_plan_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_plan_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_plan_updates;
  }

  @override
  void update(void Function(Gcable_plan_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_plan_updates build() => _build();

  _$Gcable_plan_updates _build() {
    _$Gcable_plan_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcable_plan_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_plan_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_bool_exp
    extends Gcable_subscription_fee_bool_exp {
  @override
  final BuiltList<Gcable_subscription_fee_bool_exp>? G_and;
  @override
  final Gcable_subscription_fee_bool_exp? G_not;
  @override
  final BuiltList<Gcable_subscription_fee_bool_exp>? G_or;
  @override
  final Gcable_subscriptions_bool_exp? cable_subscriptions;
  @override
  final Gcable_subscriptions_aggregate_bool_exp? cable_subscriptions_aggregate;
  @override
  final Gdate_comparison_exp? date;
  @override
  final GInt_comparison_exp? fee;
  @override
  final GInt_comparison_exp? id;

  factory _$Gcable_subscription_fee_bool_exp(
          [void Function(Gcable_subscription_fee_bool_expBuilder)? updates]) =>
      (new Gcable_subscription_fee_bool_expBuilder()..update(updates))._build();

  _$Gcable_subscription_fee_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.cable_subscriptions,
      this.cable_subscriptions_aggregate,
      this.date,
      this.fee,
      this.id})
      : super._();

  @override
  Gcable_subscription_fee_bool_exp rebuild(
          void Function(Gcable_subscription_fee_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_bool_expBuilder toBuilder() =>
      new Gcable_subscription_fee_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        cable_subscriptions == other.cable_subscriptions &&
        cable_subscriptions_aggregate == other.cable_subscriptions_aggregate &&
        date == other.date &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, G_and.hashCode), G_not.hashCode),
                            G_or.hashCode),
                        cable_subscriptions.hashCode),
                    cable_subscriptions_aggregate.hashCode),
                date.hashCode),
            fee.hashCode),
        id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('cable_subscriptions', cable_subscriptions)
          ..add('cable_subscriptions_aggregate', cable_subscriptions_aggregate)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_bool_expBuilder
    implements
        Builder<Gcable_subscription_fee_bool_exp,
            Gcable_subscription_fee_bool_expBuilder> {
  _$Gcable_subscription_fee_bool_exp? _$v;

  ListBuilder<Gcable_subscription_fee_bool_exp>? _G_and;
  ListBuilder<Gcable_subscription_fee_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcable_subscription_fee_bool_exp>();
  set G_and(ListBuilder<Gcable_subscription_fee_bool_exp>? G_and) =>
      _$this._G_and = G_and;

  Gcable_subscription_fee_bool_expBuilder? _G_not;
  Gcable_subscription_fee_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcable_subscription_fee_bool_expBuilder();
  set G_not(Gcable_subscription_fee_bool_expBuilder? G_not) =>
      _$this._G_not = G_not;

  ListBuilder<Gcable_subscription_fee_bool_exp>? _G_or;
  ListBuilder<Gcable_subscription_fee_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcable_subscription_fee_bool_exp>();
  set G_or(ListBuilder<Gcable_subscription_fee_bool_exp>? G_or) =>
      _$this._G_or = G_or;

  Gcable_subscriptions_bool_expBuilder? _cable_subscriptions;
  Gcable_subscriptions_bool_expBuilder get cable_subscriptions =>
      _$this._cable_subscriptions ??=
          new Gcable_subscriptions_bool_expBuilder();
  set cable_subscriptions(
          Gcable_subscriptions_bool_expBuilder? cable_subscriptions) =>
      _$this._cable_subscriptions = cable_subscriptions;

  Gcable_subscriptions_aggregate_bool_expBuilder?
      _cable_subscriptions_aggregate;
  Gcable_subscriptions_aggregate_bool_expBuilder
      get cable_subscriptions_aggregate =>
          _$this._cable_subscriptions_aggregate ??=
              new Gcable_subscriptions_aggregate_bool_expBuilder();
  set cable_subscriptions_aggregate(
          Gcable_subscriptions_aggregate_bool_expBuilder?
              cable_subscriptions_aggregate) =>
      _$this._cable_subscriptions_aggregate = cable_subscriptions_aggregate;

  Gdate_comparison_expBuilder? _date;
  Gdate_comparison_expBuilder get date =>
      _$this._date ??= new Gdate_comparison_expBuilder();
  set date(Gdate_comparison_expBuilder? date) => _$this._date = date;

  GInt_comparison_expBuilder? _fee;
  GInt_comparison_expBuilder get fee =>
      _$this._fee ??= new GInt_comparison_expBuilder();
  set fee(GInt_comparison_expBuilder? fee) => _$this._fee = fee;

  GInt_comparison_expBuilder? _id;
  GInt_comparison_expBuilder get id =>
      _$this._id ??= new GInt_comparison_expBuilder();
  set id(GInt_comparison_expBuilder? id) => _$this._id = id;

  Gcable_subscription_fee_bool_expBuilder();

  Gcable_subscription_fee_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _cable_subscriptions = $v.cable_subscriptions?.toBuilder();
      _cable_subscriptions_aggregate =
          $v.cable_subscriptions_aggregate?.toBuilder();
      _date = $v.date?.toBuilder();
      _fee = $v.fee?.toBuilder();
      _id = $v.id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_bool_exp;
  }

  @override
  void update(void Function(Gcable_subscription_fee_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_bool_exp build() => _build();

  _$Gcable_subscription_fee_bool_exp _build() {
    _$Gcable_subscription_fee_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              cable_subscriptions: _cable_subscriptions?.build(),
              cable_subscriptions_aggregate:
                  _cable_subscriptions_aggregate?.build(),
              date: _date?.build(),
              fee: _fee?.build(),
              id: _id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'cable_subscriptions';
        _cable_subscriptions?.build();
        _$failedField = 'cable_subscriptions_aggregate';
        _cable_subscriptions_aggregate?.build();
        _$failedField = 'date';
        _date?.build();
        _$failedField = 'fee';
        _fee?.build();
        _$failedField = 'id';
        _id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_inc_input
    extends Gcable_subscription_fee_inc_input {
  @override
  final int? fee;
  @override
  final int? id;

  factory _$Gcable_subscription_fee_inc_input(
          [void Function(Gcable_subscription_fee_inc_inputBuilder)? updates]) =>
      (new Gcable_subscription_fee_inc_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscription_fee_inc_input._({this.fee, this.id}) : super._();

  @override
  Gcable_subscription_fee_inc_input rebuild(
          void Function(Gcable_subscription_fee_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_inc_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_inc_input &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_inc_input')
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_inc_inputBuilder
    implements
        Builder<Gcable_subscription_fee_inc_input,
            Gcable_subscription_fee_inc_inputBuilder> {
  _$Gcable_subscription_fee_inc_input? _$v;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscription_fee_inc_inputBuilder();

  Gcable_subscription_fee_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_inc_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_inc_input build() => _build();

  _$Gcable_subscription_fee_inc_input _build() {
    final _$result =
        _$v ?? new _$Gcable_subscription_fee_inc_input._(fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_insert_input
    extends Gcable_subscription_fee_insert_input {
  @override
  final Gcable_subscriptions_arr_rel_insert_input? cable_subscriptions;
  @override
  final Gdate? date;
  @override
  final int? fee;
  @override
  final int? id;

  factory _$Gcable_subscription_fee_insert_input(
          [void Function(Gcable_subscription_fee_insert_inputBuilder)?
              updates]) =>
      (new Gcable_subscription_fee_insert_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscription_fee_insert_input._(
      {this.cable_subscriptions, this.date, this.fee, this.id})
      : super._();

  @override
  Gcable_subscription_fee_insert_input rebuild(
          void Function(Gcable_subscription_fee_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_insert_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_insert_input &&
        cable_subscriptions == other.cable_subscriptions &&
        date == other.date &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, cable_subscriptions.hashCode), date.hashCode),
            fee.hashCode),
        id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_insert_input')
          ..add('cable_subscriptions', cable_subscriptions)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_insert_inputBuilder
    implements
        Builder<Gcable_subscription_fee_insert_input,
            Gcable_subscription_fee_insert_inputBuilder> {
  _$Gcable_subscription_fee_insert_input? _$v;

  Gcable_subscriptions_arr_rel_insert_inputBuilder? _cable_subscriptions;
  Gcable_subscriptions_arr_rel_insert_inputBuilder get cable_subscriptions =>
      _$this._cable_subscriptions ??=
          new Gcable_subscriptions_arr_rel_insert_inputBuilder();
  set cable_subscriptions(
          Gcable_subscriptions_arr_rel_insert_inputBuilder?
              cable_subscriptions) =>
      _$this._cable_subscriptions = cable_subscriptions;

  GdateBuilder? _date;
  GdateBuilder get date => _$this._date ??= new GdateBuilder();
  set date(GdateBuilder? date) => _$this._date = date;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscription_fee_insert_inputBuilder();

  Gcable_subscription_fee_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_subscriptions = $v.cable_subscriptions?.toBuilder();
      _date = $v.date?.toBuilder();
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_insert_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_insert_input build() => _build();

  _$Gcable_subscription_fee_insert_input _build() {
    _$Gcable_subscription_fee_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_insert_input._(
              cable_subscriptions: _cable_subscriptions?.build(),
              date: _date?.build(),
              fee: fee,
              id: id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_subscriptions';
        _cable_subscriptions?.build();
        _$failedField = 'date';
        _date?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_obj_rel_insert_input
    extends Gcable_subscription_fee_obj_rel_insert_input {
  @override
  final Gcable_subscription_fee_insert_input data;
  @override
  final Gcable_subscription_fee_on_conflict? on_conflict;

  factory _$Gcable_subscription_fee_obj_rel_insert_input(
          [void Function(Gcable_subscription_fee_obj_rel_insert_inputBuilder)?
              updates]) =>
      (new Gcable_subscription_fee_obj_rel_insert_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_subscription_fee_obj_rel_insert_input._(
      {required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcable_subscription_fee_obj_rel_insert_input', 'data');
  }

  @override
  Gcable_subscription_fee_obj_rel_insert_input rebuild(
          void Function(Gcable_subscription_fee_obj_rel_insert_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_obj_rel_insert_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_obj_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_obj_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscription_fee_obj_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcable_subscription_fee_obj_rel_insert_inputBuilder
    implements
        Builder<Gcable_subscription_fee_obj_rel_insert_input,
            Gcable_subscription_fee_obj_rel_insert_inputBuilder> {
  _$Gcable_subscription_fee_obj_rel_insert_input? _$v;

  Gcable_subscription_fee_insert_inputBuilder? _data;
  Gcable_subscription_fee_insert_inputBuilder get data =>
      _$this._data ??= new Gcable_subscription_fee_insert_inputBuilder();
  set data(Gcable_subscription_fee_insert_inputBuilder? data) =>
      _$this._data = data;

  Gcable_subscription_fee_on_conflictBuilder? _on_conflict;
  Gcable_subscription_fee_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcable_subscription_fee_on_conflictBuilder();
  set on_conflict(Gcable_subscription_fee_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcable_subscription_fee_obj_rel_insert_inputBuilder();

  Gcable_subscription_fee_obj_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_obj_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_obj_rel_insert_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_obj_rel_insert_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_obj_rel_insert_input build() => _build();

  _$Gcable_subscription_fee_obj_rel_insert_input _build() {
    _$Gcable_subscription_fee_obj_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_obj_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_obj_rel_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_on_conflict
    extends Gcable_subscription_fee_on_conflict {
  @override
  final Gcable_subscription_fee_constraint constraint;
  @override
  final BuiltList<Gcable_subscription_fee_update_column> update_columns;
  @override
  final Gcable_subscription_fee_bool_exp? where;

  factory _$Gcable_subscription_fee_on_conflict(
          [void Function(Gcable_subscription_fee_on_conflictBuilder)?
              updates]) =>
      (new Gcable_subscription_fee_on_conflictBuilder()..update(updates))
          ._build();

  _$Gcable_subscription_fee_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcable_subscription_fee_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(update_columns,
        r'Gcable_subscription_fee_on_conflict', 'update_columns');
  }

  @override
  Gcable_subscription_fee_on_conflict rebuild(
          void Function(Gcable_subscription_fee_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_on_conflictBuilder toBuilder() =>
      new Gcable_subscription_fee_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcable_subscription_fee_on_conflictBuilder
    implements
        Builder<Gcable_subscription_fee_on_conflict,
            Gcable_subscription_fee_on_conflictBuilder> {
  _$Gcable_subscription_fee_on_conflict? _$v;

  Gcable_subscription_fee_constraint? _constraint;
  Gcable_subscription_fee_constraint? get constraint => _$this._constraint;
  set constraint(Gcable_subscription_fee_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcable_subscription_fee_update_column>? _update_columns;
  ListBuilder<Gcable_subscription_fee_update_column> get update_columns =>
      _$this._update_columns ??=
          new ListBuilder<Gcable_subscription_fee_update_column>();
  set update_columns(
          ListBuilder<Gcable_subscription_fee_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcable_subscription_fee_bool_expBuilder? _where;
  Gcable_subscription_fee_bool_expBuilder get where =>
      _$this._where ??= new Gcable_subscription_fee_bool_expBuilder();
  set where(Gcable_subscription_fee_bool_expBuilder? where) =>
      _$this._where = where;

  Gcable_subscription_fee_on_conflictBuilder();

  Gcable_subscription_fee_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_on_conflict;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_on_conflict build() => _build();

  _$Gcable_subscription_fee_on_conflict _build() {
    _$Gcable_subscription_fee_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(constraint,
                  r'Gcable_subscription_fee_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_on_conflict',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_order_by
    extends Gcable_subscription_fee_order_by {
  @override
  final Gcable_subscriptions_aggregate_order_by? cable_subscriptions_aggregate;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscription_fee_order_by(
          [void Function(Gcable_subscription_fee_order_byBuilder)? updates]) =>
      (new Gcable_subscription_fee_order_byBuilder()..update(updates))._build();

  _$Gcable_subscription_fee_order_by._(
      {this.cable_subscriptions_aggregate, this.date, this.fee, this.id})
      : super._();

  @override
  Gcable_subscription_fee_order_by rebuild(
          void Function(Gcable_subscription_fee_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_order_byBuilder toBuilder() =>
      new Gcable_subscription_fee_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_order_by &&
        cable_subscriptions_aggregate == other.cable_subscriptions_aggregate &&
        date == other.date &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, cable_subscriptions_aggregate.hashCode), date.hashCode),
            fee.hashCode),
        id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_order_by')
          ..add('cable_subscriptions_aggregate', cable_subscriptions_aggregate)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_order_byBuilder
    implements
        Builder<Gcable_subscription_fee_order_by,
            Gcable_subscription_fee_order_byBuilder> {
  _$Gcable_subscription_fee_order_by? _$v;

  Gcable_subscriptions_aggregate_order_byBuilder?
      _cable_subscriptions_aggregate;
  Gcable_subscriptions_aggregate_order_byBuilder
      get cable_subscriptions_aggregate =>
          _$this._cable_subscriptions_aggregate ??=
              new Gcable_subscriptions_aggregate_order_byBuilder();
  set cable_subscriptions_aggregate(
          Gcable_subscriptions_aggregate_order_byBuilder?
              cable_subscriptions_aggregate) =>
      _$this._cable_subscriptions_aggregate = cable_subscriptions_aggregate;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscription_fee_order_byBuilder();

  Gcable_subscription_fee_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_subscriptions_aggregate =
          $v.cable_subscriptions_aggregate?.toBuilder();
      _date = $v.date;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_order_by;
  }

  @override
  void update(void Function(Gcable_subscription_fee_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_order_by build() => _build();

  _$Gcable_subscription_fee_order_by _build() {
    _$Gcable_subscription_fee_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_order_by._(
              cable_subscriptions_aggregate:
                  _cable_subscriptions_aggregate?.build(),
              date: date,
              fee: fee,
              id: id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_subscriptions_aggregate';
        _cable_subscriptions_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_pk_columns_input
    extends Gcable_subscription_fee_pk_columns_input {
  @override
  final int id;

  factory _$Gcable_subscription_fee_pk_columns_input(
          [void Function(Gcable_subscription_fee_pk_columns_inputBuilder)?
              updates]) =>
      (new Gcable_subscription_fee_pk_columns_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscription_fee_pk_columns_input._({required this.id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        id, r'Gcable_subscription_fee_pk_columns_input', 'id');
  }

  @override
  Gcable_subscription_fee_pk_columns_input rebuild(
          void Function(Gcable_subscription_fee_pk_columns_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_pk_columns_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_pk_columns_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscription_fee_pk_columns_input')
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_pk_columns_inputBuilder
    implements
        Builder<Gcable_subscription_fee_pk_columns_input,
            Gcable_subscription_fee_pk_columns_inputBuilder> {
  _$Gcable_subscription_fee_pk_columns_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscription_fee_pk_columns_inputBuilder();

  Gcable_subscription_fee_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_pk_columns_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_pk_columns_input build() => _build();

  _$Gcable_subscription_fee_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcable_subscription_fee_pk_columns_input._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'Gcable_subscription_fee_pk_columns_input', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_set_input
    extends Gcable_subscription_fee_set_input {
  @override
  final Gdate? date;
  @override
  final int? fee;
  @override
  final int? id;

  factory _$Gcable_subscription_fee_set_input(
          [void Function(Gcable_subscription_fee_set_inputBuilder)? updates]) =>
      (new Gcable_subscription_fee_set_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscription_fee_set_input._({this.date, this.fee, this.id})
      : super._();

  @override
  Gcable_subscription_fee_set_input rebuild(
          void Function(Gcable_subscription_fee_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_set_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_set_input &&
        date == other.date &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, date.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_set_input')
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_set_inputBuilder
    implements
        Builder<Gcable_subscription_fee_set_input,
            Gcable_subscription_fee_set_inputBuilder> {
  _$Gcable_subscription_fee_set_input? _$v;

  GdateBuilder? _date;
  GdateBuilder get date => _$this._date ??= new GdateBuilder();
  set date(GdateBuilder? date) => _$this._date = date;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscription_fee_set_inputBuilder();

  Gcable_subscription_fee_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _date = $v.date?.toBuilder();
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_set_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_set_input build() => _build();

  _$Gcable_subscription_fee_set_input _build() {
    _$Gcable_subscription_fee_set_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_set_input._(
              date: _date?.build(), fee: fee, id: id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'date';
        _date?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_set_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_stream_cursor_input
    extends Gcable_subscription_fee_stream_cursor_input {
  @override
  final Gcable_subscription_fee_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcable_subscription_fee_stream_cursor_input(
          [void Function(Gcable_subscription_fee_stream_cursor_inputBuilder)?
              updates]) =>
      (new Gcable_subscription_fee_stream_cursor_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_subscription_fee_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(initial_value,
        r'Gcable_subscription_fee_stream_cursor_input', 'initial_value');
  }

  @override
  Gcable_subscription_fee_stream_cursor_input rebuild(
          void Function(Gcable_subscription_fee_stream_cursor_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_stream_cursor_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscription_fee_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcable_subscription_fee_stream_cursor_inputBuilder
    implements
        Builder<Gcable_subscription_fee_stream_cursor_input,
            Gcable_subscription_fee_stream_cursor_inputBuilder> {
  _$Gcable_subscription_fee_stream_cursor_input? _$v;

  Gcable_subscription_fee_stream_cursor_value_inputBuilder? _initial_value;
  Gcable_subscription_fee_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcable_subscription_fee_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcable_subscription_fee_stream_cursor_value_inputBuilder?
              initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcable_subscription_fee_stream_cursor_inputBuilder();

  Gcable_subscription_fee_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_stream_cursor_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_stream_cursor_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_stream_cursor_input build() => _build();

  _$Gcable_subscription_fee_stream_cursor_input _build() {
    _$Gcable_subscription_fee_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_stream_cursor_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_stream_cursor_value_input
    extends Gcable_subscription_fee_stream_cursor_value_input {
  @override
  final Gdate? date;
  @override
  final int? fee;
  @override
  final int? id;

  factory _$Gcable_subscription_fee_stream_cursor_value_input(
          [void Function(
                  Gcable_subscription_fee_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcable_subscription_fee_stream_cursor_value_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_subscription_fee_stream_cursor_value_input._(
      {this.date, this.fee, this.id})
      : super._();

  @override
  Gcable_subscription_fee_stream_cursor_value_input rebuild(
          void Function(
                  Gcable_subscription_fee_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcable_subscription_fee_stream_cursor_value_inputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_stream_cursor_value_input &&
        date == other.date &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, date.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscription_fee_stream_cursor_value_input')
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscription_fee_stream_cursor_value_inputBuilder
    implements
        Builder<Gcable_subscription_fee_stream_cursor_value_input,
            Gcable_subscription_fee_stream_cursor_value_inputBuilder> {
  _$Gcable_subscription_fee_stream_cursor_value_input? _$v;

  GdateBuilder? _date;
  GdateBuilder get date => _$this._date ??= new GdateBuilder();
  set date(GdateBuilder? date) => _$this._date = date;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscription_fee_stream_cursor_value_inputBuilder();

  Gcable_subscription_fee_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _date = $v.date?.toBuilder();
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcable_subscription_fee_stream_cursor_value_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_stream_cursor_value_input build() => _build();

  _$Gcable_subscription_fee_stream_cursor_value_input _build() {
    _$Gcable_subscription_fee_stream_cursor_value_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_stream_cursor_value_input._(
              date: _date?.build(), fee: fee, id: id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'date';
        _date?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_stream_cursor_value_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscription_fee_updates
    extends Gcable_subscription_fee_updates {
  @override
  final Gcable_subscription_fee_inc_input? G_inc;
  @override
  final Gcable_subscription_fee_set_input? G_set;
  @override
  final Gcable_subscription_fee_bool_exp where;

  factory _$Gcable_subscription_fee_updates(
          [void Function(Gcable_subscription_fee_updatesBuilder)? updates]) =>
      (new Gcable_subscription_fee_updatesBuilder()..update(updates))._build();

  _$Gcable_subscription_fee_updates._(
      {this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gcable_subscription_fee_updates', 'where');
  }

  @override
  Gcable_subscription_fee_updates rebuild(
          void Function(Gcable_subscription_fee_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscription_fee_updatesBuilder toBuilder() =>
      new Gcable_subscription_fee_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscription_fee_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscription_fee_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcable_subscription_fee_updatesBuilder
    implements
        Builder<Gcable_subscription_fee_updates,
            Gcable_subscription_fee_updatesBuilder> {
  _$Gcable_subscription_fee_updates? _$v;

  Gcable_subscription_fee_inc_inputBuilder? _G_inc;
  Gcable_subscription_fee_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcable_subscription_fee_inc_inputBuilder();
  set G_inc(Gcable_subscription_fee_inc_inputBuilder? G_inc) =>
      _$this._G_inc = G_inc;

  Gcable_subscription_fee_set_inputBuilder? _G_set;
  Gcable_subscription_fee_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcable_subscription_fee_set_inputBuilder();
  set G_set(Gcable_subscription_fee_set_inputBuilder? G_set) =>
      _$this._G_set = G_set;

  Gcable_subscription_fee_bool_expBuilder? _where;
  Gcable_subscription_fee_bool_expBuilder get where =>
      _$this._where ??= new Gcable_subscription_fee_bool_expBuilder();
  set where(Gcable_subscription_fee_bool_expBuilder? where) =>
      _$this._where = where;

  Gcable_subscription_fee_updatesBuilder();

  Gcable_subscription_fee_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscription_fee_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscription_fee_updates;
  }

  @override
  void update(void Function(Gcable_subscription_fee_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscription_fee_updates build() => _build();

  _$Gcable_subscription_fee_updates _build() {
    _$Gcable_subscription_fee_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscription_fee_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscription_fee_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_aggregate_bool_exp
    extends Gcable_subscriptions_aggregate_bool_exp {
  @override
  final Gcable_subscriptions_aggregate_bool_exp_count? count;

  factory _$Gcable_subscriptions_aggregate_bool_exp(
          [void Function(Gcable_subscriptions_aggregate_bool_expBuilder)?
              updates]) =>
      (new Gcable_subscriptions_aggregate_bool_expBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_aggregate_bool_exp._({this.count}) : super._();

  @override
  Gcable_subscriptions_aggregate_bool_exp rebuild(
          void Function(Gcable_subscriptions_aggregate_bool_expBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_aggregate_bool_expBuilder toBuilder() =>
      new Gcable_subscriptions_aggregate_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_aggregate_bool_exp &&
        count == other.count;
  }

  @override
  int get hashCode {
    return $jf($jc(0, count.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_aggregate_bool_exp')
          ..add('count', count))
        .toString();
  }
}

class Gcable_subscriptions_aggregate_bool_expBuilder
    implements
        Builder<Gcable_subscriptions_aggregate_bool_exp,
            Gcable_subscriptions_aggregate_bool_expBuilder> {
  _$Gcable_subscriptions_aggregate_bool_exp? _$v;

  Gcable_subscriptions_aggregate_bool_exp_countBuilder? _count;
  Gcable_subscriptions_aggregate_bool_exp_countBuilder get count =>
      _$this._count ??=
          new Gcable_subscriptions_aggregate_bool_exp_countBuilder();
  set count(Gcable_subscriptions_aggregate_bool_exp_countBuilder? count) =>
      _$this._count = count;

  Gcable_subscriptions_aggregate_bool_expBuilder();

  Gcable_subscriptions_aggregate_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _count = $v.count?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_aggregate_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_aggregate_bool_exp;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_aggregate_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_aggregate_bool_exp build() => _build();

  _$Gcable_subscriptions_aggregate_bool_exp _build() {
    _$Gcable_subscriptions_aggregate_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_aggregate_bool_exp._(
              count: _count?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'count';
        _count?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_aggregate_bool_exp',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_aggregate_bool_exp_count
    extends Gcable_subscriptions_aggregate_bool_exp_count {
  @override
  final BuiltList<Gcable_subscriptions_select_column>? arguments;
  @override
  final bool? distinct;
  @override
  final Gcable_subscriptions_bool_exp? filter;
  @override
  final GInt_comparison_exp predicate;

  factory _$Gcable_subscriptions_aggregate_bool_exp_count(
          [void Function(Gcable_subscriptions_aggregate_bool_exp_countBuilder)?
              updates]) =>
      (new Gcable_subscriptions_aggregate_bool_exp_countBuilder()
            ..update(updates))
          ._build();

  _$Gcable_subscriptions_aggregate_bool_exp_count._(
      {this.arguments, this.distinct, this.filter, required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(predicate,
        r'Gcable_subscriptions_aggregate_bool_exp_count', 'predicate');
  }

  @override
  Gcable_subscriptions_aggregate_bool_exp_count rebuild(
          void Function(Gcable_subscriptions_aggregate_bool_exp_countBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_aggregate_bool_exp_countBuilder toBuilder() =>
      new Gcable_subscriptions_aggregate_bool_exp_countBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_aggregate_bool_exp_count &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_aggregate_bool_exp_count')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gcable_subscriptions_aggregate_bool_exp_countBuilder
    implements
        Builder<Gcable_subscriptions_aggregate_bool_exp_count,
            Gcable_subscriptions_aggregate_bool_exp_countBuilder> {
  _$Gcable_subscriptions_aggregate_bool_exp_count? _$v;

  ListBuilder<Gcable_subscriptions_select_column>? _arguments;
  ListBuilder<Gcable_subscriptions_select_column> get arguments =>
      _$this._arguments ??=
          new ListBuilder<Gcable_subscriptions_select_column>();
  set arguments(ListBuilder<Gcable_subscriptions_select_column>? arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gcable_subscriptions_bool_expBuilder? _filter;
  Gcable_subscriptions_bool_expBuilder get filter =>
      _$this._filter ??= new Gcable_subscriptions_bool_expBuilder();
  set filter(Gcable_subscriptions_bool_expBuilder? filter) =>
      _$this._filter = filter;

  GInt_comparison_expBuilder? _predicate;
  GInt_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GInt_comparison_expBuilder();
  set predicate(GInt_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gcable_subscriptions_aggregate_bool_exp_countBuilder();

  Gcable_subscriptions_aggregate_bool_exp_countBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments?.toBuilder();
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_aggregate_bool_exp_count other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_aggregate_bool_exp_count;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_aggregate_bool_exp_countBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_aggregate_bool_exp_count build() => _build();

  _$Gcable_subscriptions_aggregate_bool_exp_count _build() {
    _$Gcable_subscriptions_aggregate_bool_exp_count _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_aggregate_bool_exp_count._(
              arguments: _arguments?.build(),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'arguments';
        _arguments?.build();

        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_aggregate_bool_exp_count',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_aggregate_order_by
    extends Gcable_subscriptions_aggregate_order_by {
  @override
  final Gcable_subscriptions_avg_order_by? avg;
  @override
  final Gorder_by? count;
  @override
  final Gcable_subscriptions_max_order_by? max;
  @override
  final Gcable_subscriptions_min_order_by? min;
  @override
  final Gcable_subscriptions_stddev_order_by? stddev;
  @override
  final Gcable_subscriptions_stddev_pop_order_by? stddev_pop;
  @override
  final Gcable_subscriptions_stddev_samp_order_by? stddev_samp;
  @override
  final Gcable_subscriptions_sum_order_by? sum;
  @override
  final Gcable_subscriptions_var_pop_order_by? var_pop;
  @override
  final Gcable_subscriptions_var_samp_order_by? var_samp;
  @override
  final Gcable_subscriptions_variance_order_by? variance;

  factory _$Gcable_subscriptions_aggregate_order_by(
          [void Function(Gcable_subscriptions_aggregate_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_aggregate_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_aggregate_order_by._(
      {this.avg,
      this.count,
      this.max,
      this.min,
      this.stddev,
      this.stddev_pop,
      this.stddev_samp,
      this.sum,
      this.var_pop,
      this.var_samp,
      this.variance})
      : super._();

  @override
  Gcable_subscriptions_aggregate_order_by rebuild(
          void Function(Gcable_subscriptions_aggregate_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_aggregate_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_aggregate_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_aggregate_order_by &&
        avg == other.avg &&
        count == other.count &&
        max == other.max &&
        min == other.min &&
        stddev == other.stddev &&
        stddev_pop == other.stddev_pop &&
        stddev_samp == other.stddev_samp &&
        sum == other.sum &&
        var_pop == other.var_pop &&
        var_samp == other.var_samp &&
        variance == other.variance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, avg.hashCode),
                                            count.hashCode),
                                        max.hashCode),
                                    min.hashCode),
                                stddev.hashCode),
                            stddev_pop.hashCode),
                        stddev_samp.hashCode),
                    sum.hashCode),
                var_pop.hashCode),
            var_samp.hashCode),
        variance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_aggregate_order_by')
          ..add('avg', avg)
          ..add('count', count)
          ..add('max', max)
          ..add('min', min)
          ..add('stddev', stddev)
          ..add('stddev_pop', stddev_pop)
          ..add('stddev_samp', stddev_samp)
          ..add('sum', sum)
          ..add('var_pop', var_pop)
          ..add('var_samp', var_samp)
          ..add('variance', variance))
        .toString();
  }
}

class Gcable_subscriptions_aggregate_order_byBuilder
    implements
        Builder<Gcable_subscriptions_aggregate_order_by,
            Gcable_subscriptions_aggregate_order_byBuilder> {
  _$Gcable_subscriptions_aggregate_order_by? _$v;

  Gcable_subscriptions_avg_order_byBuilder? _avg;
  Gcable_subscriptions_avg_order_byBuilder get avg =>
      _$this._avg ??= new Gcable_subscriptions_avg_order_byBuilder();
  set avg(Gcable_subscriptions_avg_order_byBuilder? avg) => _$this._avg = avg;

  Gorder_by? _count;
  Gorder_by? get count => _$this._count;
  set count(Gorder_by? count) => _$this._count = count;

  Gcable_subscriptions_max_order_byBuilder? _max;
  Gcable_subscriptions_max_order_byBuilder get max =>
      _$this._max ??= new Gcable_subscriptions_max_order_byBuilder();
  set max(Gcable_subscriptions_max_order_byBuilder? max) => _$this._max = max;

  Gcable_subscriptions_min_order_byBuilder? _min;
  Gcable_subscriptions_min_order_byBuilder get min =>
      _$this._min ??= new Gcable_subscriptions_min_order_byBuilder();
  set min(Gcable_subscriptions_min_order_byBuilder? min) => _$this._min = min;

  Gcable_subscriptions_stddev_order_byBuilder? _stddev;
  Gcable_subscriptions_stddev_order_byBuilder get stddev =>
      _$this._stddev ??= new Gcable_subscriptions_stddev_order_byBuilder();
  set stddev(Gcable_subscriptions_stddev_order_byBuilder? stddev) =>
      _$this._stddev = stddev;

  Gcable_subscriptions_stddev_pop_order_byBuilder? _stddev_pop;
  Gcable_subscriptions_stddev_pop_order_byBuilder get stddev_pop =>
      _$this._stddev_pop ??=
          new Gcable_subscriptions_stddev_pop_order_byBuilder();
  set stddev_pop(Gcable_subscriptions_stddev_pop_order_byBuilder? stddev_pop) =>
      _$this._stddev_pop = stddev_pop;

  Gcable_subscriptions_stddev_samp_order_byBuilder? _stddev_samp;
  Gcable_subscriptions_stddev_samp_order_byBuilder get stddev_samp =>
      _$this._stddev_samp ??=
          new Gcable_subscriptions_stddev_samp_order_byBuilder();
  set stddev_samp(
          Gcable_subscriptions_stddev_samp_order_byBuilder? stddev_samp) =>
      _$this._stddev_samp = stddev_samp;

  Gcable_subscriptions_sum_order_byBuilder? _sum;
  Gcable_subscriptions_sum_order_byBuilder get sum =>
      _$this._sum ??= new Gcable_subscriptions_sum_order_byBuilder();
  set sum(Gcable_subscriptions_sum_order_byBuilder? sum) => _$this._sum = sum;

  Gcable_subscriptions_var_pop_order_byBuilder? _var_pop;
  Gcable_subscriptions_var_pop_order_byBuilder get var_pop =>
      _$this._var_pop ??= new Gcable_subscriptions_var_pop_order_byBuilder();
  set var_pop(Gcable_subscriptions_var_pop_order_byBuilder? var_pop) =>
      _$this._var_pop = var_pop;

  Gcable_subscriptions_var_samp_order_byBuilder? _var_samp;
  Gcable_subscriptions_var_samp_order_byBuilder get var_samp =>
      _$this._var_samp ??= new Gcable_subscriptions_var_samp_order_byBuilder();
  set var_samp(Gcable_subscriptions_var_samp_order_byBuilder? var_samp) =>
      _$this._var_samp = var_samp;

  Gcable_subscriptions_variance_order_byBuilder? _variance;
  Gcable_subscriptions_variance_order_byBuilder get variance =>
      _$this._variance ??= new Gcable_subscriptions_variance_order_byBuilder();
  set variance(Gcable_subscriptions_variance_order_byBuilder? variance) =>
      _$this._variance = variance;

  Gcable_subscriptions_aggregate_order_byBuilder();

  Gcable_subscriptions_aggregate_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _avg = $v.avg?.toBuilder();
      _count = $v.count;
      _max = $v.max?.toBuilder();
      _min = $v.min?.toBuilder();
      _stddev = $v.stddev?.toBuilder();
      _stddev_pop = $v.stddev_pop?.toBuilder();
      _stddev_samp = $v.stddev_samp?.toBuilder();
      _sum = $v.sum?.toBuilder();
      _var_pop = $v.var_pop?.toBuilder();
      _var_samp = $v.var_samp?.toBuilder();
      _variance = $v.variance?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_aggregate_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_aggregate_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_aggregate_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_aggregate_order_by build() => _build();

  _$Gcable_subscriptions_aggregate_order_by _build() {
    _$Gcable_subscriptions_aggregate_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_aggregate_order_by._(
              avg: _avg?.build(),
              count: count,
              max: _max?.build(),
              min: _min?.build(),
              stddev: _stddev?.build(),
              stddev_pop: _stddev_pop?.build(),
              stddev_samp: _stddev_samp?.build(),
              sum: _sum?.build(),
              var_pop: _var_pop?.build(),
              var_samp: _var_samp?.build(),
              variance: _variance?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'avg';
        _avg?.build();

        _$failedField = 'max';
        _max?.build();
        _$failedField = 'min';
        _min?.build();
        _$failedField = 'stddev';
        _stddev?.build();
        _$failedField = 'stddev_pop';
        _stddev_pop?.build();
        _$failedField = 'stddev_samp';
        _stddev_samp?.build();
        _$failedField = 'sum';
        _sum?.build();
        _$failedField = 'var_pop';
        _var_pop?.build();
        _$failedField = 'var_samp';
        _var_samp?.build();
        _$failedField = 'variance';
        _variance?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_aggregate_order_by',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_arr_rel_insert_input
    extends Gcable_subscriptions_arr_rel_insert_input {
  @override
  final BuiltList<Gcable_subscriptions_insert_input> data;
  @override
  final Gcable_subscriptions_on_conflict? on_conflict;

  factory _$Gcable_subscriptions_arr_rel_insert_input(
          [void Function(Gcable_subscriptions_arr_rel_insert_inputBuilder)?
              updates]) =>
      (new Gcable_subscriptions_arr_rel_insert_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_arr_rel_insert_input._(
      {required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcable_subscriptions_arr_rel_insert_input', 'data');
  }

  @override
  Gcable_subscriptions_arr_rel_insert_input rebuild(
          void Function(Gcable_subscriptions_arr_rel_insert_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_arr_rel_insert_inputBuilder toBuilder() =>
      new Gcable_subscriptions_arr_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_arr_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_arr_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcable_subscriptions_arr_rel_insert_inputBuilder
    implements
        Builder<Gcable_subscriptions_arr_rel_insert_input,
            Gcable_subscriptions_arr_rel_insert_inputBuilder> {
  _$Gcable_subscriptions_arr_rel_insert_input? _$v;

  ListBuilder<Gcable_subscriptions_insert_input>? _data;
  ListBuilder<Gcable_subscriptions_insert_input> get data =>
      _$this._data ??= new ListBuilder<Gcable_subscriptions_insert_input>();
  set data(ListBuilder<Gcable_subscriptions_insert_input>? data) =>
      _$this._data = data;

  Gcable_subscriptions_on_conflictBuilder? _on_conflict;
  Gcable_subscriptions_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcable_subscriptions_on_conflictBuilder();
  set on_conflict(Gcable_subscriptions_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcable_subscriptions_arr_rel_insert_inputBuilder();

  Gcable_subscriptions_arr_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_arr_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_arr_rel_insert_input;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_arr_rel_insert_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_arr_rel_insert_input build() => _build();

  _$Gcable_subscriptions_arr_rel_insert_input _build() {
    _$Gcable_subscriptions_arr_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_arr_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_arr_rel_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_avg_order_by
    extends Gcable_subscriptions_avg_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_avg_order_by(
          [void Function(Gcable_subscriptions_avg_order_byBuilder)? updates]) =>
      (new Gcable_subscriptions_avg_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_avg_order_by._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_avg_order_by rebuild(
          void Function(Gcable_subscriptions_avg_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_avg_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_avg_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_avg_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_avg_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_avg_order_byBuilder
    implements
        Builder<Gcable_subscriptions_avg_order_by,
            Gcable_subscriptions_avg_order_byBuilder> {
  _$Gcable_subscriptions_avg_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_avg_order_byBuilder();

  Gcable_subscriptions_avg_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_avg_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_avg_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_avg_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_avg_order_by build() => _build();

  _$Gcable_subscriptions_avg_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_avg_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_bool_exp extends Gcable_subscriptions_bool_exp {
  @override
  final BuiltList<Gcable_subscriptions_bool_exp>? G_and;
  @override
  final Gcable_subscriptions_bool_exp? G_not;
  @override
  final BuiltList<Gcable_subscriptions_bool_exp>? G_or;
  @override
  final GString_comparison_exp? acc_ph_upi;
  @override
  final GInt_comparison_exp? cable_id;
  @override
  final Gcable_opr_bool_exp? cable_opr;
  @override
  final Gcable_subscription_fee_bool_exp? cable_subscription_fee;
  @override
  final Gtimestamptz_comparison_exp? date;
  @override
  final GInt_comparison_exp? fee;
  @override
  final GInt_comparison_exp? id;
  @override
  final Gtimestamptz_comparison_exp? paid_on;
  @override
  final GString_comparison_exp? trans_id;
  @override
  final GString_comparison_exp? type;

  factory _$Gcable_subscriptions_bool_exp(
          [void Function(Gcable_subscriptions_bool_expBuilder)? updates]) =>
      (new Gcable_subscriptions_bool_expBuilder()..update(updates))._build();

  _$Gcable_subscriptions_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.acc_ph_upi,
      this.cable_id,
      this.cable_opr,
      this.cable_subscription_fee,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_bool_exp rebuild(
          void Function(Gcable_subscriptions_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_bool_expBuilder toBuilder() =>
      new Gcable_subscriptions_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        cable_subscription_fee == other.cable_subscription_fee &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc($jc(0, G_and.hashCode),
                                                    G_not.hashCode),
                                                G_or.hashCode),
                                            acc_ph_upi.hashCode),
                                        cable_id.hashCode),
                                    cable_opr.hashCode),
                                cable_subscription_fee.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('cable_subscription_fee', cable_subscription_fee)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_bool_expBuilder
    implements
        Builder<Gcable_subscriptions_bool_exp,
            Gcable_subscriptions_bool_expBuilder> {
  _$Gcable_subscriptions_bool_exp? _$v;

  ListBuilder<Gcable_subscriptions_bool_exp>? _G_and;
  ListBuilder<Gcable_subscriptions_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcable_subscriptions_bool_exp>();
  set G_and(ListBuilder<Gcable_subscriptions_bool_exp>? G_and) =>
      _$this._G_and = G_and;

  Gcable_subscriptions_bool_expBuilder? _G_not;
  Gcable_subscriptions_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcable_subscriptions_bool_expBuilder();
  set G_not(Gcable_subscriptions_bool_expBuilder? G_not) =>
      _$this._G_not = G_not;

  ListBuilder<Gcable_subscriptions_bool_exp>? _G_or;
  ListBuilder<Gcable_subscriptions_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcable_subscriptions_bool_exp>();
  set G_or(ListBuilder<Gcable_subscriptions_bool_exp>? G_or) =>
      _$this._G_or = G_or;

  GString_comparison_expBuilder? _acc_ph_upi;
  GString_comparison_expBuilder get acc_ph_upi =>
      _$this._acc_ph_upi ??= new GString_comparison_expBuilder();
  set acc_ph_upi(GString_comparison_expBuilder? acc_ph_upi) =>
      _$this._acc_ph_upi = acc_ph_upi;

  GInt_comparison_expBuilder? _cable_id;
  GInt_comparison_expBuilder get cable_id =>
      _$this._cable_id ??= new GInt_comparison_expBuilder();
  set cable_id(GInt_comparison_expBuilder? cable_id) =>
      _$this._cable_id = cable_id;

  Gcable_opr_bool_expBuilder? _cable_opr;
  Gcable_opr_bool_expBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_bool_expBuilder();
  set cable_opr(Gcable_opr_bool_expBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gcable_subscription_fee_bool_expBuilder? _cable_subscription_fee;
  Gcable_subscription_fee_bool_expBuilder get cable_subscription_fee =>
      _$this._cable_subscription_fee ??=
          new Gcable_subscription_fee_bool_expBuilder();
  set cable_subscription_fee(
          Gcable_subscription_fee_bool_expBuilder? cable_subscription_fee) =>
      _$this._cable_subscription_fee = cable_subscription_fee;

  Gtimestamptz_comparison_expBuilder? _date;
  Gtimestamptz_comparison_expBuilder get date =>
      _$this._date ??= new Gtimestamptz_comparison_expBuilder();
  set date(Gtimestamptz_comparison_expBuilder? date) => _$this._date = date;

  GInt_comparison_expBuilder? _fee;
  GInt_comparison_expBuilder get fee =>
      _$this._fee ??= new GInt_comparison_expBuilder();
  set fee(GInt_comparison_expBuilder? fee) => _$this._fee = fee;

  GInt_comparison_expBuilder? _id;
  GInt_comparison_expBuilder get id =>
      _$this._id ??= new GInt_comparison_expBuilder();
  set id(GInt_comparison_expBuilder? id) => _$this._id = id;

  Gtimestamptz_comparison_expBuilder? _paid_on;
  Gtimestamptz_comparison_expBuilder get paid_on =>
      _$this._paid_on ??= new Gtimestamptz_comparison_expBuilder();
  set paid_on(Gtimestamptz_comparison_expBuilder? paid_on) =>
      _$this._paid_on = paid_on;

  GString_comparison_expBuilder? _trans_id;
  GString_comparison_expBuilder get trans_id =>
      _$this._trans_id ??= new GString_comparison_expBuilder();
  set trans_id(GString_comparison_expBuilder? trans_id) =>
      _$this._trans_id = trans_id;

  GString_comparison_expBuilder? _type;
  GString_comparison_expBuilder get type =>
      _$this._type ??= new GString_comparison_expBuilder();
  set type(GString_comparison_expBuilder? type) => _$this._type = type;

  Gcable_subscriptions_bool_expBuilder();

  Gcable_subscriptions_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _acc_ph_upi = $v.acc_ph_upi?.toBuilder();
      _cable_id = $v.cable_id?.toBuilder();
      _cable_opr = $v.cable_opr?.toBuilder();
      _cable_subscription_fee = $v.cable_subscription_fee?.toBuilder();
      _date = $v.date?.toBuilder();
      _fee = $v.fee?.toBuilder();
      _id = $v.id?.toBuilder();
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id?.toBuilder();
      _type = $v.type?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_bool_exp;
  }

  @override
  void update(void Function(Gcable_subscriptions_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_bool_exp build() => _build();

  _$Gcable_subscriptions_bool_exp _build() {
    _$Gcable_subscriptions_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              acc_ph_upi: _acc_ph_upi?.build(),
              cable_id: _cable_id?.build(),
              cable_opr: _cable_opr?.build(),
              cable_subscription_fee: _cable_subscription_fee?.build(),
              date: _date?.build(),
              fee: _fee?.build(),
              id: _id?.build(),
              paid_on: _paid_on?.build(),
              trans_id: _trans_id?.build(),
              type: _type?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'acc_ph_upi';
        _acc_ph_upi?.build();
        _$failedField = 'cable_id';
        _cable_id?.build();
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'cable_subscription_fee';
        _cable_subscription_fee?.build();
        _$failedField = 'date';
        _date?.build();
        _$failedField = 'fee';
        _fee?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'paid_on';
        _paid_on?.build();
        _$failedField = 'trans_id';
        _trans_id?.build();
        _$failedField = 'type';
        _type?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_inc_input extends Gcable_subscriptions_inc_input {
  @override
  final int? cable_id;
  @override
  final int? fee;
  @override
  final int? id;

  factory _$Gcable_subscriptions_inc_input(
          [void Function(Gcable_subscriptions_inc_inputBuilder)? updates]) =>
      (new Gcable_subscriptions_inc_inputBuilder()..update(updates))._build();

  _$Gcable_subscriptions_inc_input._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_inc_input rebuild(
          void Function(Gcable_subscriptions_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_inc_inputBuilder toBuilder() =>
      new Gcable_subscriptions_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_inc_input &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_inc_input')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_inc_inputBuilder
    implements
        Builder<Gcable_subscriptions_inc_input,
            Gcable_subscriptions_inc_inputBuilder> {
  _$Gcable_subscriptions_inc_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscriptions_inc_inputBuilder();

  Gcable_subscriptions_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_inc_input;
  }

  @override
  void update(void Function(Gcable_subscriptions_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_inc_input build() => _build();

  _$Gcable_subscriptions_inc_input _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_inc_input._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_insert_input
    extends Gcable_subscriptions_insert_input {
  @override
  final String? acc_ph_upi;
  @override
  final int? cable_id;
  @override
  final Gcable_opr_obj_rel_insert_input? cable_opr;
  @override
  final Gcable_subscription_fee_obj_rel_insert_input? cable_subscription_fee;
  @override
  final Gtimestamptz? date;
  @override
  final int? fee;
  @override
  final int? id;
  @override
  final Gtimestamptz? paid_on;
  @override
  final String? trans_id;
  @override
  final String? type;

  factory _$Gcable_subscriptions_insert_input(
          [void Function(Gcable_subscriptions_insert_inputBuilder)? updates]) =>
      (new Gcable_subscriptions_insert_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_insert_input._(
      {this.acc_ph_upi,
      this.cable_id,
      this.cable_opr,
      this.cable_subscription_fee,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_insert_input rebuild(
          void Function(Gcable_subscriptions_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_insert_inputBuilder toBuilder() =>
      new Gcable_subscriptions_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_insert_input &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        cable_subscription_fee == other.cable_subscription_fee &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc($jc(0, acc_ph_upi.hashCode),
                                        cable_id.hashCode),
                                    cable_opr.hashCode),
                                cable_subscription_fee.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_insert_input')
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('cable_subscription_fee', cable_subscription_fee)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_insert_inputBuilder
    implements
        Builder<Gcable_subscriptions_insert_input,
            Gcable_subscriptions_insert_inputBuilder> {
  _$Gcable_subscriptions_insert_input? _$v;

  String? _acc_ph_upi;
  String? get acc_ph_upi => _$this._acc_ph_upi;
  set acc_ph_upi(String? acc_ph_upi) => _$this._acc_ph_upi = acc_ph_upi;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  Gcable_opr_obj_rel_insert_inputBuilder? _cable_opr;
  Gcable_opr_obj_rel_insert_inputBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_obj_rel_insert_inputBuilder();
  set cable_opr(Gcable_opr_obj_rel_insert_inputBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gcable_subscription_fee_obj_rel_insert_inputBuilder? _cable_subscription_fee;
  Gcable_subscription_fee_obj_rel_insert_inputBuilder
      get cable_subscription_fee => _$this._cable_subscription_fee ??=
          new Gcable_subscription_fee_obj_rel_insert_inputBuilder();
  set cable_subscription_fee(
          Gcable_subscription_fee_obj_rel_insert_inputBuilder?
              cable_subscription_fee) =>
      _$this._cable_subscription_fee = cable_subscription_fee;

  GtimestamptzBuilder? _date;
  GtimestamptzBuilder get date => _$this._date ??= new GtimestamptzBuilder();
  set date(GtimestamptzBuilder? date) => _$this._date = date;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GtimestamptzBuilder? _paid_on;
  GtimestamptzBuilder get paid_on =>
      _$this._paid_on ??= new GtimestamptzBuilder();
  set paid_on(GtimestamptzBuilder? paid_on) => _$this._paid_on = paid_on;

  String? _trans_id;
  String? get trans_id => _$this._trans_id;
  set trans_id(String? trans_id) => _$this._trans_id = trans_id;

  String? _type;
  String? get type => _$this._type;
  set type(String? type) => _$this._type = type;

  Gcable_subscriptions_insert_inputBuilder();

  Gcable_subscriptions_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _acc_ph_upi = $v.acc_ph_upi;
      _cable_id = $v.cable_id;
      _cable_opr = $v.cable_opr?.toBuilder();
      _cable_subscription_fee = $v.cable_subscription_fee?.toBuilder();
      _date = $v.date?.toBuilder();
      _fee = $v.fee;
      _id = $v.id;
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_insert_input;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_insert_input build() => _build();

  _$Gcable_subscriptions_insert_input _build() {
    _$Gcable_subscriptions_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_insert_input._(
              acc_ph_upi: acc_ph_upi,
              cable_id: cable_id,
              cable_opr: _cable_opr?.build(),
              cable_subscription_fee: _cable_subscription_fee?.build(),
              date: _date?.build(),
              fee: fee,
              id: id,
              paid_on: _paid_on?.build(),
              trans_id: trans_id,
              type: type);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'cable_subscription_fee';
        _cable_subscription_fee?.build();
        _$failedField = 'date';
        _date?.build();

        _$failedField = 'paid_on';
        _paid_on?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_max_order_by
    extends Gcable_subscriptions_max_order_by {
  @override
  final Gorder_by? acc_ph_upi;
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? paid_on;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? type;

  factory _$Gcable_subscriptions_max_order_by(
          [void Function(Gcable_subscriptions_max_order_byBuilder)? updates]) =>
      (new Gcable_subscriptions_max_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_max_order_by._(
      {this.acc_ph_upi,
      this.cable_id,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_max_order_by rebuild(
          void Function(Gcable_subscriptions_max_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_max_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_max_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_max_order_by &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, acc_ph_upi.hashCode), cable_id.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_max_order_by')
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_max_order_byBuilder
    implements
        Builder<Gcable_subscriptions_max_order_by,
            Gcable_subscriptions_max_order_byBuilder> {
  _$Gcable_subscriptions_max_order_by? _$v;

  Gorder_by? _acc_ph_upi;
  Gorder_by? get acc_ph_upi => _$this._acc_ph_upi;
  set acc_ph_upi(Gorder_by? acc_ph_upi) => _$this._acc_ph_upi = acc_ph_upi;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _paid_on;
  Gorder_by? get paid_on => _$this._paid_on;
  set paid_on(Gorder_by? paid_on) => _$this._paid_on = paid_on;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _type;
  Gorder_by? get type => _$this._type;
  set type(Gorder_by? type) => _$this._type = type;

  Gcable_subscriptions_max_order_byBuilder();

  Gcable_subscriptions_max_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _acc_ph_upi = $v.acc_ph_upi;
      _cable_id = $v.cable_id;
      _date = $v.date;
      _fee = $v.fee;
      _id = $v.id;
      _paid_on = $v.paid_on;
      _trans_id = $v.trans_id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_max_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_max_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_max_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_max_order_by build() => _build();

  _$Gcable_subscriptions_max_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_max_order_by._(
            acc_ph_upi: acc_ph_upi,
            cable_id: cable_id,
            date: date,
            fee: fee,
            id: id,
            paid_on: paid_on,
            trans_id: trans_id,
            type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_min_order_by
    extends Gcable_subscriptions_min_order_by {
  @override
  final Gorder_by? acc_ph_upi;
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? paid_on;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? type;

  factory _$Gcable_subscriptions_min_order_by(
          [void Function(Gcable_subscriptions_min_order_byBuilder)? updates]) =>
      (new Gcable_subscriptions_min_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_min_order_by._(
      {this.acc_ph_upi,
      this.cable_id,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_min_order_by rebuild(
          void Function(Gcable_subscriptions_min_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_min_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_min_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_min_order_by &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, acc_ph_upi.hashCode), cable_id.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_min_order_by')
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_min_order_byBuilder
    implements
        Builder<Gcable_subscriptions_min_order_by,
            Gcable_subscriptions_min_order_byBuilder> {
  _$Gcable_subscriptions_min_order_by? _$v;

  Gorder_by? _acc_ph_upi;
  Gorder_by? get acc_ph_upi => _$this._acc_ph_upi;
  set acc_ph_upi(Gorder_by? acc_ph_upi) => _$this._acc_ph_upi = acc_ph_upi;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _paid_on;
  Gorder_by? get paid_on => _$this._paid_on;
  set paid_on(Gorder_by? paid_on) => _$this._paid_on = paid_on;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _type;
  Gorder_by? get type => _$this._type;
  set type(Gorder_by? type) => _$this._type = type;

  Gcable_subscriptions_min_order_byBuilder();

  Gcable_subscriptions_min_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _acc_ph_upi = $v.acc_ph_upi;
      _cable_id = $v.cable_id;
      _date = $v.date;
      _fee = $v.fee;
      _id = $v.id;
      _paid_on = $v.paid_on;
      _trans_id = $v.trans_id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_min_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_min_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_min_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_min_order_by build() => _build();

  _$Gcable_subscriptions_min_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_min_order_by._(
            acc_ph_upi: acc_ph_upi,
            cable_id: cable_id,
            date: date,
            fee: fee,
            id: id,
            paid_on: paid_on,
            trans_id: trans_id,
            type: type);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_on_conflict
    extends Gcable_subscriptions_on_conflict {
  @override
  final Gcable_subscriptions_constraint constraint;
  @override
  final BuiltList<Gcable_subscriptions_update_column> update_columns;
  @override
  final Gcable_subscriptions_bool_exp? where;

  factory _$Gcable_subscriptions_on_conflict(
          [void Function(Gcable_subscriptions_on_conflictBuilder)? updates]) =>
      (new Gcable_subscriptions_on_conflictBuilder()..update(updates))._build();

  _$Gcable_subscriptions_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcable_subscriptions_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gcable_subscriptions_on_conflict', 'update_columns');
  }

  @override
  Gcable_subscriptions_on_conflict rebuild(
          void Function(Gcable_subscriptions_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_on_conflictBuilder toBuilder() =>
      new Gcable_subscriptions_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcable_subscriptions_on_conflictBuilder
    implements
        Builder<Gcable_subscriptions_on_conflict,
            Gcable_subscriptions_on_conflictBuilder> {
  _$Gcable_subscriptions_on_conflict? _$v;

  Gcable_subscriptions_constraint? _constraint;
  Gcable_subscriptions_constraint? get constraint => _$this._constraint;
  set constraint(Gcable_subscriptions_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcable_subscriptions_update_column>? _update_columns;
  ListBuilder<Gcable_subscriptions_update_column> get update_columns =>
      _$this._update_columns ??=
          new ListBuilder<Gcable_subscriptions_update_column>();
  set update_columns(
          ListBuilder<Gcable_subscriptions_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcable_subscriptions_bool_expBuilder? _where;
  Gcable_subscriptions_bool_expBuilder get where =>
      _$this._where ??= new Gcable_subscriptions_bool_expBuilder();
  set where(Gcable_subscriptions_bool_expBuilder? where) =>
      _$this._where = where;

  Gcable_subscriptions_on_conflictBuilder();

  Gcable_subscriptions_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_on_conflict;
  }

  @override
  void update(void Function(Gcable_subscriptions_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_on_conflict build() => _build();

  _$Gcable_subscriptions_on_conflict _build() {
    _$Gcable_subscriptions_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(constraint,
                  r'Gcable_subscriptions_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_order_by extends Gcable_subscriptions_order_by {
  @override
  final Gorder_by? acc_ph_upi;
  @override
  final Gorder_by? cable_id;
  @override
  final Gcable_opr_order_by? cable_opr;
  @override
  final Gcable_subscription_fee_order_by? cable_subscription_fee;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? paid_on;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? type;

  factory _$Gcable_subscriptions_order_by(
          [void Function(Gcable_subscriptions_order_byBuilder)? updates]) =>
      (new Gcable_subscriptions_order_byBuilder()..update(updates))._build();

  _$Gcable_subscriptions_order_by._(
      {this.acc_ph_upi,
      this.cable_id,
      this.cable_opr,
      this.cable_subscription_fee,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_order_by rebuild(
          void Function(Gcable_subscriptions_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_order_by &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        cable_subscription_fee == other.cable_subscription_fee &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc($jc(0, acc_ph_upi.hashCode),
                                        cable_id.hashCode),
                                    cable_opr.hashCode),
                                cable_subscription_fee.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_order_by')
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('cable_subscription_fee', cable_subscription_fee)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_order_byBuilder
    implements
        Builder<Gcable_subscriptions_order_by,
            Gcable_subscriptions_order_byBuilder> {
  _$Gcable_subscriptions_order_by? _$v;

  Gorder_by? _acc_ph_upi;
  Gorder_by? get acc_ph_upi => _$this._acc_ph_upi;
  set acc_ph_upi(Gorder_by? acc_ph_upi) => _$this._acc_ph_upi = acc_ph_upi;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gcable_opr_order_byBuilder? _cable_opr;
  Gcable_opr_order_byBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_order_byBuilder();
  set cable_opr(Gcable_opr_order_byBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gcable_subscription_fee_order_byBuilder? _cable_subscription_fee;
  Gcable_subscription_fee_order_byBuilder get cable_subscription_fee =>
      _$this._cable_subscription_fee ??=
          new Gcable_subscription_fee_order_byBuilder();
  set cable_subscription_fee(
          Gcable_subscription_fee_order_byBuilder? cable_subscription_fee) =>
      _$this._cable_subscription_fee = cable_subscription_fee;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _paid_on;
  Gorder_by? get paid_on => _$this._paid_on;
  set paid_on(Gorder_by? paid_on) => _$this._paid_on = paid_on;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _type;
  Gorder_by? get type => _$this._type;
  set type(Gorder_by? type) => _$this._type = type;

  Gcable_subscriptions_order_byBuilder();

  Gcable_subscriptions_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _acc_ph_upi = $v.acc_ph_upi;
      _cable_id = $v.cable_id;
      _cable_opr = $v.cable_opr?.toBuilder();
      _cable_subscription_fee = $v.cable_subscription_fee?.toBuilder();
      _date = $v.date;
      _fee = $v.fee;
      _id = $v.id;
      _paid_on = $v.paid_on;
      _trans_id = $v.trans_id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_order_by;
  }

  @override
  void update(void Function(Gcable_subscriptions_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_order_by build() => _build();

  _$Gcable_subscriptions_order_by _build() {
    _$Gcable_subscriptions_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_order_by._(
              acc_ph_upi: acc_ph_upi,
              cable_id: cable_id,
              cable_opr: _cable_opr?.build(),
              cable_subscription_fee: _cable_subscription_fee?.build(),
              date: date,
              fee: fee,
              id: id,
              paid_on: paid_on,
              trans_id: trans_id,
              type: type);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'cable_subscription_fee';
        _cable_subscription_fee?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_pk_columns_input
    extends Gcable_subscriptions_pk_columns_input {
  @override
  final int id;

  factory _$Gcable_subscriptions_pk_columns_input(
          [void Function(Gcable_subscriptions_pk_columns_inputBuilder)?
              updates]) =>
      (new Gcable_subscriptions_pk_columns_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_pk_columns_input._({required this.id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        id, r'Gcable_subscriptions_pk_columns_input', 'id');
  }

  @override
  Gcable_subscriptions_pk_columns_input rebuild(
          void Function(Gcable_subscriptions_pk_columns_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_pk_columns_inputBuilder toBuilder() =>
      new Gcable_subscriptions_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_pk_columns_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_pk_columns_input')
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_pk_columns_inputBuilder
    implements
        Builder<Gcable_subscriptions_pk_columns_input,
            Gcable_subscriptions_pk_columns_inputBuilder> {
  _$Gcable_subscriptions_pk_columns_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcable_subscriptions_pk_columns_inputBuilder();

  Gcable_subscriptions_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_pk_columns_input;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_pk_columns_input build() => _build();

  _$Gcable_subscriptions_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_pk_columns_input._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'Gcable_subscriptions_pk_columns_input', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_set_input extends Gcable_subscriptions_set_input {
  @override
  final String? acc_ph_upi;
  @override
  final int? cable_id;
  @override
  final Gtimestamptz? date;
  @override
  final int? fee;
  @override
  final int? id;
  @override
  final Gtimestamptz? paid_on;
  @override
  final String? trans_id;
  @override
  final String? type;

  factory _$Gcable_subscriptions_set_input(
          [void Function(Gcable_subscriptions_set_inputBuilder)? updates]) =>
      (new Gcable_subscriptions_set_inputBuilder()..update(updates))._build();

  _$Gcable_subscriptions_set_input._(
      {this.acc_ph_upi,
      this.cable_id,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_set_input rebuild(
          void Function(Gcable_subscriptions_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_set_inputBuilder toBuilder() =>
      new Gcable_subscriptions_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_set_input &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, acc_ph_upi.hashCode), cable_id.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_set_input')
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_set_inputBuilder
    implements
        Builder<Gcable_subscriptions_set_input,
            Gcable_subscriptions_set_inputBuilder> {
  _$Gcable_subscriptions_set_input? _$v;

  String? _acc_ph_upi;
  String? get acc_ph_upi => _$this._acc_ph_upi;
  set acc_ph_upi(String? acc_ph_upi) => _$this._acc_ph_upi = acc_ph_upi;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  GtimestamptzBuilder? _date;
  GtimestamptzBuilder get date => _$this._date ??= new GtimestamptzBuilder();
  set date(GtimestamptzBuilder? date) => _$this._date = date;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GtimestamptzBuilder? _paid_on;
  GtimestamptzBuilder get paid_on =>
      _$this._paid_on ??= new GtimestamptzBuilder();
  set paid_on(GtimestamptzBuilder? paid_on) => _$this._paid_on = paid_on;

  String? _trans_id;
  String? get trans_id => _$this._trans_id;
  set trans_id(String? trans_id) => _$this._trans_id = trans_id;

  String? _type;
  String? get type => _$this._type;
  set type(String? type) => _$this._type = type;

  Gcable_subscriptions_set_inputBuilder();

  Gcable_subscriptions_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _acc_ph_upi = $v.acc_ph_upi;
      _cable_id = $v.cable_id;
      _date = $v.date?.toBuilder();
      _fee = $v.fee;
      _id = $v.id;
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_set_input;
  }

  @override
  void update(void Function(Gcable_subscriptions_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_set_input build() => _build();

  _$Gcable_subscriptions_set_input _build() {
    _$Gcable_subscriptions_set_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_set_input._(
              acc_ph_upi: acc_ph_upi,
              cable_id: cable_id,
              date: _date?.build(),
              fee: fee,
              id: id,
              paid_on: _paid_on?.build(),
              trans_id: trans_id,
              type: type);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'date';
        _date?.build();

        _$failedField = 'paid_on';
        _paid_on?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_set_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_stddev_order_by
    extends Gcable_subscriptions_stddev_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_stddev_order_by(
          [void Function(Gcable_subscriptions_stddev_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_stddev_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_stddev_order_by._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_stddev_order_by rebuild(
          void Function(Gcable_subscriptions_stddev_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_stddev_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_stddev_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_stddev_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_stddev_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_stddev_order_byBuilder
    implements
        Builder<Gcable_subscriptions_stddev_order_by,
            Gcable_subscriptions_stddev_order_byBuilder> {
  _$Gcable_subscriptions_stddev_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_stddev_order_byBuilder();

  Gcable_subscriptions_stddev_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_stddev_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_stddev_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_stddev_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_stddev_order_by build() => _build();

  _$Gcable_subscriptions_stddev_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_stddev_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_stddev_pop_order_by
    extends Gcable_subscriptions_stddev_pop_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_stddev_pop_order_by(
          [void Function(Gcable_subscriptions_stddev_pop_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_stddev_pop_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_stddev_pop_order_by._(
      {this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_stddev_pop_order_by rebuild(
          void Function(Gcable_subscriptions_stddev_pop_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_stddev_pop_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_stddev_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_stddev_pop_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_stddev_pop_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_stddev_pop_order_byBuilder
    implements
        Builder<Gcable_subscriptions_stddev_pop_order_by,
            Gcable_subscriptions_stddev_pop_order_byBuilder> {
  _$Gcable_subscriptions_stddev_pop_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_stddev_pop_order_byBuilder();

  Gcable_subscriptions_stddev_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_stddev_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_stddev_pop_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_stddev_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_stddev_pop_order_by build() => _build();

  _$Gcable_subscriptions_stddev_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_stddev_pop_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_stddev_samp_order_by
    extends Gcable_subscriptions_stddev_samp_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_stddev_samp_order_by(
          [void Function(Gcable_subscriptions_stddev_samp_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_stddev_samp_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_stddev_samp_order_by._(
      {this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_stddev_samp_order_by rebuild(
          void Function(Gcable_subscriptions_stddev_samp_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_stddev_samp_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_stddev_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_stddev_samp_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_stddev_samp_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_stddev_samp_order_byBuilder
    implements
        Builder<Gcable_subscriptions_stddev_samp_order_by,
            Gcable_subscriptions_stddev_samp_order_byBuilder> {
  _$Gcable_subscriptions_stddev_samp_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_stddev_samp_order_byBuilder();

  Gcable_subscriptions_stddev_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_stddev_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_stddev_samp_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_stddev_samp_order_byBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_stddev_samp_order_by build() => _build();

  _$Gcable_subscriptions_stddev_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_stddev_samp_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_stream_cursor_input
    extends Gcable_subscriptions_stream_cursor_input {
  @override
  final Gcable_subscriptions_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcable_subscriptions_stream_cursor_input(
          [void Function(Gcable_subscriptions_stream_cursor_inputBuilder)?
              updates]) =>
      (new Gcable_subscriptions_stream_cursor_inputBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(initial_value,
        r'Gcable_subscriptions_stream_cursor_input', 'initial_value');
  }

  @override
  Gcable_subscriptions_stream_cursor_input rebuild(
          void Function(Gcable_subscriptions_stream_cursor_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_stream_cursor_inputBuilder toBuilder() =>
      new Gcable_subscriptions_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcable_subscriptions_stream_cursor_inputBuilder
    implements
        Builder<Gcable_subscriptions_stream_cursor_input,
            Gcable_subscriptions_stream_cursor_inputBuilder> {
  _$Gcable_subscriptions_stream_cursor_input? _$v;

  Gcable_subscriptions_stream_cursor_value_inputBuilder? _initial_value;
  Gcable_subscriptions_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcable_subscriptions_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcable_subscriptions_stream_cursor_value_inputBuilder?
              initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcable_subscriptions_stream_cursor_inputBuilder();

  Gcable_subscriptions_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_stream_cursor_input;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_stream_cursor_input build() => _build();

  _$Gcable_subscriptions_stream_cursor_input _build() {
    _$Gcable_subscriptions_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_stream_cursor_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_stream_cursor_value_input
    extends Gcable_subscriptions_stream_cursor_value_input {
  @override
  final String? acc_ph_upi;
  @override
  final int? cable_id;
  @override
  final Gtimestamptz? date;
  @override
  final int? fee;
  @override
  final int? id;
  @override
  final Gtimestamptz? paid_on;
  @override
  final String? trans_id;
  @override
  final String? type;

  factory _$Gcable_subscriptions_stream_cursor_value_input(
          [void Function(Gcable_subscriptions_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcable_subscriptions_stream_cursor_value_inputBuilder()
            ..update(updates))
          ._build();

  _$Gcable_subscriptions_stream_cursor_value_input._(
      {this.acc_ph_upi,
      this.cable_id,
      this.date,
      this.fee,
      this.id,
      this.paid_on,
      this.trans_id,
      this.type})
      : super._();

  @override
  Gcable_subscriptions_stream_cursor_value_input rebuild(
          void Function(Gcable_subscriptions_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcable_subscriptions_stream_cursor_value_inputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_stream_cursor_value_input &&
        acc_ph_upi == other.acc_ph_upi &&
        cable_id == other.cable_id &&
        date == other.date &&
        fee == other.fee &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        type == other.type;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, acc_ph_upi.hashCode), cable_id.hashCode),
                            date.hashCode),
                        fee.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        type.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_stream_cursor_value_input')
          ..add('acc_ph_upi', acc_ph_upi)
          ..add('cable_id', cable_id)
          ..add('date', date)
          ..add('fee', fee)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('type', type))
        .toString();
  }
}

class Gcable_subscriptions_stream_cursor_value_inputBuilder
    implements
        Builder<Gcable_subscriptions_stream_cursor_value_input,
            Gcable_subscriptions_stream_cursor_value_inputBuilder> {
  _$Gcable_subscriptions_stream_cursor_value_input? _$v;

  String? _acc_ph_upi;
  String? get acc_ph_upi => _$this._acc_ph_upi;
  set acc_ph_upi(String? acc_ph_upi) => _$this._acc_ph_upi = acc_ph_upi;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  GtimestamptzBuilder? _date;
  GtimestamptzBuilder get date => _$this._date ??= new GtimestamptzBuilder();
  set date(GtimestamptzBuilder? date) => _$this._date = date;

  int? _fee;
  int? get fee => _$this._fee;
  set fee(int? fee) => _$this._fee = fee;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GtimestamptzBuilder? _paid_on;
  GtimestamptzBuilder get paid_on =>
      _$this._paid_on ??= new GtimestamptzBuilder();
  set paid_on(GtimestamptzBuilder? paid_on) => _$this._paid_on = paid_on;

  String? _trans_id;
  String? get trans_id => _$this._trans_id;
  set trans_id(String? trans_id) => _$this._trans_id = trans_id;

  String? _type;
  String? get type => _$this._type;
  set type(String? type) => _$this._type = type;

  Gcable_subscriptions_stream_cursor_value_inputBuilder();

  Gcable_subscriptions_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _acc_ph_upi = $v.acc_ph_upi;
      _cable_id = $v.cable_id;
      _date = $v.date?.toBuilder();
      _fee = $v.fee;
      _id = $v.id;
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id;
      _type = $v.type;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_stream_cursor_value_inputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_stream_cursor_value_input build() => _build();

  _$Gcable_subscriptions_stream_cursor_value_input _build() {
    _$Gcable_subscriptions_stream_cursor_value_input _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_stream_cursor_value_input._(
              acc_ph_upi: acc_ph_upi,
              cable_id: cable_id,
              date: _date?.build(),
              fee: fee,
              id: id,
              paid_on: _paid_on?.build(),
              trans_id: trans_id,
              type: type);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'date';
        _date?.build();

        _$failedField = 'paid_on';
        _paid_on?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_stream_cursor_value_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_sum_order_by
    extends Gcable_subscriptions_sum_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_sum_order_by(
          [void Function(Gcable_subscriptions_sum_order_byBuilder)? updates]) =>
      (new Gcable_subscriptions_sum_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_sum_order_by._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_sum_order_by rebuild(
          void Function(Gcable_subscriptions_sum_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_sum_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_sum_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_sum_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_sum_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_sum_order_byBuilder
    implements
        Builder<Gcable_subscriptions_sum_order_by,
            Gcable_subscriptions_sum_order_byBuilder> {
  _$Gcable_subscriptions_sum_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_sum_order_byBuilder();

  Gcable_subscriptions_sum_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_sum_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_sum_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_sum_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_sum_order_by build() => _build();

  _$Gcable_subscriptions_sum_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_sum_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_updates extends Gcable_subscriptions_updates {
  @override
  final Gcable_subscriptions_inc_input? G_inc;
  @override
  final Gcable_subscriptions_set_input? G_set;
  @override
  final Gcable_subscriptions_bool_exp where;

  factory _$Gcable_subscriptions_updates(
          [void Function(Gcable_subscriptions_updatesBuilder)? updates]) =>
      (new Gcable_subscriptions_updatesBuilder()..update(updates))._build();

  _$Gcable_subscriptions_updates._(
      {this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gcable_subscriptions_updates', 'where');
  }

  @override
  Gcable_subscriptions_updates rebuild(
          void Function(Gcable_subscriptions_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_updatesBuilder toBuilder() =>
      new Gcable_subscriptions_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcable_subscriptions_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcable_subscriptions_updatesBuilder
    implements
        Builder<Gcable_subscriptions_updates,
            Gcable_subscriptions_updatesBuilder> {
  _$Gcable_subscriptions_updates? _$v;

  Gcable_subscriptions_inc_inputBuilder? _G_inc;
  Gcable_subscriptions_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcable_subscriptions_inc_inputBuilder();
  set G_inc(Gcable_subscriptions_inc_inputBuilder? G_inc) =>
      _$this._G_inc = G_inc;

  Gcable_subscriptions_set_inputBuilder? _G_set;
  Gcable_subscriptions_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcable_subscriptions_set_inputBuilder();
  set G_set(Gcable_subscriptions_set_inputBuilder? G_set) =>
      _$this._G_set = G_set;

  Gcable_subscriptions_bool_expBuilder? _where;
  Gcable_subscriptions_bool_expBuilder get where =>
      _$this._where ??= new Gcable_subscriptions_bool_expBuilder();
  set where(Gcable_subscriptions_bool_expBuilder? where) =>
      _$this._where = where;

  Gcable_subscriptions_updatesBuilder();

  Gcable_subscriptions_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_updates;
  }

  @override
  void update(void Function(Gcable_subscriptions_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_updates build() => _build();

  _$Gcable_subscriptions_updates _build() {
    _$Gcable_subscriptions_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcable_subscriptions_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcable_subscriptions_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_var_pop_order_by
    extends Gcable_subscriptions_var_pop_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_var_pop_order_by(
          [void Function(Gcable_subscriptions_var_pop_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_var_pop_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_var_pop_order_by._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_var_pop_order_by rebuild(
          void Function(Gcable_subscriptions_var_pop_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_var_pop_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_var_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_var_pop_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_var_pop_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_var_pop_order_byBuilder
    implements
        Builder<Gcable_subscriptions_var_pop_order_by,
            Gcable_subscriptions_var_pop_order_byBuilder> {
  _$Gcable_subscriptions_var_pop_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_var_pop_order_byBuilder();

  Gcable_subscriptions_var_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_var_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_var_pop_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_var_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_var_pop_order_by build() => _build();

  _$Gcable_subscriptions_var_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_var_pop_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_var_samp_order_by
    extends Gcable_subscriptions_var_samp_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_var_samp_order_by(
          [void Function(Gcable_subscriptions_var_samp_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_var_samp_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_var_samp_order_by._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_var_samp_order_by rebuild(
          void Function(Gcable_subscriptions_var_samp_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_var_samp_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_var_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_var_samp_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_var_samp_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_var_samp_order_byBuilder
    implements
        Builder<Gcable_subscriptions_var_samp_order_by,
            Gcable_subscriptions_var_samp_order_byBuilder> {
  _$Gcable_subscriptions_var_samp_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_var_samp_order_byBuilder();

  Gcable_subscriptions_var_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_var_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_var_samp_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_var_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_var_samp_order_by build() => _build();

  _$Gcable_subscriptions_var_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_var_samp_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcable_subscriptions_variance_order_by
    extends Gcable_subscriptions_variance_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? fee;
  @override
  final Gorder_by? id;

  factory _$Gcable_subscriptions_variance_order_by(
          [void Function(Gcable_subscriptions_variance_order_byBuilder)?
              updates]) =>
      (new Gcable_subscriptions_variance_order_byBuilder()..update(updates))
          ._build();

  _$Gcable_subscriptions_variance_order_by._({this.cable_id, this.fee, this.id})
      : super._();

  @override
  Gcable_subscriptions_variance_order_by rebuild(
          void Function(Gcable_subscriptions_variance_order_byBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcable_subscriptions_variance_order_byBuilder toBuilder() =>
      new Gcable_subscriptions_variance_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcable_subscriptions_variance_order_by &&
        cable_id == other.cable_id &&
        fee == other.fee &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, cable_id.hashCode), fee.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcable_subscriptions_variance_order_by')
          ..add('cable_id', cable_id)
          ..add('fee', fee)
          ..add('id', id))
        .toString();
  }
}

class Gcable_subscriptions_variance_order_byBuilder
    implements
        Builder<Gcable_subscriptions_variance_order_by,
            Gcable_subscriptions_variance_order_byBuilder> {
  _$Gcable_subscriptions_variance_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _fee;
  Gorder_by? get fee => _$this._fee;
  set fee(Gorder_by? fee) => _$this._fee = fee;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gcable_subscriptions_variance_order_byBuilder();

  Gcable_subscriptions_variance_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _fee = $v.fee;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcable_subscriptions_variance_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcable_subscriptions_variance_order_by;
  }

  @override
  void update(
      void Function(Gcable_subscriptions_variance_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcable_subscriptions_variance_order_by build() => _build();

  _$Gcable_subscriptions_variance_order_by _build() {
    final _$result = _$v ??
        new _$Gcable_subscriptions_variance_order_by._(
            cable_id: cable_id, fee: fee, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_aggregate_bool_exp extends Gcollectors_aggregate_bool_exp {
  @override
  final Gcollectors_aggregate_bool_exp_bool_and? bool_and;
  @override
  final Gcollectors_aggregate_bool_exp_bool_or? bool_or;
  @override
  final Gcollectors_aggregate_bool_exp_count? count;

  factory _$Gcollectors_aggregate_bool_exp(
          [void Function(Gcollectors_aggregate_bool_expBuilder)? updates]) =>
      (new Gcollectors_aggregate_bool_expBuilder()..update(updates))._build();

  _$Gcollectors_aggregate_bool_exp._({this.bool_and, this.bool_or, this.count})
      : super._();

  @override
  Gcollectors_aggregate_bool_exp rebuild(
          void Function(Gcollectors_aggregate_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_aggregate_bool_expBuilder toBuilder() =>
      new Gcollectors_aggregate_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_aggregate_bool_exp &&
        bool_and == other.bool_and &&
        bool_or == other.bool_or &&
        count == other.count;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, bool_and.hashCode), bool_or.hashCode), count.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_aggregate_bool_exp')
          ..add('bool_and', bool_and)
          ..add('bool_or', bool_or)
          ..add('count', count))
        .toString();
  }
}

class Gcollectors_aggregate_bool_expBuilder
    implements
        Builder<Gcollectors_aggregate_bool_exp,
            Gcollectors_aggregate_bool_expBuilder> {
  _$Gcollectors_aggregate_bool_exp? _$v;

  Gcollectors_aggregate_bool_exp_bool_andBuilder? _bool_and;
  Gcollectors_aggregate_bool_exp_bool_andBuilder get bool_and =>
      _$this._bool_and ??= new Gcollectors_aggregate_bool_exp_bool_andBuilder();
  set bool_and(Gcollectors_aggregate_bool_exp_bool_andBuilder? bool_and) =>
      _$this._bool_and = bool_and;

  Gcollectors_aggregate_bool_exp_bool_orBuilder? _bool_or;
  Gcollectors_aggregate_bool_exp_bool_orBuilder get bool_or =>
      _$this._bool_or ??= new Gcollectors_aggregate_bool_exp_bool_orBuilder();
  set bool_or(Gcollectors_aggregate_bool_exp_bool_orBuilder? bool_or) =>
      _$this._bool_or = bool_or;

  Gcollectors_aggregate_bool_exp_countBuilder? _count;
  Gcollectors_aggregate_bool_exp_countBuilder get count =>
      _$this._count ??= new Gcollectors_aggregate_bool_exp_countBuilder();
  set count(Gcollectors_aggregate_bool_exp_countBuilder? count) =>
      _$this._count = count;

  Gcollectors_aggregate_bool_expBuilder();

  Gcollectors_aggregate_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _bool_and = $v.bool_and?.toBuilder();
      _bool_or = $v.bool_or?.toBuilder();
      _count = $v.count?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_aggregate_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_aggregate_bool_exp;
  }

  @override
  void update(void Function(Gcollectors_aggregate_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_aggregate_bool_exp build() => _build();

  _$Gcollectors_aggregate_bool_exp _build() {
    _$Gcollectors_aggregate_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_aggregate_bool_exp._(
              bool_and: _bool_and?.build(),
              bool_or: _bool_or?.build(),
              count: _count?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'bool_and';
        _bool_and?.build();
        _$failedField = 'bool_or';
        _bool_or?.build();
        _$failedField = 'count';
        _count?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_aggregate_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_aggregate_bool_exp_bool_and
    extends Gcollectors_aggregate_bool_exp_bool_and {
  @override
  final Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns
      arguments;
  @override
  final bool? distinct;
  @override
  final Gcollectors_bool_exp? filter;
  @override
  final GBoolean_comparison_exp predicate;

  factory _$Gcollectors_aggregate_bool_exp_bool_and(
          [void Function(Gcollectors_aggregate_bool_exp_bool_andBuilder)?
              updates]) =>
      (new Gcollectors_aggregate_bool_exp_bool_andBuilder()..update(updates))
          ._build();

  _$Gcollectors_aggregate_bool_exp_bool_and._(
      {required this.arguments,
      this.distinct,
      this.filter,
      required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        arguments, r'Gcollectors_aggregate_bool_exp_bool_and', 'arguments');
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gcollectors_aggregate_bool_exp_bool_and', 'predicate');
  }

  @override
  Gcollectors_aggregate_bool_exp_bool_and rebuild(
          void Function(Gcollectors_aggregate_bool_exp_bool_andBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_aggregate_bool_exp_bool_andBuilder toBuilder() =>
      new Gcollectors_aggregate_bool_exp_bool_andBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_aggregate_bool_exp_bool_and &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcollectors_aggregate_bool_exp_bool_and')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gcollectors_aggregate_bool_exp_bool_andBuilder
    implements
        Builder<Gcollectors_aggregate_bool_exp_bool_and,
            Gcollectors_aggregate_bool_exp_bool_andBuilder> {
  _$Gcollectors_aggregate_bool_exp_bool_and? _$v;

  Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns?
      _arguments;
  Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns?
      get arguments => _$this._arguments;
  set arguments(
          Gcollectors_select_column_collectors_aggregate_bool_exp_bool_and_arguments_columns?
              arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gcollectors_bool_expBuilder? _filter;
  Gcollectors_bool_expBuilder get filter =>
      _$this._filter ??= new Gcollectors_bool_expBuilder();
  set filter(Gcollectors_bool_expBuilder? filter) => _$this._filter = filter;

  GBoolean_comparison_expBuilder? _predicate;
  GBoolean_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GBoolean_comparison_expBuilder();
  set predicate(GBoolean_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gcollectors_aggregate_bool_exp_bool_andBuilder();

  Gcollectors_aggregate_bool_exp_bool_andBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments;
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_aggregate_bool_exp_bool_and other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_aggregate_bool_exp_bool_and;
  }

  @override
  void update(
      void Function(Gcollectors_aggregate_bool_exp_bool_andBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_aggregate_bool_exp_bool_and build() => _build();

  _$Gcollectors_aggregate_bool_exp_bool_and _build() {
    _$Gcollectors_aggregate_bool_exp_bool_and _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_aggregate_bool_exp_bool_and._(
              arguments: BuiltValueNullFieldError.checkNotNull(arguments,
                  r'Gcollectors_aggregate_bool_exp_bool_and', 'arguments'),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_aggregate_bool_exp_bool_and',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_aggregate_bool_exp_bool_or
    extends Gcollectors_aggregate_bool_exp_bool_or {
  @override
  final Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns
      arguments;
  @override
  final bool? distinct;
  @override
  final Gcollectors_bool_exp? filter;
  @override
  final GBoolean_comparison_exp predicate;

  factory _$Gcollectors_aggregate_bool_exp_bool_or(
          [void Function(Gcollectors_aggregate_bool_exp_bool_orBuilder)?
              updates]) =>
      (new Gcollectors_aggregate_bool_exp_bool_orBuilder()..update(updates))
          ._build();

  _$Gcollectors_aggregate_bool_exp_bool_or._(
      {required this.arguments,
      this.distinct,
      this.filter,
      required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        arguments, r'Gcollectors_aggregate_bool_exp_bool_or', 'arguments');
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gcollectors_aggregate_bool_exp_bool_or', 'predicate');
  }

  @override
  Gcollectors_aggregate_bool_exp_bool_or rebuild(
          void Function(Gcollectors_aggregate_bool_exp_bool_orBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_aggregate_bool_exp_bool_orBuilder toBuilder() =>
      new Gcollectors_aggregate_bool_exp_bool_orBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_aggregate_bool_exp_bool_or &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcollectors_aggregate_bool_exp_bool_or')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gcollectors_aggregate_bool_exp_bool_orBuilder
    implements
        Builder<Gcollectors_aggregate_bool_exp_bool_or,
            Gcollectors_aggregate_bool_exp_bool_orBuilder> {
  _$Gcollectors_aggregate_bool_exp_bool_or? _$v;

  Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns?
      _arguments;
  Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns?
      get arguments => _$this._arguments;
  set arguments(
          Gcollectors_select_column_collectors_aggregate_bool_exp_bool_or_arguments_columns?
              arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gcollectors_bool_expBuilder? _filter;
  Gcollectors_bool_expBuilder get filter =>
      _$this._filter ??= new Gcollectors_bool_expBuilder();
  set filter(Gcollectors_bool_expBuilder? filter) => _$this._filter = filter;

  GBoolean_comparison_expBuilder? _predicate;
  GBoolean_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GBoolean_comparison_expBuilder();
  set predicate(GBoolean_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gcollectors_aggregate_bool_exp_bool_orBuilder();

  Gcollectors_aggregate_bool_exp_bool_orBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments;
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_aggregate_bool_exp_bool_or other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_aggregate_bool_exp_bool_or;
  }

  @override
  void update(
      void Function(Gcollectors_aggregate_bool_exp_bool_orBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_aggregate_bool_exp_bool_or build() => _build();

  _$Gcollectors_aggregate_bool_exp_bool_or _build() {
    _$Gcollectors_aggregate_bool_exp_bool_or _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_aggregate_bool_exp_bool_or._(
              arguments: BuiltValueNullFieldError.checkNotNull(arguments,
                  r'Gcollectors_aggregate_bool_exp_bool_or', 'arguments'),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_aggregate_bool_exp_bool_or',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_aggregate_bool_exp_count
    extends Gcollectors_aggregate_bool_exp_count {
  @override
  final BuiltList<Gcollectors_select_column>? arguments;
  @override
  final bool? distinct;
  @override
  final Gcollectors_bool_exp? filter;
  @override
  final GInt_comparison_exp predicate;

  factory _$Gcollectors_aggregate_bool_exp_count(
          [void Function(Gcollectors_aggregate_bool_exp_countBuilder)?
              updates]) =>
      (new Gcollectors_aggregate_bool_exp_countBuilder()..update(updates))
          ._build();

  _$Gcollectors_aggregate_bool_exp_count._(
      {this.arguments, this.distinct, this.filter, required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gcollectors_aggregate_bool_exp_count', 'predicate');
  }

  @override
  Gcollectors_aggregate_bool_exp_count rebuild(
          void Function(Gcollectors_aggregate_bool_exp_countBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_aggregate_bool_exp_countBuilder toBuilder() =>
      new Gcollectors_aggregate_bool_exp_countBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_aggregate_bool_exp_count &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_aggregate_bool_exp_count')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gcollectors_aggregate_bool_exp_countBuilder
    implements
        Builder<Gcollectors_aggregate_bool_exp_count,
            Gcollectors_aggregate_bool_exp_countBuilder> {
  _$Gcollectors_aggregate_bool_exp_count? _$v;

  ListBuilder<Gcollectors_select_column>? _arguments;
  ListBuilder<Gcollectors_select_column> get arguments =>
      _$this._arguments ??= new ListBuilder<Gcollectors_select_column>();
  set arguments(ListBuilder<Gcollectors_select_column>? arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gcollectors_bool_expBuilder? _filter;
  Gcollectors_bool_expBuilder get filter =>
      _$this._filter ??= new Gcollectors_bool_expBuilder();
  set filter(Gcollectors_bool_expBuilder? filter) => _$this._filter = filter;

  GInt_comparison_expBuilder? _predicate;
  GInt_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GInt_comparison_expBuilder();
  set predicate(GInt_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gcollectors_aggregate_bool_exp_countBuilder();

  Gcollectors_aggregate_bool_exp_countBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments?.toBuilder();
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_aggregate_bool_exp_count other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_aggregate_bool_exp_count;
  }

  @override
  void update(
      void Function(Gcollectors_aggregate_bool_exp_countBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_aggregate_bool_exp_count build() => _build();

  _$Gcollectors_aggregate_bool_exp_count _build() {
    _$Gcollectors_aggregate_bool_exp_count _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_aggregate_bool_exp_count._(
              arguments: _arguments?.build(),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'arguments';
        _arguments?.build();

        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_aggregate_bool_exp_count',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_aggregate_order_by extends Gcollectors_aggregate_order_by {
  @override
  final Gcollectors_avg_order_by? avg;
  @override
  final Gorder_by? count;
  @override
  final Gcollectors_max_order_by? max;
  @override
  final Gcollectors_min_order_by? min;
  @override
  final Gcollectors_stddev_order_by? stddev;
  @override
  final Gcollectors_stddev_pop_order_by? stddev_pop;
  @override
  final Gcollectors_stddev_samp_order_by? stddev_samp;
  @override
  final Gcollectors_sum_order_by? sum;
  @override
  final Gcollectors_var_pop_order_by? var_pop;
  @override
  final Gcollectors_var_samp_order_by? var_samp;
  @override
  final Gcollectors_variance_order_by? variance;

  factory _$Gcollectors_aggregate_order_by(
          [void Function(Gcollectors_aggregate_order_byBuilder)? updates]) =>
      (new Gcollectors_aggregate_order_byBuilder()..update(updates))._build();

  _$Gcollectors_aggregate_order_by._(
      {this.avg,
      this.count,
      this.max,
      this.min,
      this.stddev,
      this.stddev_pop,
      this.stddev_samp,
      this.sum,
      this.var_pop,
      this.var_samp,
      this.variance})
      : super._();

  @override
  Gcollectors_aggregate_order_by rebuild(
          void Function(Gcollectors_aggregate_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_aggregate_order_byBuilder toBuilder() =>
      new Gcollectors_aggregate_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_aggregate_order_by &&
        avg == other.avg &&
        count == other.count &&
        max == other.max &&
        min == other.min &&
        stddev == other.stddev &&
        stddev_pop == other.stddev_pop &&
        stddev_samp == other.stddev_samp &&
        sum == other.sum &&
        var_pop == other.var_pop &&
        var_samp == other.var_samp &&
        variance == other.variance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, avg.hashCode),
                                            count.hashCode),
                                        max.hashCode),
                                    min.hashCode),
                                stddev.hashCode),
                            stddev_pop.hashCode),
                        stddev_samp.hashCode),
                    sum.hashCode),
                var_pop.hashCode),
            var_samp.hashCode),
        variance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_aggregate_order_by')
          ..add('avg', avg)
          ..add('count', count)
          ..add('max', max)
          ..add('min', min)
          ..add('stddev', stddev)
          ..add('stddev_pop', stddev_pop)
          ..add('stddev_samp', stddev_samp)
          ..add('sum', sum)
          ..add('var_pop', var_pop)
          ..add('var_samp', var_samp)
          ..add('variance', variance))
        .toString();
  }
}

class Gcollectors_aggregate_order_byBuilder
    implements
        Builder<Gcollectors_aggregate_order_by,
            Gcollectors_aggregate_order_byBuilder> {
  _$Gcollectors_aggregate_order_by? _$v;

  Gcollectors_avg_order_byBuilder? _avg;
  Gcollectors_avg_order_byBuilder get avg =>
      _$this._avg ??= new Gcollectors_avg_order_byBuilder();
  set avg(Gcollectors_avg_order_byBuilder? avg) => _$this._avg = avg;

  Gorder_by? _count;
  Gorder_by? get count => _$this._count;
  set count(Gorder_by? count) => _$this._count = count;

  Gcollectors_max_order_byBuilder? _max;
  Gcollectors_max_order_byBuilder get max =>
      _$this._max ??= new Gcollectors_max_order_byBuilder();
  set max(Gcollectors_max_order_byBuilder? max) => _$this._max = max;

  Gcollectors_min_order_byBuilder? _min;
  Gcollectors_min_order_byBuilder get min =>
      _$this._min ??= new Gcollectors_min_order_byBuilder();
  set min(Gcollectors_min_order_byBuilder? min) => _$this._min = min;

  Gcollectors_stddev_order_byBuilder? _stddev;
  Gcollectors_stddev_order_byBuilder get stddev =>
      _$this._stddev ??= new Gcollectors_stddev_order_byBuilder();
  set stddev(Gcollectors_stddev_order_byBuilder? stddev) =>
      _$this._stddev = stddev;

  Gcollectors_stddev_pop_order_byBuilder? _stddev_pop;
  Gcollectors_stddev_pop_order_byBuilder get stddev_pop =>
      _$this._stddev_pop ??= new Gcollectors_stddev_pop_order_byBuilder();
  set stddev_pop(Gcollectors_stddev_pop_order_byBuilder? stddev_pop) =>
      _$this._stddev_pop = stddev_pop;

  Gcollectors_stddev_samp_order_byBuilder? _stddev_samp;
  Gcollectors_stddev_samp_order_byBuilder get stddev_samp =>
      _$this._stddev_samp ??= new Gcollectors_stddev_samp_order_byBuilder();
  set stddev_samp(Gcollectors_stddev_samp_order_byBuilder? stddev_samp) =>
      _$this._stddev_samp = stddev_samp;

  Gcollectors_sum_order_byBuilder? _sum;
  Gcollectors_sum_order_byBuilder get sum =>
      _$this._sum ??= new Gcollectors_sum_order_byBuilder();
  set sum(Gcollectors_sum_order_byBuilder? sum) => _$this._sum = sum;

  Gcollectors_var_pop_order_byBuilder? _var_pop;
  Gcollectors_var_pop_order_byBuilder get var_pop =>
      _$this._var_pop ??= new Gcollectors_var_pop_order_byBuilder();
  set var_pop(Gcollectors_var_pop_order_byBuilder? var_pop) =>
      _$this._var_pop = var_pop;

  Gcollectors_var_samp_order_byBuilder? _var_samp;
  Gcollectors_var_samp_order_byBuilder get var_samp =>
      _$this._var_samp ??= new Gcollectors_var_samp_order_byBuilder();
  set var_samp(Gcollectors_var_samp_order_byBuilder? var_samp) =>
      _$this._var_samp = var_samp;

  Gcollectors_variance_order_byBuilder? _variance;
  Gcollectors_variance_order_byBuilder get variance =>
      _$this._variance ??= new Gcollectors_variance_order_byBuilder();
  set variance(Gcollectors_variance_order_byBuilder? variance) =>
      _$this._variance = variance;

  Gcollectors_aggregate_order_byBuilder();

  Gcollectors_aggregate_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _avg = $v.avg?.toBuilder();
      _count = $v.count;
      _max = $v.max?.toBuilder();
      _min = $v.min?.toBuilder();
      _stddev = $v.stddev?.toBuilder();
      _stddev_pop = $v.stddev_pop?.toBuilder();
      _stddev_samp = $v.stddev_samp?.toBuilder();
      _sum = $v.sum?.toBuilder();
      _var_pop = $v.var_pop?.toBuilder();
      _var_samp = $v.var_samp?.toBuilder();
      _variance = $v.variance?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_aggregate_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_aggregate_order_by;
  }

  @override
  void update(void Function(Gcollectors_aggregate_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_aggregate_order_by build() => _build();

  _$Gcollectors_aggregate_order_by _build() {
    _$Gcollectors_aggregate_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_aggregate_order_by._(
              avg: _avg?.build(),
              count: count,
              max: _max?.build(),
              min: _min?.build(),
              stddev: _stddev?.build(),
              stddev_pop: _stddev_pop?.build(),
              stddev_samp: _stddev_samp?.build(),
              sum: _sum?.build(),
              var_pop: _var_pop?.build(),
              var_samp: _var_samp?.build(),
              variance: _variance?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'avg';
        _avg?.build();

        _$failedField = 'max';
        _max?.build();
        _$failedField = 'min';
        _min?.build();
        _$failedField = 'stddev';
        _stddev?.build();
        _$failedField = 'stddev_pop';
        _stddev_pop?.build();
        _$failedField = 'stddev_samp';
        _stddev_samp?.build();
        _$failedField = 'sum';
        _sum?.build();
        _$failedField = 'var_pop';
        _var_pop?.build();
        _$failedField = 'var_samp';
        _var_samp?.build();
        _$failedField = 'variance';
        _variance?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_aggregate_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_arr_rel_insert_input
    extends Gcollectors_arr_rel_insert_input {
  @override
  final BuiltList<Gcollectors_insert_input> data;
  @override
  final Gcollectors_on_conflict? on_conflict;

  factory _$Gcollectors_arr_rel_insert_input(
          [void Function(Gcollectors_arr_rel_insert_inputBuilder)? updates]) =>
      (new Gcollectors_arr_rel_insert_inputBuilder()..update(updates))._build();

  _$Gcollectors_arr_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcollectors_arr_rel_insert_input', 'data');
  }

  @override
  Gcollectors_arr_rel_insert_input rebuild(
          void Function(Gcollectors_arr_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_arr_rel_insert_inputBuilder toBuilder() =>
      new Gcollectors_arr_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_arr_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_arr_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcollectors_arr_rel_insert_inputBuilder
    implements
        Builder<Gcollectors_arr_rel_insert_input,
            Gcollectors_arr_rel_insert_inputBuilder> {
  _$Gcollectors_arr_rel_insert_input? _$v;

  ListBuilder<Gcollectors_insert_input>? _data;
  ListBuilder<Gcollectors_insert_input> get data =>
      _$this._data ??= new ListBuilder<Gcollectors_insert_input>();
  set data(ListBuilder<Gcollectors_insert_input>? data) => _$this._data = data;

  Gcollectors_on_conflictBuilder? _on_conflict;
  Gcollectors_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcollectors_on_conflictBuilder();
  set on_conflict(Gcollectors_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcollectors_arr_rel_insert_inputBuilder();

  Gcollectors_arr_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_arr_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_arr_rel_insert_input;
  }

  @override
  void update(void Function(Gcollectors_arr_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_arr_rel_insert_input build() => _build();

  _$Gcollectors_arr_rel_insert_input _build() {
    _$Gcollectors_arr_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_arr_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_arr_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_avg_order_by extends Gcollectors_avg_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_avg_order_by(
          [void Function(Gcollectors_avg_order_byBuilder)? updates]) =>
      (new Gcollectors_avg_order_byBuilder()..update(updates))._build();

  _$Gcollectors_avg_order_by._({this.belongs_to, this.collec_id}) : super._();

  @override
  Gcollectors_avg_order_by rebuild(
          void Function(Gcollectors_avg_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_avg_order_byBuilder toBuilder() =>
      new Gcollectors_avg_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_avg_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_avg_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_avg_order_byBuilder
    implements
        Builder<Gcollectors_avg_order_by, Gcollectors_avg_order_byBuilder> {
  _$Gcollectors_avg_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_avg_order_byBuilder();

  Gcollectors_avg_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_avg_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_avg_order_by;
  }

  @override
  void update(void Function(Gcollectors_avg_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_avg_order_by build() => _build();

  _$Gcollectors_avg_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_avg_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_bool_exp extends Gcollectors_bool_exp {
  @override
  final BuiltList<Gcollectors_bool_exp>? G_and;
  @override
  final Gcollectors_bool_exp? G_not;
  @override
  final BuiltList<Gcollectors_bool_exp>? G_or;
  @override
  final GString_comparison_exp? address;
  @override
  final GInt_comparison_exp? belongs_to;
  @override
  final Gcable_opr_bool_exp? cable_opr;
  @override
  final GInt_comparison_exp? collec_id;
  @override
  final GString_comparison_exp? device_token;
  @override
  final GString_comparison_exp? email;
  @override
  final GBoolean_comparison_exp? isAdmin;
  @override
  final GString_comparison_exp? mob_no;
  @override
  final GString_comparison_exp? name;
  @override
  final GString_comparison_exp? password;
  @override
  final Gpayments_bool_exp? payments;
  @override
  final Gpayments_aggregate_bool_exp? payments_aggregate;

  factory _$Gcollectors_bool_exp(
          [void Function(Gcollectors_bool_expBuilder)? updates]) =>
      (new Gcollectors_bool_expBuilder()..update(updates))._build();

  _$Gcollectors_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.address,
      this.belongs_to,
      this.cable_opr,
      this.collec_id,
      this.device_token,
      this.email,
      this.isAdmin,
      this.mob_no,
      this.name,
      this.password,
      this.payments,
      this.payments_aggregate})
      : super._();

  @override
  Gcollectors_bool_exp rebuild(
          void Function(Gcollectors_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_bool_expBuilder toBuilder() =>
      new Gcollectors_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        cable_opr == other.cable_opr &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        isAdmin == other.isAdmin &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password &&
        payments == other.payments &&
        payments_aggregate == other.payments_aggregate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(0,
                                                                G_and.hashCode),
                                                            G_not.hashCode),
                                                        G_or.hashCode),
                                                    address.hashCode),
                                                belongs_to.hashCode),
                                            cable_opr.hashCode),
                                        collec_id.hashCode),
                                    device_token.hashCode),
                                email.hashCode),
                            isAdmin.hashCode),
                        mob_no.hashCode),
                    name.hashCode),
                password.hashCode),
            payments.hashCode),
        payments_aggregate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('cable_opr', cable_opr)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('isAdmin', isAdmin)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password)
          ..add('payments', payments)
          ..add('payments_aggregate', payments_aggregate))
        .toString();
  }
}

class Gcollectors_bool_expBuilder
    implements Builder<Gcollectors_bool_exp, Gcollectors_bool_expBuilder> {
  _$Gcollectors_bool_exp? _$v;

  ListBuilder<Gcollectors_bool_exp>? _G_and;
  ListBuilder<Gcollectors_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcollectors_bool_exp>();
  set G_and(ListBuilder<Gcollectors_bool_exp>? G_and) => _$this._G_and = G_and;

  Gcollectors_bool_expBuilder? _G_not;
  Gcollectors_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcollectors_bool_expBuilder();
  set G_not(Gcollectors_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gcollectors_bool_exp>? _G_or;
  ListBuilder<Gcollectors_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcollectors_bool_exp>();
  set G_or(ListBuilder<Gcollectors_bool_exp>? G_or) => _$this._G_or = G_or;

  GString_comparison_expBuilder? _address;
  GString_comparison_expBuilder get address =>
      _$this._address ??= new GString_comparison_expBuilder();
  set address(GString_comparison_expBuilder? address) =>
      _$this._address = address;

  GInt_comparison_expBuilder? _belongs_to;
  GInt_comparison_expBuilder get belongs_to =>
      _$this._belongs_to ??= new GInt_comparison_expBuilder();
  set belongs_to(GInt_comparison_expBuilder? belongs_to) =>
      _$this._belongs_to = belongs_to;

  Gcable_opr_bool_expBuilder? _cable_opr;
  Gcable_opr_bool_expBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_bool_expBuilder();
  set cable_opr(Gcable_opr_bool_expBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  GInt_comparison_expBuilder? _collec_id;
  GInt_comparison_expBuilder get collec_id =>
      _$this._collec_id ??= new GInt_comparison_expBuilder();
  set collec_id(GInt_comparison_expBuilder? collec_id) =>
      _$this._collec_id = collec_id;

  GString_comparison_expBuilder? _device_token;
  GString_comparison_expBuilder get device_token =>
      _$this._device_token ??= new GString_comparison_expBuilder();
  set device_token(GString_comparison_expBuilder? device_token) =>
      _$this._device_token = device_token;

  GString_comparison_expBuilder? _email;
  GString_comparison_expBuilder get email =>
      _$this._email ??= new GString_comparison_expBuilder();
  set email(GString_comparison_expBuilder? email) => _$this._email = email;

  GBoolean_comparison_expBuilder? _isAdmin;
  GBoolean_comparison_expBuilder get isAdmin =>
      _$this._isAdmin ??= new GBoolean_comparison_expBuilder();
  set isAdmin(GBoolean_comparison_expBuilder? isAdmin) =>
      _$this._isAdmin = isAdmin;

  GString_comparison_expBuilder? _mob_no;
  GString_comparison_expBuilder get mob_no =>
      _$this._mob_no ??= new GString_comparison_expBuilder();
  set mob_no(GString_comparison_expBuilder? mob_no) => _$this._mob_no = mob_no;

  GString_comparison_expBuilder? _name;
  GString_comparison_expBuilder get name =>
      _$this._name ??= new GString_comparison_expBuilder();
  set name(GString_comparison_expBuilder? name) => _$this._name = name;

  GString_comparison_expBuilder? _password;
  GString_comparison_expBuilder get password =>
      _$this._password ??= new GString_comparison_expBuilder();
  set password(GString_comparison_expBuilder? password) =>
      _$this._password = password;

  Gpayments_bool_expBuilder? _payments;
  Gpayments_bool_expBuilder get payments =>
      _$this._payments ??= new Gpayments_bool_expBuilder();
  set payments(Gpayments_bool_expBuilder? payments) =>
      _$this._payments = payments;

  Gpayments_aggregate_bool_expBuilder? _payments_aggregate;
  Gpayments_aggregate_bool_expBuilder get payments_aggregate =>
      _$this._payments_aggregate ??= new Gpayments_aggregate_bool_expBuilder();
  set payments_aggregate(
          Gpayments_aggregate_bool_expBuilder? payments_aggregate) =>
      _$this._payments_aggregate = payments_aggregate;

  Gcollectors_bool_expBuilder();

  Gcollectors_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _address = $v.address?.toBuilder();
      _belongs_to = $v.belongs_to?.toBuilder();
      _cable_opr = $v.cable_opr?.toBuilder();
      _collec_id = $v.collec_id?.toBuilder();
      _device_token = $v.device_token?.toBuilder();
      _email = $v.email?.toBuilder();
      _isAdmin = $v.isAdmin?.toBuilder();
      _mob_no = $v.mob_no?.toBuilder();
      _name = $v.name?.toBuilder();
      _password = $v.password?.toBuilder();
      _payments = $v.payments?.toBuilder();
      _payments_aggregate = $v.payments_aggregate?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_bool_exp;
  }

  @override
  void update(void Function(Gcollectors_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_bool_exp build() => _build();

  _$Gcollectors_bool_exp _build() {
    _$Gcollectors_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              address: _address?.build(),
              belongs_to: _belongs_to?.build(),
              cable_opr: _cable_opr?.build(),
              collec_id: _collec_id?.build(),
              device_token: _device_token?.build(),
              email: _email?.build(),
              isAdmin: _isAdmin?.build(),
              mob_no: _mob_no?.build(),
              name: _name?.build(),
              password: _password?.build(),
              payments: _payments?.build(),
              payments_aggregate: _payments_aggregate?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'address';
        _address?.build();
        _$failedField = 'belongs_to';
        _belongs_to?.build();
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'collec_id';
        _collec_id?.build();
        _$failedField = 'device_token';
        _device_token?.build();
        _$failedField = 'email';
        _email?.build();
        _$failedField = 'isAdmin';
        _isAdmin?.build();
        _$failedField = 'mob_no';
        _mob_no?.build();
        _$failedField = 'name';
        _name?.build();
        _$failedField = 'password';
        _password?.build();
        _$failedField = 'payments';
        _payments?.build();
        _$failedField = 'payments_aggregate';
        _payments_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_inc_input extends Gcollectors_inc_input {
  @override
  final int? belongs_to;
  @override
  final int? collec_id;

  factory _$Gcollectors_inc_input(
          [void Function(Gcollectors_inc_inputBuilder)? updates]) =>
      (new Gcollectors_inc_inputBuilder()..update(updates))._build();

  _$Gcollectors_inc_input._({this.belongs_to, this.collec_id}) : super._();

  @override
  Gcollectors_inc_input rebuild(
          void Function(Gcollectors_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_inc_inputBuilder toBuilder() =>
      new Gcollectors_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_inc_input &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_inc_input')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_inc_inputBuilder
    implements Builder<Gcollectors_inc_input, Gcollectors_inc_inputBuilder> {
  _$Gcollectors_inc_input? _$v;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  int? _collec_id;
  int? get collec_id => _$this._collec_id;
  set collec_id(int? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_inc_inputBuilder();

  Gcollectors_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_inc_input;
  }

  @override
  void update(void Function(Gcollectors_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_inc_input build() => _build();

  _$Gcollectors_inc_input _build() {
    final _$result = _$v ??
        new _$Gcollectors_inc_input._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_insert_input extends Gcollectors_insert_input {
  @override
  final String? address;
  @override
  final int? belongs_to;
  @override
  final Gcable_opr_obj_rel_insert_input? cable_opr;
  @override
  final int? collec_id;
  @override
  final String? device_token;
  @override
  final String? email;
  @override
  final bool? isAdmin;
  @override
  final String? mob_no;
  @override
  final String? name;
  @override
  final String? password;
  @override
  final Gpayments_arr_rel_insert_input? payments;

  factory _$Gcollectors_insert_input(
          [void Function(Gcollectors_insert_inputBuilder)? updates]) =>
      (new Gcollectors_insert_inputBuilder()..update(updates))._build();

  _$Gcollectors_insert_input._(
      {this.address,
      this.belongs_to,
      this.cable_opr,
      this.collec_id,
      this.device_token,
      this.email,
      this.isAdmin,
      this.mob_no,
      this.name,
      this.password,
      this.payments})
      : super._();

  @override
  Gcollectors_insert_input rebuild(
          void Function(Gcollectors_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_insert_inputBuilder toBuilder() =>
      new Gcollectors_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_insert_input &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        cable_opr == other.cable_opr &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        isAdmin == other.isAdmin &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password &&
        payments == other.payments;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, address.hashCode),
                                            belongs_to.hashCode),
                                        cable_opr.hashCode),
                                    collec_id.hashCode),
                                device_token.hashCode),
                            email.hashCode),
                        isAdmin.hashCode),
                    mob_no.hashCode),
                name.hashCode),
            password.hashCode),
        payments.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_insert_input')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('cable_opr', cable_opr)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('isAdmin', isAdmin)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password)
          ..add('payments', payments))
        .toString();
  }
}

class Gcollectors_insert_inputBuilder
    implements
        Builder<Gcollectors_insert_input, Gcollectors_insert_inputBuilder> {
  _$Gcollectors_insert_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  Gcable_opr_obj_rel_insert_inputBuilder? _cable_opr;
  Gcable_opr_obj_rel_insert_inputBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_obj_rel_insert_inputBuilder();
  set cable_opr(Gcable_opr_obj_rel_insert_inputBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  int? _collec_id;
  int? get collec_id => _$this._collec_id;
  set collec_id(int? collec_id) => _$this._collec_id = collec_id;

  String? _device_token;
  String? get device_token => _$this._device_token;
  set device_token(String? device_token) => _$this._device_token = device_token;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isAdmin;
  bool? get isAdmin => _$this._isAdmin;
  set isAdmin(bool? isAdmin) => _$this._isAdmin = isAdmin;

  String? _mob_no;
  String? get mob_no => _$this._mob_no;
  set mob_no(String? mob_no) => _$this._mob_no = mob_no;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  Gpayments_arr_rel_insert_inputBuilder? _payments;
  Gpayments_arr_rel_insert_inputBuilder get payments =>
      _$this._payments ??= new Gpayments_arr_rel_insert_inputBuilder();
  set payments(Gpayments_arr_rel_insert_inputBuilder? payments) =>
      _$this._payments = payments;

  Gcollectors_insert_inputBuilder();

  Gcollectors_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _cable_opr = $v.cable_opr?.toBuilder();
      _collec_id = $v.collec_id;
      _device_token = $v.device_token;
      _email = $v.email;
      _isAdmin = $v.isAdmin;
      _mob_no = $v.mob_no;
      _name = $v.name;
      _password = $v.password;
      _payments = $v.payments?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_insert_input;
  }

  @override
  void update(void Function(Gcollectors_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_insert_input build() => _build();

  _$Gcollectors_insert_input _build() {
    _$Gcollectors_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_insert_input._(
              address: address,
              belongs_to: belongs_to,
              cable_opr: _cable_opr?.build(),
              collec_id: collec_id,
              device_token: device_token,
              email: email,
              isAdmin: isAdmin,
              mob_no: mob_no,
              name: name,
              password: password,
              payments: _payments?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'payments';
        _payments?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_max_order_by extends Gcollectors_max_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;
  @override
  final Gorder_by? device_token;
  @override
  final Gorder_by? email;
  @override
  final Gorder_by? mob_no;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? password;

  factory _$Gcollectors_max_order_by(
          [void Function(Gcollectors_max_order_byBuilder)? updates]) =>
      (new Gcollectors_max_order_byBuilder()..update(updates))._build();

  _$Gcollectors_max_order_by._(
      {this.address,
      this.belongs_to,
      this.collec_id,
      this.device_token,
      this.email,
      this.mob_no,
      this.name,
      this.password})
      : super._();

  @override
  Gcollectors_max_order_by rebuild(
          void Function(Gcollectors_max_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_max_order_byBuilder toBuilder() =>
      new Gcollectors_max_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_max_order_by &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, address.hashCode), belongs_to.hashCode),
                            collec_id.hashCode),
                        device_token.hashCode),
                    email.hashCode),
                mob_no.hashCode),
            name.hashCode),
        password.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_max_order_by')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password))
        .toString();
  }
}

class Gcollectors_max_order_byBuilder
    implements
        Builder<Gcollectors_max_order_by, Gcollectors_max_order_byBuilder> {
  _$Gcollectors_max_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gorder_by? _device_token;
  Gorder_by? get device_token => _$this._device_token;
  set device_token(Gorder_by? device_token) =>
      _$this._device_token = device_token;

  Gorder_by? _email;
  Gorder_by? get email => _$this._email;
  set email(Gorder_by? email) => _$this._email = email;

  Gorder_by? _mob_no;
  Gorder_by? get mob_no => _$this._mob_no;
  set mob_no(Gorder_by? mob_no) => _$this._mob_no = mob_no;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _password;
  Gorder_by? get password => _$this._password;
  set password(Gorder_by? password) => _$this._password = password;

  Gcollectors_max_order_byBuilder();

  Gcollectors_max_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _device_token = $v.device_token;
      _email = $v.email;
      _mob_no = $v.mob_no;
      _name = $v.name;
      _password = $v.password;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_max_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_max_order_by;
  }

  @override
  void update(void Function(Gcollectors_max_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_max_order_by build() => _build();

  _$Gcollectors_max_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_max_order_by._(
            address: address,
            belongs_to: belongs_to,
            collec_id: collec_id,
            device_token: device_token,
            email: email,
            mob_no: mob_no,
            name: name,
            password: password);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_min_order_by extends Gcollectors_min_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;
  @override
  final Gorder_by? device_token;
  @override
  final Gorder_by? email;
  @override
  final Gorder_by? mob_no;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? password;

  factory _$Gcollectors_min_order_by(
          [void Function(Gcollectors_min_order_byBuilder)? updates]) =>
      (new Gcollectors_min_order_byBuilder()..update(updates))._build();

  _$Gcollectors_min_order_by._(
      {this.address,
      this.belongs_to,
      this.collec_id,
      this.device_token,
      this.email,
      this.mob_no,
      this.name,
      this.password})
      : super._();

  @override
  Gcollectors_min_order_by rebuild(
          void Function(Gcollectors_min_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_min_order_byBuilder toBuilder() =>
      new Gcollectors_min_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_min_order_by &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, address.hashCode), belongs_to.hashCode),
                            collec_id.hashCode),
                        device_token.hashCode),
                    email.hashCode),
                mob_no.hashCode),
            name.hashCode),
        password.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_min_order_by')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password))
        .toString();
  }
}

class Gcollectors_min_order_byBuilder
    implements
        Builder<Gcollectors_min_order_by, Gcollectors_min_order_byBuilder> {
  _$Gcollectors_min_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gorder_by? _device_token;
  Gorder_by? get device_token => _$this._device_token;
  set device_token(Gorder_by? device_token) =>
      _$this._device_token = device_token;

  Gorder_by? _email;
  Gorder_by? get email => _$this._email;
  set email(Gorder_by? email) => _$this._email = email;

  Gorder_by? _mob_no;
  Gorder_by? get mob_no => _$this._mob_no;
  set mob_no(Gorder_by? mob_no) => _$this._mob_no = mob_no;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _password;
  Gorder_by? get password => _$this._password;
  set password(Gorder_by? password) => _$this._password = password;

  Gcollectors_min_order_byBuilder();

  Gcollectors_min_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _device_token = $v.device_token;
      _email = $v.email;
      _mob_no = $v.mob_no;
      _name = $v.name;
      _password = $v.password;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_min_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_min_order_by;
  }

  @override
  void update(void Function(Gcollectors_min_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_min_order_by build() => _build();

  _$Gcollectors_min_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_min_order_by._(
            address: address,
            belongs_to: belongs_to,
            collec_id: collec_id,
            device_token: device_token,
            email: email,
            mob_no: mob_no,
            name: name,
            password: password);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_obj_rel_insert_input
    extends Gcollectors_obj_rel_insert_input {
  @override
  final Gcollectors_insert_input data;
  @override
  final Gcollectors_on_conflict? on_conflict;

  factory _$Gcollectors_obj_rel_insert_input(
          [void Function(Gcollectors_obj_rel_insert_inputBuilder)? updates]) =>
      (new Gcollectors_obj_rel_insert_inputBuilder()..update(updates))._build();

  _$Gcollectors_obj_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcollectors_obj_rel_insert_input', 'data');
  }

  @override
  Gcollectors_obj_rel_insert_input rebuild(
          void Function(Gcollectors_obj_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_obj_rel_insert_inputBuilder toBuilder() =>
      new Gcollectors_obj_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_obj_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_obj_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcollectors_obj_rel_insert_inputBuilder
    implements
        Builder<Gcollectors_obj_rel_insert_input,
            Gcollectors_obj_rel_insert_inputBuilder> {
  _$Gcollectors_obj_rel_insert_input? _$v;

  Gcollectors_insert_inputBuilder? _data;
  Gcollectors_insert_inputBuilder get data =>
      _$this._data ??= new Gcollectors_insert_inputBuilder();
  set data(Gcollectors_insert_inputBuilder? data) => _$this._data = data;

  Gcollectors_on_conflictBuilder? _on_conflict;
  Gcollectors_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcollectors_on_conflictBuilder();
  set on_conflict(Gcollectors_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcollectors_obj_rel_insert_inputBuilder();

  Gcollectors_obj_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_obj_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_obj_rel_insert_input;
  }

  @override
  void update(void Function(Gcollectors_obj_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_obj_rel_insert_input build() => _build();

  _$Gcollectors_obj_rel_insert_input _build() {
    _$Gcollectors_obj_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_obj_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_obj_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_on_conflict extends Gcollectors_on_conflict {
  @override
  final Gcollectors_constraint constraint;
  @override
  final BuiltList<Gcollectors_update_column> update_columns;
  @override
  final Gcollectors_bool_exp? where;

  factory _$Gcollectors_on_conflict(
          [void Function(Gcollectors_on_conflictBuilder)? updates]) =>
      (new Gcollectors_on_conflictBuilder()..update(updates))._build();

  _$Gcollectors_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcollectors_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gcollectors_on_conflict', 'update_columns');
  }

  @override
  Gcollectors_on_conflict rebuild(
          void Function(Gcollectors_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_on_conflictBuilder toBuilder() =>
      new Gcollectors_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcollectors_on_conflictBuilder
    implements
        Builder<Gcollectors_on_conflict, Gcollectors_on_conflictBuilder> {
  _$Gcollectors_on_conflict? _$v;

  Gcollectors_constraint? _constraint;
  Gcollectors_constraint? get constraint => _$this._constraint;
  set constraint(Gcollectors_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcollectors_update_column>? _update_columns;
  ListBuilder<Gcollectors_update_column> get update_columns =>
      _$this._update_columns ??= new ListBuilder<Gcollectors_update_column>();
  set update_columns(ListBuilder<Gcollectors_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcollectors_bool_expBuilder? _where;
  Gcollectors_bool_expBuilder get where =>
      _$this._where ??= new Gcollectors_bool_expBuilder();
  set where(Gcollectors_bool_expBuilder? where) => _$this._where = where;

  Gcollectors_on_conflictBuilder();

  Gcollectors_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_on_conflict;
  }

  @override
  void update(void Function(Gcollectors_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_on_conflict build() => _build();

  _$Gcollectors_on_conflict _build() {
    _$Gcollectors_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gcollectors_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_order_by extends Gcollectors_order_by {
  @override
  final Gorder_by? address;
  @override
  final Gorder_by? belongs_to;
  @override
  final Gcable_opr_order_by? cable_opr;
  @override
  final Gorder_by? collec_id;
  @override
  final Gorder_by? device_token;
  @override
  final Gorder_by? email;
  @override
  final Gorder_by? isAdmin;
  @override
  final Gorder_by? mob_no;
  @override
  final Gorder_by? name;
  @override
  final Gorder_by? password;
  @override
  final Gpayments_aggregate_order_by? payments_aggregate;

  factory _$Gcollectors_order_by(
          [void Function(Gcollectors_order_byBuilder)? updates]) =>
      (new Gcollectors_order_byBuilder()..update(updates))._build();

  _$Gcollectors_order_by._(
      {this.address,
      this.belongs_to,
      this.cable_opr,
      this.collec_id,
      this.device_token,
      this.email,
      this.isAdmin,
      this.mob_no,
      this.name,
      this.password,
      this.payments_aggregate})
      : super._();

  @override
  Gcollectors_order_by rebuild(
          void Function(Gcollectors_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_order_byBuilder toBuilder() =>
      new Gcollectors_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_order_by &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        cable_opr == other.cable_opr &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        isAdmin == other.isAdmin &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password &&
        payments_aggregate == other.payments_aggregate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, address.hashCode),
                                            belongs_to.hashCode),
                                        cable_opr.hashCode),
                                    collec_id.hashCode),
                                device_token.hashCode),
                            email.hashCode),
                        isAdmin.hashCode),
                    mob_no.hashCode),
                name.hashCode),
            password.hashCode),
        payments_aggregate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_order_by')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('cable_opr', cable_opr)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('isAdmin', isAdmin)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password)
          ..add('payments_aggregate', payments_aggregate))
        .toString();
  }
}

class Gcollectors_order_byBuilder
    implements Builder<Gcollectors_order_by, Gcollectors_order_byBuilder> {
  _$Gcollectors_order_by? _$v;

  Gorder_by? _address;
  Gorder_by? get address => _$this._address;
  set address(Gorder_by? address) => _$this._address = address;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gcable_opr_order_byBuilder? _cable_opr;
  Gcable_opr_order_byBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_order_byBuilder();
  set cable_opr(Gcable_opr_order_byBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gorder_by? _device_token;
  Gorder_by? get device_token => _$this._device_token;
  set device_token(Gorder_by? device_token) =>
      _$this._device_token = device_token;

  Gorder_by? _email;
  Gorder_by? get email => _$this._email;
  set email(Gorder_by? email) => _$this._email = email;

  Gorder_by? _isAdmin;
  Gorder_by? get isAdmin => _$this._isAdmin;
  set isAdmin(Gorder_by? isAdmin) => _$this._isAdmin = isAdmin;

  Gorder_by? _mob_no;
  Gorder_by? get mob_no => _$this._mob_no;
  set mob_no(Gorder_by? mob_no) => _$this._mob_no = mob_no;

  Gorder_by? _name;
  Gorder_by? get name => _$this._name;
  set name(Gorder_by? name) => _$this._name = name;

  Gorder_by? _password;
  Gorder_by? get password => _$this._password;
  set password(Gorder_by? password) => _$this._password = password;

  Gpayments_aggregate_order_byBuilder? _payments_aggregate;
  Gpayments_aggregate_order_byBuilder get payments_aggregate =>
      _$this._payments_aggregate ??= new Gpayments_aggregate_order_byBuilder();
  set payments_aggregate(
          Gpayments_aggregate_order_byBuilder? payments_aggregate) =>
      _$this._payments_aggregate = payments_aggregate;

  Gcollectors_order_byBuilder();

  Gcollectors_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _cable_opr = $v.cable_opr?.toBuilder();
      _collec_id = $v.collec_id;
      _device_token = $v.device_token;
      _email = $v.email;
      _isAdmin = $v.isAdmin;
      _mob_no = $v.mob_no;
      _name = $v.name;
      _password = $v.password;
      _payments_aggregate = $v.payments_aggregate?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_order_by;
  }

  @override
  void update(void Function(Gcollectors_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_order_by build() => _build();

  _$Gcollectors_order_by _build() {
    _$Gcollectors_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_order_by._(
              address: address,
              belongs_to: belongs_to,
              cable_opr: _cable_opr?.build(),
              collec_id: collec_id,
              device_token: device_token,
              email: email,
              isAdmin: isAdmin,
              mob_no: mob_no,
              name: name,
              password: password,
              payments_aggregate: _payments_aggregate?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'payments_aggregate';
        _payments_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_pk_columns_input extends Gcollectors_pk_columns_input {
  @override
  final int collec_id;

  factory _$Gcollectors_pk_columns_input(
          [void Function(Gcollectors_pk_columns_inputBuilder)? updates]) =>
      (new Gcollectors_pk_columns_inputBuilder()..update(updates))._build();

  _$Gcollectors_pk_columns_input._({required this.collec_id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        collec_id, r'Gcollectors_pk_columns_input', 'collec_id');
  }

  @override
  Gcollectors_pk_columns_input rebuild(
          void Function(Gcollectors_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_pk_columns_inputBuilder toBuilder() =>
      new Gcollectors_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_pk_columns_input &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_pk_columns_input')
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_pk_columns_inputBuilder
    implements
        Builder<Gcollectors_pk_columns_input,
            Gcollectors_pk_columns_inputBuilder> {
  _$Gcollectors_pk_columns_input? _$v;

  int? _collec_id;
  int? get collec_id => _$this._collec_id;
  set collec_id(int? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_pk_columns_inputBuilder();

  Gcollectors_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_pk_columns_input;
  }

  @override
  void update(void Function(Gcollectors_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_pk_columns_input build() => _build();

  _$Gcollectors_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcollectors_pk_columns_input._(
            collec_id: BuiltValueNullFieldError.checkNotNull(
                collec_id, r'Gcollectors_pk_columns_input', 'collec_id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_set_input extends Gcollectors_set_input {
  @override
  final String? address;
  @override
  final int? belongs_to;
  @override
  final int? collec_id;
  @override
  final String? device_token;
  @override
  final String? email;
  @override
  final bool? isAdmin;
  @override
  final String? mob_no;
  @override
  final String? name;
  @override
  final String? password;

  factory _$Gcollectors_set_input(
          [void Function(Gcollectors_set_inputBuilder)? updates]) =>
      (new Gcollectors_set_inputBuilder()..update(updates))._build();

  _$Gcollectors_set_input._(
      {this.address,
      this.belongs_to,
      this.collec_id,
      this.device_token,
      this.email,
      this.isAdmin,
      this.mob_no,
      this.name,
      this.password})
      : super._();

  @override
  Gcollectors_set_input rebuild(
          void Function(Gcollectors_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_set_inputBuilder toBuilder() =>
      new Gcollectors_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_set_input &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        isAdmin == other.isAdmin &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, address.hashCode),
                                    belongs_to.hashCode),
                                collec_id.hashCode),
                            device_token.hashCode),
                        email.hashCode),
                    isAdmin.hashCode),
                mob_no.hashCode),
            name.hashCode),
        password.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_set_input')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('isAdmin', isAdmin)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password))
        .toString();
  }
}

class Gcollectors_set_inputBuilder
    implements Builder<Gcollectors_set_input, Gcollectors_set_inputBuilder> {
  _$Gcollectors_set_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  int? _collec_id;
  int? get collec_id => _$this._collec_id;
  set collec_id(int? collec_id) => _$this._collec_id = collec_id;

  String? _device_token;
  String? get device_token => _$this._device_token;
  set device_token(String? device_token) => _$this._device_token = device_token;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isAdmin;
  bool? get isAdmin => _$this._isAdmin;
  set isAdmin(bool? isAdmin) => _$this._isAdmin = isAdmin;

  String? _mob_no;
  String? get mob_no => _$this._mob_no;
  set mob_no(String? mob_no) => _$this._mob_no = mob_no;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  Gcollectors_set_inputBuilder();

  Gcollectors_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _device_token = $v.device_token;
      _email = $v.email;
      _isAdmin = $v.isAdmin;
      _mob_no = $v.mob_no;
      _name = $v.name;
      _password = $v.password;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_set_input;
  }

  @override
  void update(void Function(Gcollectors_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_set_input build() => _build();

  _$Gcollectors_set_input _build() {
    final _$result = _$v ??
        new _$Gcollectors_set_input._(
            address: address,
            belongs_to: belongs_to,
            collec_id: collec_id,
            device_token: device_token,
            email: email,
            isAdmin: isAdmin,
            mob_no: mob_no,
            name: name,
            password: password);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_stddev_order_by extends Gcollectors_stddev_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_stddev_order_by(
          [void Function(Gcollectors_stddev_order_byBuilder)? updates]) =>
      (new Gcollectors_stddev_order_byBuilder()..update(updates))._build();

  _$Gcollectors_stddev_order_by._({this.belongs_to, this.collec_id})
      : super._();

  @override
  Gcollectors_stddev_order_by rebuild(
          void Function(Gcollectors_stddev_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_stddev_order_byBuilder toBuilder() =>
      new Gcollectors_stddev_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_stddev_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_stddev_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_stddev_order_byBuilder
    implements
        Builder<Gcollectors_stddev_order_by,
            Gcollectors_stddev_order_byBuilder> {
  _$Gcollectors_stddev_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_stddev_order_byBuilder();

  Gcollectors_stddev_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_stddev_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_stddev_order_by;
  }

  @override
  void update(void Function(Gcollectors_stddev_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_stddev_order_by build() => _build();

  _$Gcollectors_stddev_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_stddev_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_stddev_pop_order_by
    extends Gcollectors_stddev_pop_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_stddev_pop_order_by(
          [void Function(Gcollectors_stddev_pop_order_byBuilder)? updates]) =>
      (new Gcollectors_stddev_pop_order_byBuilder()..update(updates))._build();

  _$Gcollectors_stddev_pop_order_by._({this.belongs_to, this.collec_id})
      : super._();

  @override
  Gcollectors_stddev_pop_order_by rebuild(
          void Function(Gcollectors_stddev_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_stddev_pop_order_byBuilder toBuilder() =>
      new Gcollectors_stddev_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_stddev_pop_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_stddev_pop_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_stddev_pop_order_byBuilder
    implements
        Builder<Gcollectors_stddev_pop_order_by,
            Gcollectors_stddev_pop_order_byBuilder> {
  _$Gcollectors_stddev_pop_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_stddev_pop_order_byBuilder();

  Gcollectors_stddev_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_stddev_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_stddev_pop_order_by;
  }

  @override
  void update(void Function(Gcollectors_stddev_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_stddev_pop_order_by build() => _build();

  _$Gcollectors_stddev_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_stddev_pop_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_stddev_samp_order_by
    extends Gcollectors_stddev_samp_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_stddev_samp_order_by(
          [void Function(Gcollectors_stddev_samp_order_byBuilder)? updates]) =>
      (new Gcollectors_stddev_samp_order_byBuilder()..update(updates))._build();

  _$Gcollectors_stddev_samp_order_by._({this.belongs_to, this.collec_id})
      : super._();

  @override
  Gcollectors_stddev_samp_order_by rebuild(
          void Function(Gcollectors_stddev_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_stddev_samp_order_byBuilder toBuilder() =>
      new Gcollectors_stddev_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_stddev_samp_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_stddev_samp_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_stddev_samp_order_byBuilder
    implements
        Builder<Gcollectors_stddev_samp_order_by,
            Gcollectors_stddev_samp_order_byBuilder> {
  _$Gcollectors_stddev_samp_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_stddev_samp_order_byBuilder();

  Gcollectors_stddev_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_stddev_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_stddev_samp_order_by;
  }

  @override
  void update(void Function(Gcollectors_stddev_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_stddev_samp_order_by build() => _build();

  _$Gcollectors_stddev_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_stddev_samp_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_stream_cursor_input
    extends Gcollectors_stream_cursor_input {
  @override
  final Gcollectors_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcollectors_stream_cursor_input(
          [void Function(Gcollectors_stream_cursor_inputBuilder)? updates]) =>
      (new Gcollectors_stream_cursor_inputBuilder()..update(updates))._build();

  _$Gcollectors_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gcollectors_stream_cursor_input', 'initial_value');
  }

  @override
  Gcollectors_stream_cursor_input rebuild(
          void Function(Gcollectors_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_stream_cursor_inputBuilder toBuilder() =>
      new Gcollectors_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcollectors_stream_cursor_inputBuilder
    implements
        Builder<Gcollectors_stream_cursor_input,
            Gcollectors_stream_cursor_inputBuilder> {
  _$Gcollectors_stream_cursor_input? _$v;

  Gcollectors_stream_cursor_value_inputBuilder? _initial_value;
  Gcollectors_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcollectors_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcollectors_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcollectors_stream_cursor_inputBuilder();

  Gcollectors_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_stream_cursor_input;
  }

  @override
  void update(void Function(Gcollectors_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_stream_cursor_input build() => _build();

  _$Gcollectors_stream_cursor_input _build() {
    _$Gcollectors_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_stream_cursor_value_input
    extends Gcollectors_stream_cursor_value_input {
  @override
  final String? address;
  @override
  final int? belongs_to;
  @override
  final int? collec_id;
  @override
  final String? device_token;
  @override
  final String? email;
  @override
  final bool? isAdmin;
  @override
  final String? mob_no;
  @override
  final String? name;
  @override
  final String? password;

  factory _$Gcollectors_stream_cursor_value_input(
          [void Function(Gcollectors_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcollectors_stream_cursor_value_inputBuilder()..update(updates))
          ._build();

  _$Gcollectors_stream_cursor_value_input._(
      {this.address,
      this.belongs_to,
      this.collec_id,
      this.device_token,
      this.email,
      this.isAdmin,
      this.mob_no,
      this.name,
      this.password})
      : super._();

  @override
  Gcollectors_stream_cursor_value_input rebuild(
          void Function(Gcollectors_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcollectors_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_stream_cursor_value_input &&
        address == other.address &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id &&
        device_token == other.device_token &&
        email == other.email &&
        isAdmin == other.isAdmin &&
        mob_no == other.mob_no &&
        name == other.name &&
        password == other.password;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, address.hashCode),
                                    belongs_to.hashCode),
                                collec_id.hashCode),
                            device_token.hashCode),
                        email.hashCode),
                    isAdmin.hashCode),
                mob_no.hashCode),
            name.hashCode),
        password.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gcollectors_stream_cursor_value_input')
          ..add('address', address)
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id)
          ..add('device_token', device_token)
          ..add('email', email)
          ..add('isAdmin', isAdmin)
          ..add('mob_no', mob_no)
          ..add('name', name)
          ..add('password', password))
        .toString();
  }
}

class Gcollectors_stream_cursor_value_inputBuilder
    implements
        Builder<Gcollectors_stream_cursor_value_input,
            Gcollectors_stream_cursor_value_inputBuilder> {
  _$Gcollectors_stream_cursor_value_input? _$v;

  String? _address;
  String? get address => _$this._address;
  set address(String? address) => _$this._address = address;

  int? _belongs_to;
  int? get belongs_to => _$this._belongs_to;
  set belongs_to(int? belongs_to) => _$this._belongs_to = belongs_to;

  int? _collec_id;
  int? get collec_id => _$this._collec_id;
  set collec_id(int? collec_id) => _$this._collec_id = collec_id;

  String? _device_token;
  String? get device_token => _$this._device_token;
  set device_token(String? device_token) => _$this._device_token = device_token;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  bool? _isAdmin;
  bool? get isAdmin => _$this._isAdmin;
  set isAdmin(bool? isAdmin) => _$this._isAdmin = isAdmin;

  String? _mob_no;
  String? get mob_no => _$this._mob_no;
  set mob_no(String? mob_no) => _$this._mob_no = mob_no;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _password;
  String? get password => _$this._password;
  set password(String? password) => _$this._password = password;

  Gcollectors_stream_cursor_value_inputBuilder();

  Gcollectors_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _address = $v.address;
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _device_token = $v.device_token;
      _email = $v.email;
      _isAdmin = $v.isAdmin;
      _mob_no = $v.mob_no;
      _name = $v.name;
      _password = $v.password;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcollectors_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_stream_cursor_value_input build() => _build();

  _$Gcollectors_stream_cursor_value_input _build() {
    final _$result = _$v ??
        new _$Gcollectors_stream_cursor_value_input._(
            address: address,
            belongs_to: belongs_to,
            collec_id: collec_id,
            device_token: device_token,
            email: email,
            isAdmin: isAdmin,
            mob_no: mob_no,
            name: name,
            password: password);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_sum_order_by extends Gcollectors_sum_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_sum_order_by(
          [void Function(Gcollectors_sum_order_byBuilder)? updates]) =>
      (new Gcollectors_sum_order_byBuilder()..update(updates))._build();

  _$Gcollectors_sum_order_by._({this.belongs_to, this.collec_id}) : super._();

  @override
  Gcollectors_sum_order_by rebuild(
          void Function(Gcollectors_sum_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_sum_order_byBuilder toBuilder() =>
      new Gcollectors_sum_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_sum_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_sum_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_sum_order_byBuilder
    implements
        Builder<Gcollectors_sum_order_by, Gcollectors_sum_order_byBuilder> {
  _$Gcollectors_sum_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_sum_order_byBuilder();

  Gcollectors_sum_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_sum_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_sum_order_by;
  }

  @override
  void update(void Function(Gcollectors_sum_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_sum_order_by build() => _build();

  _$Gcollectors_sum_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_sum_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_updates extends Gcollectors_updates {
  @override
  final Gcollectors_inc_input? G_inc;
  @override
  final Gcollectors_set_input? G_set;
  @override
  final Gcollectors_bool_exp where;

  factory _$Gcollectors_updates(
          [void Function(Gcollectors_updatesBuilder)? updates]) =>
      (new Gcollectors_updatesBuilder()..update(updates))._build();

  _$Gcollectors_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gcollectors_updates', 'where');
  }

  @override
  Gcollectors_updates rebuild(
          void Function(Gcollectors_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_updatesBuilder toBuilder() =>
      new Gcollectors_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcollectors_updatesBuilder
    implements Builder<Gcollectors_updates, Gcollectors_updatesBuilder> {
  _$Gcollectors_updates? _$v;

  Gcollectors_inc_inputBuilder? _G_inc;
  Gcollectors_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcollectors_inc_inputBuilder();
  set G_inc(Gcollectors_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gcollectors_set_inputBuilder? _G_set;
  Gcollectors_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcollectors_set_inputBuilder();
  set G_set(Gcollectors_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gcollectors_bool_expBuilder? _where;
  Gcollectors_bool_expBuilder get where =>
      _$this._where ??= new Gcollectors_bool_expBuilder();
  set where(Gcollectors_bool_expBuilder? where) => _$this._where = where;

  Gcollectors_updatesBuilder();

  Gcollectors_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_updates;
  }

  @override
  void update(void Function(Gcollectors_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_updates build() => _build();

  _$Gcollectors_updates _build() {
    _$Gcollectors_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcollectors_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcollectors_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_var_pop_order_by extends Gcollectors_var_pop_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_var_pop_order_by(
          [void Function(Gcollectors_var_pop_order_byBuilder)? updates]) =>
      (new Gcollectors_var_pop_order_byBuilder()..update(updates))._build();

  _$Gcollectors_var_pop_order_by._({this.belongs_to, this.collec_id})
      : super._();

  @override
  Gcollectors_var_pop_order_by rebuild(
          void Function(Gcollectors_var_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_var_pop_order_byBuilder toBuilder() =>
      new Gcollectors_var_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_var_pop_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_var_pop_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_var_pop_order_byBuilder
    implements
        Builder<Gcollectors_var_pop_order_by,
            Gcollectors_var_pop_order_byBuilder> {
  _$Gcollectors_var_pop_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_var_pop_order_byBuilder();

  Gcollectors_var_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_var_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_var_pop_order_by;
  }

  @override
  void update(void Function(Gcollectors_var_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_var_pop_order_by build() => _build();

  _$Gcollectors_var_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_var_pop_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_var_samp_order_by extends Gcollectors_var_samp_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_var_samp_order_by(
          [void Function(Gcollectors_var_samp_order_byBuilder)? updates]) =>
      (new Gcollectors_var_samp_order_byBuilder()..update(updates))._build();

  _$Gcollectors_var_samp_order_by._({this.belongs_to, this.collec_id})
      : super._();

  @override
  Gcollectors_var_samp_order_by rebuild(
          void Function(Gcollectors_var_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_var_samp_order_byBuilder toBuilder() =>
      new Gcollectors_var_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_var_samp_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_var_samp_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_var_samp_order_byBuilder
    implements
        Builder<Gcollectors_var_samp_order_by,
            Gcollectors_var_samp_order_byBuilder> {
  _$Gcollectors_var_samp_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_var_samp_order_byBuilder();

  Gcollectors_var_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_var_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_var_samp_order_by;
  }

  @override
  void update(void Function(Gcollectors_var_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_var_samp_order_by build() => _build();

  _$Gcollectors_var_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_var_samp_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcollectors_variance_order_by extends Gcollectors_variance_order_by {
  @override
  final Gorder_by? belongs_to;
  @override
  final Gorder_by? collec_id;

  factory _$Gcollectors_variance_order_by(
          [void Function(Gcollectors_variance_order_byBuilder)? updates]) =>
      (new Gcollectors_variance_order_byBuilder()..update(updates))._build();

  _$Gcollectors_variance_order_by._({this.belongs_to, this.collec_id})
      : super._();

  @override
  Gcollectors_variance_order_by rebuild(
          void Function(Gcollectors_variance_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcollectors_variance_order_byBuilder toBuilder() =>
      new Gcollectors_variance_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcollectors_variance_order_by &&
        belongs_to == other.belongs_to &&
        collec_id == other.collec_id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, belongs_to.hashCode), collec_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcollectors_variance_order_by')
          ..add('belongs_to', belongs_to)
          ..add('collec_id', collec_id))
        .toString();
  }
}

class Gcollectors_variance_order_byBuilder
    implements
        Builder<Gcollectors_variance_order_by,
            Gcollectors_variance_order_byBuilder> {
  _$Gcollectors_variance_order_by? _$v;

  Gorder_by? _belongs_to;
  Gorder_by? get belongs_to => _$this._belongs_to;
  set belongs_to(Gorder_by? belongs_to) => _$this._belongs_to = belongs_to;

  Gorder_by? _collec_id;
  Gorder_by? get collec_id => _$this._collec_id;
  set collec_id(Gorder_by? collec_id) => _$this._collec_id = collec_id;

  Gcollectors_variance_order_byBuilder();

  Gcollectors_variance_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _belongs_to = $v.belongs_to;
      _collec_id = $v.collec_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcollectors_variance_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcollectors_variance_order_by;
  }

  @override
  void update(void Function(Gcollectors_variance_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcollectors_variance_order_by build() => _build();

  _$Gcollectors_variance_order_by _build() {
    final _$result = _$v ??
        new _$Gcollectors_variance_order_by._(
            belongs_to: belongs_to, collec_id: collec_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_bool_exp extends Gcustomer_bool_exp {
  @override
  final BuiltList<Gcustomer_bool_exp>? G_and;
  @override
  final Gcustomer_bool_exp? G_not;
  @override
  final BuiltList<Gcustomer_bool_exp>? G_or;
  @override
  final GString_comparison_exp? email;
  @override
  final GString_comparison_exp? first_name;
  @override
  final GInt_comparison_exp? id;
  @override
  final GString_comparison_exp? ip_address;
  @override
  final GString_comparison_exp? last_name;
  @override
  final Gorder_bool_exp? orders;
  @override
  final Gorder_aggregate_bool_exp? orders_aggregate;
  @override
  final GString_comparison_exp? phone;
  @override
  final GString_comparison_exp? username;

  factory _$Gcustomer_bool_exp(
          [void Function(Gcustomer_bool_expBuilder)? updates]) =>
      (new Gcustomer_bool_expBuilder()..update(updates))._build();

  _$Gcustomer_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.email,
      this.first_name,
      this.id,
      this.ip_address,
      this.last_name,
      this.orders,
      this.orders_aggregate,
      this.phone,
      this.username})
      : super._();

  @override
  Gcustomer_bool_exp rebuild(
          void Function(Gcustomer_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_bool_expBuilder toBuilder() =>
      new Gcustomer_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        email == other.email &&
        first_name == other.first_name &&
        id == other.id &&
        ip_address == other.ip_address &&
        last_name == other.last_name &&
        orders == other.orders &&
        orders_aggregate == other.orders_aggregate &&
        phone == other.phone &&
        username == other.username;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc($jc(0, G_and.hashCode),
                                                G_not.hashCode),
                                            G_or.hashCode),
                                        email.hashCode),
                                    first_name.hashCode),
                                id.hashCode),
                            ip_address.hashCode),
                        last_name.hashCode),
                    orders.hashCode),
                orders_aggregate.hashCode),
            phone.hashCode),
        username.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('email', email)
          ..add('first_name', first_name)
          ..add('id', id)
          ..add('ip_address', ip_address)
          ..add('last_name', last_name)
          ..add('orders', orders)
          ..add('orders_aggregate', orders_aggregate)
          ..add('phone', phone)
          ..add('username', username))
        .toString();
  }
}

class Gcustomer_bool_expBuilder
    implements Builder<Gcustomer_bool_exp, Gcustomer_bool_expBuilder> {
  _$Gcustomer_bool_exp? _$v;

  ListBuilder<Gcustomer_bool_exp>? _G_and;
  ListBuilder<Gcustomer_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gcustomer_bool_exp>();
  set G_and(ListBuilder<Gcustomer_bool_exp>? G_and) => _$this._G_and = G_and;

  Gcustomer_bool_expBuilder? _G_not;
  Gcustomer_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gcustomer_bool_expBuilder();
  set G_not(Gcustomer_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gcustomer_bool_exp>? _G_or;
  ListBuilder<Gcustomer_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gcustomer_bool_exp>();
  set G_or(ListBuilder<Gcustomer_bool_exp>? G_or) => _$this._G_or = G_or;

  GString_comparison_expBuilder? _email;
  GString_comparison_expBuilder get email =>
      _$this._email ??= new GString_comparison_expBuilder();
  set email(GString_comparison_expBuilder? email) => _$this._email = email;

  GString_comparison_expBuilder? _first_name;
  GString_comparison_expBuilder get first_name =>
      _$this._first_name ??= new GString_comparison_expBuilder();
  set first_name(GString_comparison_expBuilder? first_name) =>
      _$this._first_name = first_name;

  GInt_comparison_expBuilder? _id;
  GInt_comparison_expBuilder get id =>
      _$this._id ??= new GInt_comparison_expBuilder();
  set id(GInt_comparison_expBuilder? id) => _$this._id = id;

  GString_comparison_expBuilder? _ip_address;
  GString_comparison_expBuilder get ip_address =>
      _$this._ip_address ??= new GString_comparison_expBuilder();
  set ip_address(GString_comparison_expBuilder? ip_address) =>
      _$this._ip_address = ip_address;

  GString_comparison_expBuilder? _last_name;
  GString_comparison_expBuilder get last_name =>
      _$this._last_name ??= new GString_comparison_expBuilder();
  set last_name(GString_comparison_expBuilder? last_name) =>
      _$this._last_name = last_name;

  Gorder_bool_expBuilder? _orders;
  Gorder_bool_expBuilder get orders =>
      _$this._orders ??= new Gorder_bool_expBuilder();
  set orders(Gorder_bool_expBuilder? orders) => _$this._orders = orders;

  Gorder_aggregate_bool_expBuilder? _orders_aggregate;
  Gorder_aggregate_bool_expBuilder get orders_aggregate =>
      _$this._orders_aggregate ??= new Gorder_aggregate_bool_expBuilder();
  set orders_aggregate(Gorder_aggregate_bool_expBuilder? orders_aggregate) =>
      _$this._orders_aggregate = orders_aggregate;

  GString_comparison_expBuilder? _phone;
  GString_comparison_expBuilder get phone =>
      _$this._phone ??= new GString_comparison_expBuilder();
  set phone(GString_comparison_expBuilder? phone) => _$this._phone = phone;

  GString_comparison_expBuilder? _username;
  GString_comparison_expBuilder get username =>
      _$this._username ??= new GString_comparison_expBuilder();
  set username(GString_comparison_expBuilder? username) =>
      _$this._username = username;

  Gcustomer_bool_expBuilder();

  Gcustomer_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _email = $v.email?.toBuilder();
      _first_name = $v.first_name?.toBuilder();
      _id = $v.id?.toBuilder();
      _ip_address = $v.ip_address?.toBuilder();
      _last_name = $v.last_name?.toBuilder();
      _orders = $v.orders?.toBuilder();
      _orders_aggregate = $v.orders_aggregate?.toBuilder();
      _phone = $v.phone?.toBuilder();
      _username = $v.username?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_bool_exp;
  }

  @override
  void update(void Function(Gcustomer_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_bool_exp build() => _build();

  _$Gcustomer_bool_exp _build() {
    _$Gcustomer_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              email: _email?.build(),
              first_name: _first_name?.build(),
              id: _id?.build(),
              ip_address: _ip_address?.build(),
              last_name: _last_name?.build(),
              orders: _orders?.build(),
              orders_aggregate: _orders_aggregate?.build(),
              phone: _phone?.build(),
              username: _username?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'email';
        _email?.build();
        _$failedField = 'first_name';
        _first_name?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'ip_address';
        _ip_address?.build();
        _$failedField = 'last_name';
        _last_name?.build();
        _$failedField = 'orders';
        _orders?.build();
        _$failedField = 'orders_aggregate';
        _orders_aggregate?.build();
        _$failedField = 'phone';
        _phone?.build();
        _$failedField = 'username';
        _username?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_inc_input extends Gcustomer_inc_input {
  @override
  final int? id;

  factory _$Gcustomer_inc_input(
          [void Function(Gcustomer_inc_inputBuilder)? updates]) =>
      (new Gcustomer_inc_inputBuilder()..update(updates))._build();

  _$Gcustomer_inc_input._({this.id}) : super._();

  @override
  Gcustomer_inc_input rebuild(
          void Function(Gcustomer_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_inc_inputBuilder toBuilder() =>
      new Gcustomer_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_inc_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_inc_input')..add('id', id))
        .toString();
  }
}

class Gcustomer_inc_inputBuilder
    implements Builder<Gcustomer_inc_input, Gcustomer_inc_inputBuilder> {
  _$Gcustomer_inc_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcustomer_inc_inputBuilder();

  Gcustomer_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_inc_input;
  }

  @override
  void update(void Function(Gcustomer_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_inc_input build() => _build();

  _$Gcustomer_inc_input _build() {
    final _$result = _$v ?? new _$Gcustomer_inc_input._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_insert_input extends Gcustomer_insert_input {
  @override
  final String? email;
  @override
  final String? first_name;
  @override
  final int? id;
  @override
  final String? ip_address;
  @override
  final String? last_name;
  @override
  final Gorder_arr_rel_insert_input? orders;
  @override
  final String? phone;
  @override
  final String? username;

  factory _$Gcustomer_insert_input(
          [void Function(Gcustomer_insert_inputBuilder)? updates]) =>
      (new Gcustomer_insert_inputBuilder()..update(updates))._build();

  _$Gcustomer_insert_input._(
      {this.email,
      this.first_name,
      this.id,
      this.ip_address,
      this.last_name,
      this.orders,
      this.phone,
      this.username})
      : super._();

  @override
  Gcustomer_insert_input rebuild(
          void Function(Gcustomer_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_insert_inputBuilder toBuilder() =>
      new Gcustomer_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_insert_input &&
        email == other.email &&
        first_name == other.first_name &&
        id == other.id &&
        ip_address == other.ip_address &&
        last_name == other.last_name &&
        orders == other.orders &&
        phone == other.phone &&
        username == other.username;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, email.hashCode), first_name.hashCode),
                            id.hashCode),
                        ip_address.hashCode),
                    last_name.hashCode),
                orders.hashCode),
            phone.hashCode),
        username.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_insert_input')
          ..add('email', email)
          ..add('first_name', first_name)
          ..add('id', id)
          ..add('ip_address', ip_address)
          ..add('last_name', last_name)
          ..add('orders', orders)
          ..add('phone', phone)
          ..add('username', username))
        .toString();
  }
}

class Gcustomer_insert_inputBuilder
    implements Builder<Gcustomer_insert_input, Gcustomer_insert_inputBuilder> {
  _$Gcustomer_insert_input? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _first_name;
  String? get first_name => _$this._first_name;
  set first_name(String? first_name) => _$this._first_name = first_name;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _ip_address;
  String? get ip_address => _$this._ip_address;
  set ip_address(String? ip_address) => _$this._ip_address = ip_address;

  String? _last_name;
  String? get last_name => _$this._last_name;
  set last_name(String? last_name) => _$this._last_name = last_name;

  Gorder_arr_rel_insert_inputBuilder? _orders;
  Gorder_arr_rel_insert_inputBuilder get orders =>
      _$this._orders ??= new Gorder_arr_rel_insert_inputBuilder();
  set orders(Gorder_arr_rel_insert_inputBuilder? orders) =>
      _$this._orders = orders;

  String? _phone;
  String? get phone => _$this._phone;
  set phone(String? phone) => _$this._phone = phone;

  String? _username;
  String? get username => _$this._username;
  set username(String? username) => _$this._username = username;

  Gcustomer_insert_inputBuilder();

  Gcustomer_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _first_name = $v.first_name;
      _id = $v.id;
      _ip_address = $v.ip_address;
      _last_name = $v.last_name;
      _orders = $v.orders?.toBuilder();
      _phone = $v.phone;
      _username = $v.username;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_insert_input;
  }

  @override
  void update(void Function(Gcustomer_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_insert_input build() => _build();

  _$Gcustomer_insert_input _build() {
    _$Gcustomer_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_insert_input._(
              email: email,
              first_name: first_name,
              id: id,
              ip_address: ip_address,
              last_name: last_name,
              orders: _orders?.build(),
              phone: phone,
              username: username);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'orders';
        _orders?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_obj_rel_insert_input extends Gcustomer_obj_rel_insert_input {
  @override
  final Gcustomer_insert_input data;
  @override
  final Gcustomer_on_conflict? on_conflict;

  factory _$Gcustomer_obj_rel_insert_input(
          [void Function(Gcustomer_obj_rel_insert_inputBuilder)? updates]) =>
      (new Gcustomer_obj_rel_insert_inputBuilder()..update(updates))._build();

  _$Gcustomer_obj_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gcustomer_obj_rel_insert_input', 'data');
  }

  @override
  Gcustomer_obj_rel_insert_input rebuild(
          void Function(Gcustomer_obj_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_obj_rel_insert_inputBuilder toBuilder() =>
      new Gcustomer_obj_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_obj_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_obj_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gcustomer_obj_rel_insert_inputBuilder
    implements
        Builder<Gcustomer_obj_rel_insert_input,
            Gcustomer_obj_rel_insert_inputBuilder> {
  _$Gcustomer_obj_rel_insert_input? _$v;

  Gcustomer_insert_inputBuilder? _data;
  Gcustomer_insert_inputBuilder get data =>
      _$this._data ??= new Gcustomer_insert_inputBuilder();
  set data(Gcustomer_insert_inputBuilder? data) => _$this._data = data;

  Gcustomer_on_conflictBuilder? _on_conflict;
  Gcustomer_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gcustomer_on_conflictBuilder();
  set on_conflict(Gcustomer_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gcustomer_obj_rel_insert_inputBuilder();

  Gcustomer_obj_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_obj_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_obj_rel_insert_input;
  }

  @override
  void update(void Function(Gcustomer_obj_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_obj_rel_insert_input build() => _build();

  _$Gcustomer_obj_rel_insert_input _build() {
    _$Gcustomer_obj_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_obj_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_obj_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_on_conflict extends Gcustomer_on_conflict {
  @override
  final Gcustomer_constraint constraint;
  @override
  final BuiltList<Gcustomer_update_column> update_columns;
  @override
  final Gcustomer_bool_exp? where;

  factory _$Gcustomer_on_conflict(
          [void Function(Gcustomer_on_conflictBuilder)? updates]) =>
      (new Gcustomer_on_conflictBuilder()..update(updates))._build();

  _$Gcustomer_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gcustomer_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gcustomer_on_conflict', 'update_columns');
  }

  @override
  Gcustomer_on_conflict rebuild(
          void Function(Gcustomer_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_on_conflictBuilder toBuilder() =>
      new Gcustomer_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gcustomer_on_conflictBuilder
    implements Builder<Gcustomer_on_conflict, Gcustomer_on_conflictBuilder> {
  _$Gcustomer_on_conflict? _$v;

  Gcustomer_constraint? _constraint;
  Gcustomer_constraint? get constraint => _$this._constraint;
  set constraint(Gcustomer_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gcustomer_update_column>? _update_columns;
  ListBuilder<Gcustomer_update_column> get update_columns =>
      _$this._update_columns ??= new ListBuilder<Gcustomer_update_column>();
  set update_columns(ListBuilder<Gcustomer_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gcustomer_bool_expBuilder? _where;
  Gcustomer_bool_expBuilder get where =>
      _$this._where ??= new Gcustomer_bool_expBuilder();
  set where(Gcustomer_bool_expBuilder? where) => _$this._where = where;

  Gcustomer_on_conflictBuilder();

  Gcustomer_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_on_conflict;
  }

  @override
  void update(void Function(Gcustomer_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_on_conflict build() => _build();

  _$Gcustomer_on_conflict _build() {
    _$Gcustomer_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gcustomer_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_order_by extends Gcustomer_order_by {
  @override
  final Gorder_by? email;
  @override
  final Gorder_by? first_name;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? ip_address;
  @override
  final Gorder_by? last_name;
  @override
  final Gorder_aggregate_order_by? orders_aggregate;
  @override
  final Gorder_by? phone;
  @override
  final Gorder_by? username;

  factory _$Gcustomer_order_by(
          [void Function(Gcustomer_order_byBuilder)? updates]) =>
      (new Gcustomer_order_byBuilder()..update(updates))._build();

  _$Gcustomer_order_by._(
      {this.email,
      this.first_name,
      this.id,
      this.ip_address,
      this.last_name,
      this.orders_aggregate,
      this.phone,
      this.username})
      : super._();

  @override
  Gcustomer_order_by rebuild(
          void Function(Gcustomer_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_order_byBuilder toBuilder() =>
      new Gcustomer_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_order_by &&
        email == other.email &&
        first_name == other.first_name &&
        id == other.id &&
        ip_address == other.ip_address &&
        last_name == other.last_name &&
        orders_aggregate == other.orders_aggregate &&
        phone == other.phone &&
        username == other.username;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, email.hashCode), first_name.hashCode),
                            id.hashCode),
                        ip_address.hashCode),
                    last_name.hashCode),
                orders_aggregate.hashCode),
            phone.hashCode),
        username.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_order_by')
          ..add('email', email)
          ..add('first_name', first_name)
          ..add('id', id)
          ..add('ip_address', ip_address)
          ..add('last_name', last_name)
          ..add('orders_aggregate', orders_aggregate)
          ..add('phone', phone)
          ..add('username', username))
        .toString();
  }
}

class Gcustomer_order_byBuilder
    implements Builder<Gcustomer_order_by, Gcustomer_order_byBuilder> {
  _$Gcustomer_order_by? _$v;

  Gorder_by? _email;
  Gorder_by? get email => _$this._email;
  set email(Gorder_by? email) => _$this._email = email;

  Gorder_by? _first_name;
  Gorder_by? get first_name => _$this._first_name;
  set first_name(Gorder_by? first_name) => _$this._first_name = first_name;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _ip_address;
  Gorder_by? get ip_address => _$this._ip_address;
  set ip_address(Gorder_by? ip_address) => _$this._ip_address = ip_address;

  Gorder_by? _last_name;
  Gorder_by? get last_name => _$this._last_name;
  set last_name(Gorder_by? last_name) => _$this._last_name = last_name;

  Gorder_aggregate_order_byBuilder? _orders_aggregate;
  Gorder_aggregate_order_byBuilder get orders_aggregate =>
      _$this._orders_aggregate ??= new Gorder_aggregate_order_byBuilder();
  set orders_aggregate(Gorder_aggregate_order_byBuilder? orders_aggregate) =>
      _$this._orders_aggregate = orders_aggregate;

  Gorder_by? _phone;
  Gorder_by? get phone => _$this._phone;
  set phone(Gorder_by? phone) => _$this._phone = phone;

  Gorder_by? _username;
  Gorder_by? get username => _$this._username;
  set username(Gorder_by? username) => _$this._username = username;

  Gcustomer_order_byBuilder();

  Gcustomer_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _first_name = $v.first_name;
      _id = $v.id;
      _ip_address = $v.ip_address;
      _last_name = $v.last_name;
      _orders_aggregate = $v.orders_aggregate?.toBuilder();
      _phone = $v.phone;
      _username = $v.username;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_order_by;
  }

  @override
  void update(void Function(Gcustomer_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_order_by build() => _build();

  _$Gcustomer_order_by _build() {
    _$Gcustomer_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_order_by._(
              email: email,
              first_name: first_name,
              id: id,
              ip_address: ip_address,
              last_name: last_name,
              orders_aggregate: _orders_aggregate?.build(),
              phone: phone,
              username: username);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'orders_aggregate';
        _orders_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_pk_columns_input extends Gcustomer_pk_columns_input {
  @override
  final int id;

  factory _$Gcustomer_pk_columns_input(
          [void Function(Gcustomer_pk_columns_inputBuilder)? updates]) =>
      (new Gcustomer_pk_columns_inputBuilder()..update(updates))._build();

  _$Gcustomer_pk_columns_input._({required this.id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        id, r'Gcustomer_pk_columns_input', 'id');
  }

  @override
  Gcustomer_pk_columns_input rebuild(
          void Function(Gcustomer_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_pk_columns_inputBuilder toBuilder() =>
      new Gcustomer_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_pk_columns_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_pk_columns_input')
          ..add('id', id))
        .toString();
  }
}

class Gcustomer_pk_columns_inputBuilder
    implements
        Builder<Gcustomer_pk_columns_input, Gcustomer_pk_columns_inputBuilder> {
  _$Gcustomer_pk_columns_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gcustomer_pk_columns_inputBuilder();

  Gcustomer_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_pk_columns_input;
  }

  @override
  void update(void Function(Gcustomer_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_pk_columns_input build() => _build();

  _$Gcustomer_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gcustomer_pk_columns_input._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'Gcustomer_pk_columns_input', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_set_input extends Gcustomer_set_input {
  @override
  final String? email;
  @override
  final String? first_name;
  @override
  final int? id;
  @override
  final String? ip_address;
  @override
  final String? last_name;
  @override
  final String? phone;
  @override
  final String? username;

  factory _$Gcustomer_set_input(
          [void Function(Gcustomer_set_inputBuilder)? updates]) =>
      (new Gcustomer_set_inputBuilder()..update(updates))._build();

  _$Gcustomer_set_input._(
      {this.email,
      this.first_name,
      this.id,
      this.ip_address,
      this.last_name,
      this.phone,
      this.username})
      : super._();

  @override
  Gcustomer_set_input rebuild(
          void Function(Gcustomer_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_set_inputBuilder toBuilder() =>
      new Gcustomer_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_set_input &&
        email == other.email &&
        first_name == other.first_name &&
        id == other.id &&
        ip_address == other.ip_address &&
        last_name == other.last_name &&
        phone == other.phone &&
        username == other.username;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, email.hashCode), first_name.hashCode),
                        id.hashCode),
                    ip_address.hashCode),
                last_name.hashCode),
            phone.hashCode),
        username.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_set_input')
          ..add('email', email)
          ..add('first_name', first_name)
          ..add('id', id)
          ..add('ip_address', ip_address)
          ..add('last_name', last_name)
          ..add('phone', phone)
          ..add('username', username))
        .toString();
  }
}

class Gcustomer_set_inputBuilder
    implements Builder<Gcustomer_set_input, Gcustomer_set_inputBuilder> {
  _$Gcustomer_set_input? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _first_name;
  String? get first_name => _$this._first_name;
  set first_name(String? first_name) => _$this._first_name = first_name;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _ip_address;
  String? get ip_address => _$this._ip_address;
  set ip_address(String? ip_address) => _$this._ip_address = ip_address;

  String? _last_name;
  String? get last_name => _$this._last_name;
  set last_name(String? last_name) => _$this._last_name = last_name;

  String? _phone;
  String? get phone => _$this._phone;
  set phone(String? phone) => _$this._phone = phone;

  String? _username;
  String? get username => _$this._username;
  set username(String? username) => _$this._username = username;

  Gcustomer_set_inputBuilder();

  Gcustomer_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _first_name = $v.first_name;
      _id = $v.id;
      _ip_address = $v.ip_address;
      _last_name = $v.last_name;
      _phone = $v.phone;
      _username = $v.username;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_set_input;
  }

  @override
  void update(void Function(Gcustomer_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_set_input build() => _build();

  _$Gcustomer_set_input _build() {
    final _$result = _$v ??
        new _$Gcustomer_set_input._(
            email: email,
            first_name: first_name,
            id: id,
            ip_address: ip_address,
            last_name: last_name,
            phone: phone,
            username: username);
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_stream_cursor_input extends Gcustomer_stream_cursor_input {
  @override
  final Gcustomer_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gcustomer_stream_cursor_input(
          [void Function(Gcustomer_stream_cursor_inputBuilder)? updates]) =>
      (new Gcustomer_stream_cursor_inputBuilder()..update(updates))._build();

  _$Gcustomer_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gcustomer_stream_cursor_input', 'initial_value');
  }

  @override
  Gcustomer_stream_cursor_input rebuild(
          void Function(Gcustomer_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_stream_cursor_inputBuilder toBuilder() =>
      new Gcustomer_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gcustomer_stream_cursor_inputBuilder
    implements
        Builder<Gcustomer_stream_cursor_input,
            Gcustomer_stream_cursor_inputBuilder> {
  _$Gcustomer_stream_cursor_input? _$v;

  Gcustomer_stream_cursor_value_inputBuilder? _initial_value;
  Gcustomer_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gcustomer_stream_cursor_value_inputBuilder();
  set initial_value(
          Gcustomer_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gcustomer_stream_cursor_inputBuilder();

  Gcustomer_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_stream_cursor_input;
  }

  @override
  void update(void Function(Gcustomer_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_stream_cursor_input build() => _build();

  _$Gcustomer_stream_cursor_input _build() {
    _$Gcustomer_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_stream_cursor_value_input
    extends Gcustomer_stream_cursor_value_input {
  @override
  final String? email;
  @override
  final String? first_name;
  @override
  final int? id;
  @override
  final String? ip_address;
  @override
  final String? last_name;
  @override
  final String? phone;
  @override
  final String? username;

  factory _$Gcustomer_stream_cursor_value_input(
          [void Function(Gcustomer_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gcustomer_stream_cursor_value_inputBuilder()..update(updates))
          ._build();

  _$Gcustomer_stream_cursor_value_input._(
      {this.email,
      this.first_name,
      this.id,
      this.ip_address,
      this.last_name,
      this.phone,
      this.username})
      : super._();

  @override
  Gcustomer_stream_cursor_value_input rebuild(
          void Function(Gcustomer_stream_cursor_value_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_stream_cursor_value_inputBuilder toBuilder() =>
      new Gcustomer_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_stream_cursor_value_input &&
        email == other.email &&
        first_name == other.first_name &&
        id == other.id &&
        ip_address == other.ip_address &&
        last_name == other.last_name &&
        phone == other.phone &&
        username == other.username;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, email.hashCode), first_name.hashCode),
                        id.hashCode),
                    ip_address.hashCode),
                last_name.hashCode),
            phone.hashCode),
        username.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_stream_cursor_value_input')
          ..add('email', email)
          ..add('first_name', first_name)
          ..add('id', id)
          ..add('ip_address', ip_address)
          ..add('last_name', last_name)
          ..add('phone', phone)
          ..add('username', username))
        .toString();
  }
}

class Gcustomer_stream_cursor_value_inputBuilder
    implements
        Builder<Gcustomer_stream_cursor_value_input,
            Gcustomer_stream_cursor_value_inputBuilder> {
  _$Gcustomer_stream_cursor_value_input? _$v;

  String? _email;
  String? get email => _$this._email;
  set email(String? email) => _$this._email = email;

  String? _first_name;
  String? get first_name => _$this._first_name;
  set first_name(String? first_name) => _$this._first_name = first_name;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _ip_address;
  String? get ip_address => _$this._ip_address;
  set ip_address(String? ip_address) => _$this._ip_address = ip_address;

  String? _last_name;
  String? get last_name => _$this._last_name;
  set last_name(String? last_name) => _$this._last_name = last_name;

  String? _phone;
  String? get phone => _$this._phone;
  set phone(String? phone) => _$this._phone = phone;

  String? _username;
  String? get username => _$this._username;
  set username(String? username) => _$this._username = username;

  Gcustomer_stream_cursor_value_inputBuilder();

  Gcustomer_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _email = $v.email;
      _first_name = $v.first_name;
      _id = $v.id;
      _ip_address = $v.ip_address;
      _last_name = $v.last_name;
      _phone = $v.phone;
      _username = $v.username;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gcustomer_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_stream_cursor_value_input build() => _build();

  _$Gcustomer_stream_cursor_value_input _build() {
    final _$result = _$v ??
        new _$Gcustomer_stream_cursor_value_input._(
            email: email,
            first_name: first_name,
            id: id,
            ip_address: ip_address,
            last_name: last_name,
            phone: phone,
            username: username);
    replace(_$result);
    return _$result;
  }
}

class _$Gcustomer_updates extends Gcustomer_updates {
  @override
  final Gcustomer_inc_input? G_inc;
  @override
  final Gcustomer_set_input? G_set;
  @override
  final Gcustomer_bool_exp where;

  factory _$Gcustomer_updates(
          [void Function(Gcustomer_updatesBuilder)? updates]) =>
      (new Gcustomer_updatesBuilder()..update(updates))._build();

  _$Gcustomer_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(where, r'Gcustomer_updates', 'where');
  }

  @override
  Gcustomer_updates rebuild(void Function(Gcustomer_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gcustomer_updatesBuilder toBuilder() =>
      new Gcustomer_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gcustomer_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gcustomer_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gcustomer_updatesBuilder
    implements Builder<Gcustomer_updates, Gcustomer_updatesBuilder> {
  _$Gcustomer_updates? _$v;

  Gcustomer_inc_inputBuilder? _G_inc;
  Gcustomer_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gcustomer_inc_inputBuilder();
  set G_inc(Gcustomer_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gcustomer_set_inputBuilder? _G_set;
  Gcustomer_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gcustomer_set_inputBuilder();
  set G_set(Gcustomer_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gcustomer_bool_expBuilder? _where;
  Gcustomer_bool_expBuilder get where =>
      _$this._where ??= new Gcustomer_bool_expBuilder();
  set where(Gcustomer_bool_expBuilder? where) => _$this._where = where;

  Gcustomer_updatesBuilder();

  Gcustomer_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gcustomer_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gcustomer_updates;
  }

  @override
  void update(void Function(Gcustomer_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gcustomer_updates build() => _build();

  _$Gcustomer_updates _build() {
    _$Gcustomer_updates _$result;
    try {
      _$result = _$v ??
          new _$Gcustomer_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gcustomer_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gdate_comparison_exp extends Gdate_comparison_exp {
  @override
  final Gdate? G_eq;
  @override
  final Gdate? G_gt;
  @override
  final Gdate? G_gte;
  @override
  final BuiltList<Gdate>? G_in;
  @override
  final bool? G_is_null;
  @override
  final Gdate? G_lt;
  @override
  final Gdate? G_lte;
  @override
  final Gdate? G_neq;
  @override
  final BuiltList<Gdate>? G_nin;

  factory _$Gdate_comparison_exp(
          [void Function(Gdate_comparison_expBuilder)? updates]) =>
      (new Gdate_comparison_expBuilder()..update(updates))._build();

  _$Gdate_comparison_exp._(
      {this.G_eq,
      this.G_gt,
      this.G_gte,
      this.G_in,
      this.G_is_null,
      this.G_lt,
      this.G_lte,
      this.G_neq,
      this.G_nin})
      : super._();

  @override
  Gdate_comparison_exp rebuild(
          void Function(Gdate_comparison_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gdate_comparison_expBuilder toBuilder() =>
      new Gdate_comparison_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gdate_comparison_exp &&
        G_eq == other.G_eq &&
        G_gt == other.G_gt &&
        G_gte == other.G_gte &&
        G_in == other.G_in &&
        G_is_null == other.G_is_null &&
        G_lt == other.G_lt &&
        G_lte == other.G_lte &&
        G_neq == other.G_neq &&
        G_nin == other.G_nin;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc($jc(0, G_eq.hashCode), G_gt.hashCode),
                                G_gte.hashCode),
                            G_in.hashCode),
                        G_is_null.hashCode),
                    G_lt.hashCode),
                G_lte.hashCode),
            G_neq.hashCode),
        G_nin.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gdate_comparison_exp')
          ..add('G_eq', G_eq)
          ..add('G_gt', G_gt)
          ..add('G_gte', G_gte)
          ..add('G_in', G_in)
          ..add('G_is_null', G_is_null)
          ..add('G_lt', G_lt)
          ..add('G_lte', G_lte)
          ..add('G_neq', G_neq)
          ..add('G_nin', G_nin))
        .toString();
  }
}

class Gdate_comparison_expBuilder
    implements Builder<Gdate_comparison_exp, Gdate_comparison_expBuilder> {
  _$Gdate_comparison_exp? _$v;

  GdateBuilder? _G_eq;
  GdateBuilder get G_eq => _$this._G_eq ??= new GdateBuilder();
  set G_eq(GdateBuilder? G_eq) => _$this._G_eq = G_eq;

  GdateBuilder? _G_gt;
  GdateBuilder get G_gt => _$this._G_gt ??= new GdateBuilder();
  set G_gt(GdateBuilder? G_gt) => _$this._G_gt = G_gt;

  GdateBuilder? _G_gte;
  GdateBuilder get G_gte => _$this._G_gte ??= new GdateBuilder();
  set G_gte(GdateBuilder? G_gte) => _$this._G_gte = G_gte;

  ListBuilder<Gdate>? _G_in;
  ListBuilder<Gdate> get G_in => _$this._G_in ??= new ListBuilder<Gdate>();
  set G_in(ListBuilder<Gdate>? G_in) => _$this._G_in = G_in;

  bool? _G_is_null;
  bool? get G_is_null => _$this._G_is_null;
  set G_is_null(bool? G_is_null) => _$this._G_is_null = G_is_null;

  GdateBuilder? _G_lt;
  GdateBuilder get G_lt => _$this._G_lt ??= new GdateBuilder();
  set G_lt(GdateBuilder? G_lt) => _$this._G_lt = G_lt;

  GdateBuilder? _G_lte;
  GdateBuilder get G_lte => _$this._G_lte ??= new GdateBuilder();
  set G_lte(GdateBuilder? G_lte) => _$this._G_lte = G_lte;

  GdateBuilder? _G_neq;
  GdateBuilder get G_neq => _$this._G_neq ??= new GdateBuilder();
  set G_neq(GdateBuilder? G_neq) => _$this._G_neq = G_neq;

  ListBuilder<Gdate>? _G_nin;
  ListBuilder<Gdate> get G_nin => _$this._G_nin ??= new ListBuilder<Gdate>();
  set G_nin(ListBuilder<Gdate>? G_nin) => _$this._G_nin = G_nin;

  Gdate_comparison_expBuilder();

  Gdate_comparison_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_eq = $v.G_eq?.toBuilder();
      _G_gt = $v.G_gt?.toBuilder();
      _G_gte = $v.G_gte?.toBuilder();
      _G_in = $v.G_in?.toBuilder();
      _G_is_null = $v.G_is_null;
      _G_lt = $v.G_lt?.toBuilder();
      _G_lte = $v.G_lte?.toBuilder();
      _G_neq = $v.G_neq?.toBuilder();
      _G_nin = $v.G_nin?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gdate_comparison_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gdate_comparison_exp;
  }

  @override
  void update(void Function(Gdate_comparison_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gdate_comparison_exp build() => _build();

  _$Gdate_comparison_exp _build() {
    _$Gdate_comparison_exp _$result;
    try {
      _$result = _$v ??
          new _$Gdate_comparison_exp._(
              G_eq: _G_eq?.build(),
              G_gt: _G_gt?.build(),
              G_gte: _G_gte?.build(),
              G_in: _G_in?.build(),
              G_is_null: G_is_null,
              G_lt: _G_lt?.build(),
              G_lte: _G_lte?.build(),
              G_neq: _G_neq?.build(),
              G_nin: _G_nin?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_eq';
        _G_eq?.build();
        _$failedField = 'G_gt';
        _G_gt?.build();
        _$failedField = 'G_gte';
        _G_gte?.build();
        _$failedField = 'G_in';
        _G_in?.build();

        _$failedField = 'G_lt';
        _G_lt?.build();
        _$failedField = 'G_lte';
        _G_lte?.build();
        _$failedField = 'G_neq';
        _G_neq?.build();
        _$failedField = 'G_nin';
        _G_nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gdate_comparison_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_aggregate_bool_exp
    extends Gnotifications_aggregate_bool_exp {
  @override
  final Gnotifications_aggregate_bool_exp_bool_and? bool_and;
  @override
  final Gnotifications_aggregate_bool_exp_bool_or? bool_or;
  @override
  final Gnotifications_aggregate_bool_exp_count? count;

  factory _$Gnotifications_aggregate_bool_exp(
          [void Function(Gnotifications_aggregate_bool_expBuilder)? updates]) =>
      (new Gnotifications_aggregate_bool_expBuilder()..update(updates))
          ._build();

  _$Gnotifications_aggregate_bool_exp._(
      {this.bool_and, this.bool_or, this.count})
      : super._();

  @override
  Gnotifications_aggregate_bool_exp rebuild(
          void Function(Gnotifications_aggregate_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_aggregate_bool_expBuilder toBuilder() =>
      new Gnotifications_aggregate_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_aggregate_bool_exp &&
        bool_and == other.bool_and &&
        bool_or == other.bool_or &&
        count == other.count;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, bool_and.hashCode), bool_or.hashCode), count.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_aggregate_bool_exp')
          ..add('bool_and', bool_and)
          ..add('bool_or', bool_or)
          ..add('count', count))
        .toString();
  }
}

class Gnotifications_aggregate_bool_expBuilder
    implements
        Builder<Gnotifications_aggregate_bool_exp,
            Gnotifications_aggregate_bool_expBuilder> {
  _$Gnotifications_aggregate_bool_exp? _$v;

  Gnotifications_aggregate_bool_exp_bool_andBuilder? _bool_and;
  Gnotifications_aggregate_bool_exp_bool_andBuilder get bool_and =>
      _$this._bool_and ??=
          new Gnotifications_aggregate_bool_exp_bool_andBuilder();
  set bool_and(Gnotifications_aggregate_bool_exp_bool_andBuilder? bool_and) =>
      _$this._bool_and = bool_and;

  Gnotifications_aggregate_bool_exp_bool_orBuilder? _bool_or;
  Gnotifications_aggregate_bool_exp_bool_orBuilder get bool_or =>
      _$this._bool_or ??=
          new Gnotifications_aggregate_bool_exp_bool_orBuilder();
  set bool_or(Gnotifications_aggregate_bool_exp_bool_orBuilder? bool_or) =>
      _$this._bool_or = bool_or;

  Gnotifications_aggregate_bool_exp_countBuilder? _count;
  Gnotifications_aggregate_bool_exp_countBuilder get count =>
      _$this._count ??= new Gnotifications_aggregate_bool_exp_countBuilder();
  set count(Gnotifications_aggregate_bool_exp_countBuilder? count) =>
      _$this._count = count;

  Gnotifications_aggregate_bool_expBuilder();

  Gnotifications_aggregate_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _bool_and = $v.bool_and?.toBuilder();
      _bool_or = $v.bool_or?.toBuilder();
      _count = $v.count?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_aggregate_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_aggregate_bool_exp;
  }

  @override
  void update(
      void Function(Gnotifications_aggregate_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_aggregate_bool_exp build() => _build();

  _$Gnotifications_aggregate_bool_exp _build() {
    _$Gnotifications_aggregate_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_aggregate_bool_exp._(
              bool_and: _bool_and?.build(),
              bool_or: _bool_or?.build(),
              count: _count?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'bool_and';
        _bool_and?.build();
        _$failedField = 'bool_or';
        _bool_or?.build();
        _$failedField = 'count';
        _count?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_aggregate_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_aggregate_bool_exp_bool_and
    extends Gnotifications_aggregate_bool_exp_bool_and {
  @override
  final Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns
      arguments;
  @override
  final bool? distinct;
  @override
  final Gnotifications_bool_exp? filter;
  @override
  final GBoolean_comparison_exp predicate;

  factory _$Gnotifications_aggregate_bool_exp_bool_and(
          [void Function(Gnotifications_aggregate_bool_exp_bool_andBuilder)?
              updates]) =>
      (new Gnotifications_aggregate_bool_exp_bool_andBuilder()..update(updates))
          ._build();

  _$Gnotifications_aggregate_bool_exp_bool_and._(
      {required this.arguments,
      this.distinct,
      this.filter,
      required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        arguments, r'Gnotifications_aggregate_bool_exp_bool_and', 'arguments');
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gnotifications_aggregate_bool_exp_bool_and', 'predicate');
  }

  @override
  Gnotifications_aggregate_bool_exp_bool_and rebuild(
          void Function(Gnotifications_aggregate_bool_exp_bool_andBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_aggregate_bool_exp_bool_andBuilder toBuilder() =>
      new Gnotifications_aggregate_bool_exp_bool_andBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_aggregate_bool_exp_bool_and &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gnotifications_aggregate_bool_exp_bool_and')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gnotifications_aggregate_bool_exp_bool_andBuilder
    implements
        Builder<Gnotifications_aggregate_bool_exp_bool_and,
            Gnotifications_aggregate_bool_exp_bool_andBuilder> {
  _$Gnotifications_aggregate_bool_exp_bool_and? _$v;

  Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns?
      _arguments;
  Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns?
      get arguments => _$this._arguments;
  set arguments(
          Gnotifications_select_column_notifications_aggregate_bool_exp_bool_and_arguments_columns?
              arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gnotifications_bool_expBuilder? _filter;
  Gnotifications_bool_expBuilder get filter =>
      _$this._filter ??= new Gnotifications_bool_expBuilder();
  set filter(Gnotifications_bool_expBuilder? filter) => _$this._filter = filter;

  GBoolean_comparison_expBuilder? _predicate;
  GBoolean_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GBoolean_comparison_expBuilder();
  set predicate(GBoolean_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gnotifications_aggregate_bool_exp_bool_andBuilder();

  Gnotifications_aggregate_bool_exp_bool_andBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments;
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_aggregate_bool_exp_bool_and other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_aggregate_bool_exp_bool_and;
  }

  @override
  void update(
      void Function(Gnotifications_aggregate_bool_exp_bool_andBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_aggregate_bool_exp_bool_and build() => _build();

  _$Gnotifications_aggregate_bool_exp_bool_and _build() {
    _$Gnotifications_aggregate_bool_exp_bool_and _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_aggregate_bool_exp_bool_and._(
              arguments: BuiltValueNullFieldError.checkNotNull(arguments,
                  r'Gnotifications_aggregate_bool_exp_bool_and', 'arguments'),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_aggregate_bool_exp_bool_and',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_aggregate_bool_exp_bool_or
    extends Gnotifications_aggregate_bool_exp_bool_or {
  @override
  final Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns
      arguments;
  @override
  final bool? distinct;
  @override
  final Gnotifications_bool_exp? filter;
  @override
  final GBoolean_comparison_exp predicate;

  factory _$Gnotifications_aggregate_bool_exp_bool_or(
          [void Function(Gnotifications_aggregate_bool_exp_bool_orBuilder)?
              updates]) =>
      (new Gnotifications_aggregate_bool_exp_bool_orBuilder()..update(updates))
          ._build();

  _$Gnotifications_aggregate_bool_exp_bool_or._(
      {required this.arguments,
      this.distinct,
      this.filter,
      required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        arguments, r'Gnotifications_aggregate_bool_exp_bool_or', 'arguments');
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gnotifications_aggregate_bool_exp_bool_or', 'predicate');
  }

  @override
  Gnotifications_aggregate_bool_exp_bool_or rebuild(
          void Function(Gnotifications_aggregate_bool_exp_bool_orBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_aggregate_bool_exp_bool_orBuilder toBuilder() =>
      new Gnotifications_aggregate_bool_exp_bool_orBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_aggregate_bool_exp_bool_or &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gnotifications_aggregate_bool_exp_bool_or')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gnotifications_aggregate_bool_exp_bool_orBuilder
    implements
        Builder<Gnotifications_aggregate_bool_exp_bool_or,
            Gnotifications_aggregate_bool_exp_bool_orBuilder> {
  _$Gnotifications_aggregate_bool_exp_bool_or? _$v;

  Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns?
      _arguments;
  Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns?
      get arguments => _$this._arguments;
  set arguments(
          Gnotifications_select_column_notifications_aggregate_bool_exp_bool_or_arguments_columns?
              arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gnotifications_bool_expBuilder? _filter;
  Gnotifications_bool_expBuilder get filter =>
      _$this._filter ??= new Gnotifications_bool_expBuilder();
  set filter(Gnotifications_bool_expBuilder? filter) => _$this._filter = filter;

  GBoolean_comparison_expBuilder? _predicate;
  GBoolean_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GBoolean_comparison_expBuilder();
  set predicate(GBoolean_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gnotifications_aggregate_bool_exp_bool_orBuilder();

  Gnotifications_aggregate_bool_exp_bool_orBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments;
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_aggregate_bool_exp_bool_or other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_aggregate_bool_exp_bool_or;
  }

  @override
  void update(
      void Function(Gnotifications_aggregate_bool_exp_bool_orBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_aggregate_bool_exp_bool_or build() => _build();

  _$Gnotifications_aggregate_bool_exp_bool_or _build() {
    _$Gnotifications_aggregate_bool_exp_bool_or _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_aggregate_bool_exp_bool_or._(
              arguments: BuiltValueNullFieldError.checkNotNull(arguments,
                  r'Gnotifications_aggregate_bool_exp_bool_or', 'arguments'),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_aggregate_bool_exp_bool_or',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_aggregate_bool_exp_count
    extends Gnotifications_aggregate_bool_exp_count {
  @override
  final BuiltList<Gnotifications_select_column>? arguments;
  @override
  final bool? distinct;
  @override
  final Gnotifications_bool_exp? filter;
  @override
  final GInt_comparison_exp predicate;

  factory _$Gnotifications_aggregate_bool_exp_count(
          [void Function(Gnotifications_aggregate_bool_exp_countBuilder)?
              updates]) =>
      (new Gnotifications_aggregate_bool_exp_countBuilder()..update(updates))
          ._build();

  _$Gnotifications_aggregate_bool_exp_count._(
      {this.arguments, this.distinct, this.filter, required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gnotifications_aggregate_bool_exp_count', 'predicate');
  }

  @override
  Gnotifications_aggregate_bool_exp_count rebuild(
          void Function(Gnotifications_aggregate_bool_exp_countBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_aggregate_bool_exp_countBuilder toBuilder() =>
      new Gnotifications_aggregate_bool_exp_countBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_aggregate_bool_exp_count &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gnotifications_aggregate_bool_exp_count')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gnotifications_aggregate_bool_exp_countBuilder
    implements
        Builder<Gnotifications_aggregate_bool_exp_count,
            Gnotifications_aggregate_bool_exp_countBuilder> {
  _$Gnotifications_aggregate_bool_exp_count? _$v;

  ListBuilder<Gnotifications_select_column>? _arguments;
  ListBuilder<Gnotifications_select_column> get arguments =>
      _$this._arguments ??= new ListBuilder<Gnotifications_select_column>();
  set arguments(ListBuilder<Gnotifications_select_column>? arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gnotifications_bool_expBuilder? _filter;
  Gnotifications_bool_expBuilder get filter =>
      _$this._filter ??= new Gnotifications_bool_expBuilder();
  set filter(Gnotifications_bool_expBuilder? filter) => _$this._filter = filter;

  GInt_comparison_expBuilder? _predicate;
  GInt_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GInt_comparison_expBuilder();
  set predicate(GInt_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gnotifications_aggregate_bool_exp_countBuilder();

  Gnotifications_aggregate_bool_exp_countBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments?.toBuilder();
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_aggregate_bool_exp_count other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_aggregate_bool_exp_count;
  }

  @override
  void update(
      void Function(Gnotifications_aggregate_bool_exp_countBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_aggregate_bool_exp_count build() => _build();

  _$Gnotifications_aggregate_bool_exp_count _build() {
    _$Gnotifications_aggregate_bool_exp_count _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_aggregate_bool_exp_count._(
              arguments: _arguments?.build(),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'arguments';
        _arguments?.build();

        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_aggregate_bool_exp_count',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_aggregate_order_by
    extends Gnotifications_aggregate_order_by {
  @override
  final Gnotifications_avg_order_by? avg;
  @override
  final Gorder_by? count;
  @override
  final Gnotifications_max_order_by? max;
  @override
  final Gnotifications_min_order_by? min;
  @override
  final Gnotifications_stddev_order_by? stddev;
  @override
  final Gnotifications_stddev_pop_order_by? stddev_pop;
  @override
  final Gnotifications_stddev_samp_order_by? stddev_samp;
  @override
  final Gnotifications_sum_order_by? sum;
  @override
  final Gnotifications_var_pop_order_by? var_pop;
  @override
  final Gnotifications_var_samp_order_by? var_samp;
  @override
  final Gnotifications_variance_order_by? variance;

  factory _$Gnotifications_aggregate_order_by(
          [void Function(Gnotifications_aggregate_order_byBuilder)? updates]) =>
      (new Gnotifications_aggregate_order_byBuilder()..update(updates))
          ._build();

  _$Gnotifications_aggregate_order_by._(
      {this.avg,
      this.count,
      this.max,
      this.min,
      this.stddev,
      this.stddev_pop,
      this.stddev_samp,
      this.sum,
      this.var_pop,
      this.var_samp,
      this.variance})
      : super._();

  @override
  Gnotifications_aggregate_order_by rebuild(
          void Function(Gnotifications_aggregate_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_aggregate_order_byBuilder toBuilder() =>
      new Gnotifications_aggregate_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_aggregate_order_by &&
        avg == other.avg &&
        count == other.count &&
        max == other.max &&
        min == other.min &&
        stddev == other.stddev &&
        stddev_pop == other.stddev_pop &&
        stddev_samp == other.stddev_samp &&
        sum == other.sum &&
        var_pop == other.var_pop &&
        var_samp == other.var_samp &&
        variance == other.variance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, avg.hashCode),
                                            count.hashCode),
                                        max.hashCode),
                                    min.hashCode),
                                stddev.hashCode),
                            stddev_pop.hashCode),
                        stddev_samp.hashCode),
                    sum.hashCode),
                var_pop.hashCode),
            var_samp.hashCode),
        variance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_aggregate_order_by')
          ..add('avg', avg)
          ..add('count', count)
          ..add('max', max)
          ..add('min', min)
          ..add('stddev', stddev)
          ..add('stddev_pop', stddev_pop)
          ..add('stddev_samp', stddev_samp)
          ..add('sum', sum)
          ..add('var_pop', var_pop)
          ..add('var_samp', var_samp)
          ..add('variance', variance))
        .toString();
  }
}

class Gnotifications_aggregate_order_byBuilder
    implements
        Builder<Gnotifications_aggregate_order_by,
            Gnotifications_aggregate_order_byBuilder> {
  _$Gnotifications_aggregate_order_by? _$v;

  Gnotifications_avg_order_byBuilder? _avg;
  Gnotifications_avg_order_byBuilder get avg =>
      _$this._avg ??= new Gnotifications_avg_order_byBuilder();
  set avg(Gnotifications_avg_order_byBuilder? avg) => _$this._avg = avg;

  Gorder_by? _count;
  Gorder_by? get count => _$this._count;
  set count(Gorder_by? count) => _$this._count = count;

  Gnotifications_max_order_byBuilder? _max;
  Gnotifications_max_order_byBuilder get max =>
      _$this._max ??= new Gnotifications_max_order_byBuilder();
  set max(Gnotifications_max_order_byBuilder? max) => _$this._max = max;

  Gnotifications_min_order_byBuilder? _min;
  Gnotifications_min_order_byBuilder get min =>
      _$this._min ??= new Gnotifications_min_order_byBuilder();
  set min(Gnotifications_min_order_byBuilder? min) => _$this._min = min;

  Gnotifications_stddev_order_byBuilder? _stddev;
  Gnotifications_stddev_order_byBuilder get stddev =>
      _$this._stddev ??= new Gnotifications_stddev_order_byBuilder();
  set stddev(Gnotifications_stddev_order_byBuilder? stddev) =>
      _$this._stddev = stddev;

  Gnotifications_stddev_pop_order_byBuilder? _stddev_pop;
  Gnotifications_stddev_pop_order_byBuilder get stddev_pop =>
      _$this._stddev_pop ??= new Gnotifications_stddev_pop_order_byBuilder();
  set stddev_pop(Gnotifications_stddev_pop_order_byBuilder? stddev_pop) =>
      _$this._stddev_pop = stddev_pop;

  Gnotifications_stddev_samp_order_byBuilder? _stddev_samp;
  Gnotifications_stddev_samp_order_byBuilder get stddev_samp =>
      _$this._stddev_samp ??= new Gnotifications_stddev_samp_order_byBuilder();
  set stddev_samp(Gnotifications_stddev_samp_order_byBuilder? stddev_samp) =>
      _$this._stddev_samp = stddev_samp;

  Gnotifications_sum_order_byBuilder? _sum;
  Gnotifications_sum_order_byBuilder get sum =>
      _$this._sum ??= new Gnotifications_sum_order_byBuilder();
  set sum(Gnotifications_sum_order_byBuilder? sum) => _$this._sum = sum;

  Gnotifications_var_pop_order_byBuilder? _var_pop;
  Gnotifications_var_pop_order_byBuilder get var_pop =>
      _$this._var_pop ??= new Gnotifications_var_pop_order_byBuilder();
  set var_pop(Gnotifications_var_pop_order_byBuilder? var_pop) =>
      _$this._var_pop = var_pop;

  Gnotifications_var_samp_order_byBuilder? _var_samp;
  Gnotifications_var_samp_order_byBuilder get var_samp =>
      _$this._var_samp ??= new Gnotifications_var_samp_order_byBuilder();
  set var_samp(Gnotifications_var_samp_order_byBuilder? var_samp) =>
      _$this._var_samp = var_samp;

  Gnotifications_variance_order_byBuilder? _variance;
  Gnotifications_variance_order_byBuilder get variance =>
      _$this._variance ??= new Gnotifications_variance_order_byBuilder();
  set variance(Gnotifications_variance_order_byBuilder? variance) =>
      _$this._variance = variance;

  Gnotifications_aggregate_order_byBuilder();

  Gnotifications_aggregate_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _avg = $v.avg?.toBuilder();
      _count = $v.count;
      _max = $v.max?.toBuilder();
      _min = $v.min?.toBuilder();
      _stddev = $v.stddev?.toBuilder();
      _stddev_pop = $v.stddev_pop?.toBuilder();
      _stddev_samp = $v.stddev_samp?.toBuilder();
      _sum = $v.sum?.toBuilder();
      _var_pop = $v.var_pop?.toBuilder();
      _var_samp = $v.var_samp?.toBuilder();
      _variance = $v.variance?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_aggregate_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_aggregate_order_by;
  }

  @override
  void update(
      void Function(Gnotifications_aggregate_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_aggregate_order_by build() => _build();

  _$Gnotifications_aggregate_order_by _build() {
    _$Gnotifications_aggregate_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_aggregate_order_by._(
              avg: _avg?.build(),
              count: count,
              max: _max?.build(),
              min: _min?.build(),
              stddev: _stddev?.build(),
              stddev_pop: _stddev_pop?.build(),
              stddev_samp: _stddev_samp?.build(),
              sum: _sum?.build(),
              var_pop: _var_pop?.build(),
              var_samp: _var_samp?.build(),
              variance: _variance?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'avg';
        _avg?.build();

        _$failedField = 'max';
        _max?.build();
        _$failedField = 'min';
        _min?.build();
        _$failedField = 'stddev';
        _stddev?.build();
        _$failedField = 'stddev_pop';
        _stddev_pop?.build();
        _$failedField = 'stddev_samp';
        _stddev_samp?.build();
        _$failedField = 'sum';
        _sum?.build();
        _$failedField = 'var_pop';
        _var_pop?.build();
        _$failedField = 'var_samp';
        _var_samp?.build();
        _$failedField = 'variance';
        _variance?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_aggregate_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_arr_rel_insert_input
    extends Gnotifications_arr_rel_insert_input {
  @override
  final BuiltList<Gnotifications_insert_input> data;
  @override
  final Gnotifications_on_conflict? on_conflict;

  factory _$Gnotifications_arr_rel_insert_input(
          [void Function(Gnotifications_arr_rel_insert_inputBuilder)?
              updates]) =>
      (new Gnotifications_arr_rel_insert_inputBuilder()..update(updates))
          ._build();

  _$Gnotifications_arr_rel_insert_input._(
      {required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gnotifications_arr_rel_insert_input', 'data');
  }

  @override
  Gnotifications_arr_rel_insert_input rebuild(
          void Function(Gnotifications_arr_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_arr_rel_insert_inputBuilder toBuilder() =>
      new Gnotifications_arr_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_arr_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_arr_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gnotifications_arr_rel_insert_inputBuilder
    implements
        Builder<Gnotifications_arr_rel_insert_input,
            Gnotifications_arr_rel_insert_inputBuilder> {
  _$Gnotifications_arr_rel_insert_input? _$v;

  ListBuilder<Gnotifications_insert_input>? _data;
  ListBuilder<Gnotifications_insert_input> get data =>
      _$this._data ??= new ListBuilder<Gnotifications_insert_input>();
  set data(ListBuilder<Gnotifications_insert_input>? data) =>
      _$this._data = data;

  Gnotifications_on_conflictBuilder? _on_conflict;
  Gnotifications_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gnotifications_on_conflictBuilder();
  set on_conflict(Gnotifications_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gnotifications_arr_rel_insert_inputBuilder();

  Gnotifications_arr_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_arr_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_arr_rel_insert_input;
  }

  @override
  void update(
      void Function(Gnotifications_arr_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_arr_rel_insert_input build() => _build();

  _$Gnotifications_arr_rel_insert_input _build() {
    _$Gnotifications_arr_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_arr_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_arr_rel_insert_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_avg_order_by extends Gnotifications_avg_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_avg_order_by(
          [void Function(Gnotifications_avg_order_byBuilder)? updates]) =>
      (new Gnotifications_avg_order_byBuilder()..update(updates))._build();

  _$Gnotifications_avg_order_by._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_avg_order_by rebuild(
          void Function(Gnotifications_avg_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_avg_order_byBuilder toBuilder() =>
      new Gnotifications_avg_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_avg_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_avg_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_avg_order_byBuilder
    implements
        Builder<Gnotifications_avg_order_by,
            Gnotifications_avg_order_byBuilder> {
  _$Gnotifications_avg_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_avg_order_byBuilder();

  Gnotifications_avg_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_avg_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_avg_order_by;
  }

  @override
  void update(void Function(Gnotifications_avg_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_avg_order_by build() => _build();

  _$Gnotifications_avg_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_avg_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_bool_exp extends Gnotifications_bool_exp {
  @override
  final BuiltList<Gnotifications_bool_exp>? G_and;
  @override
  final Gnotifications_bool_exp? G_not;
  @override
  final BuiltList<Gnotifications_bool_exp>? G_or;
  @override
  final GInt_comparison_exp? cable_id;
  @override
  final Gcable_opr_bool_exp? cable_opr;
  @override
  final GBoolean_comparison_exp? isRead;
  @override
  final GInt_comparison_exp? not_id;
  @override
  final GInt_comparison_exp? pay_id;
  @override
  final Gpayments_bool_exp? payment;

  factory _$Gnotifications_bool_exp(
          [void Function(Gnotifications_bool_expBuilder)? updates]) =>
      (new Gnotifications_bool_expBuilder()..update(updates))._build();

  _$Gnotifications_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.cable_id,
      this.cable_opr,
      this.isRead,
      this.not_id,
      this.pay_id,
      this.payment})
      : super._();

  @override
  Gnotifications_bool_exp rebuild(
          void Function(Gnotifications_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_bool_expBuilder toBuilder() =>
      new Gnotifications_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        isRead == other.isRead &&
        not_id == other.not_id &&
        pay_id == other.pay_id &&
        payment == other.payment;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc($jc(0, G_and.hashCode), G_not.hashCode),
                                G_or.hashCode),
                            cable_id.hashCode),
                        cable_opr.hashCode),
                    isRead.hashCode),
                not_id.hashCode),
            pay_id.hashCode),
        payment.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('isRead', isRead)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id)
          ..add('payment', payment))
        .toString();
  }
}

class Gnotifications_bool_expBuilder
    implements
        Builder<Gnotifications_bool_exp, Gnotifications_bool_expBuilder> {
  _$Gnotifications_bool_exp? _$v;

  ListBuilder<Gnotifications_bool_exp>? _G_and;
  ListBuilder<Gnotifications_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gnotifications_bool_exp>();
  set G_and(ListBuilder<Gnotifications_bool_exp>? G_and) =>
      _$this._G_and = G_and;

  Gnotifications_bool_expBuilder? _G_not;
  Gnotifications_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gnotifications_bool_expBuilder();
  set G_not(Gnotifications_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gnotifications_bool_exp>? _G_or;
  ListBuilder<Gnotifications_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gnotifications_bool_exp>();
  set G_or(ListBuilder<Gnotifications_bool_exp>? G_or) => _$this._G_or = G_or;

  GInt_comparison_expBuilder? _cable_id;
  GInt_comparison_expBuilder get cable_id =>
      _$this._cable_id ??= new GInt_comparison_expBuilder();
  set cable_id(GInt_comparison_expBuilder? cable_id) =>
      _$this._cable_id = cable_id;

  Gcable_opr_bool_expBuilder? _cable_opr;
  Gcable_opr_bool_expBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_bool_expBuilder();
  set cable_opr(Gcable_opr_bool_expBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  GBoolean_comparison_expBuilder? _isRead;
  GBoolean_comparison_expBuilder get isRead =>
      _$this._isRead ??= new GBoolean_comparison_expBuilder();
  set isRead(GBoolean_comparison_expBuilder? isRead) => _$this._isRead = isRead;

  GInt_comparison_expBuilder? _not_id;
  GInt_comparison_expBuilder get not_id =>
      _$this._not_id ??= new GInt_comparison_expBuilder();
  set not_id(GInt_comparison_expBuilder? not_id) => _$this._not_id = not_id;

  GInt_comparison_expBuilder? _pay_id;
  GInt_comparison_expBuilder get pay_id =>
      _$this._pay_id ??= new GInt_comparison_expBuilder();
  set pay_id(GInt_comparison_expBuilder? pay_id) => _$this._pay_id = pay_id;

  Gpayments_bool_expBuilder? _payment;
  Gpayments_bool_expBuilder get payment =>
      _$this._payment ??= new Gpayments_bool_expBuilder();
  set payment(Gpayments_bool_expBuilder? payment) => _$this._payment = payment;

  Gnotifications_bool_expBuilder();

  Gnotifications_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _cable_id = $v.cable_id?.toBuilder();
      _cable_opr = $v.cable_opr?.toBuilder();
      _isRead = $v.isRead?.toBuilder();
      _not_id = $v.not_id?.toBuilder();
      _pay_id = $v.pay_id?.toBuilder();
      _payment = $v.payment?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_bool_exp;
  }

  @override
  void update(void Function(Gnotifications_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_bool_exp build() => _build();

  _$Gnotifications_bool_exp _build() {
    _$Gnotifications_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              cable_id: _cable_id?.build(),
              cable_opr: _cable_opr?.build(),
              isRead: _isRead?.build(),
              not_id: _not_id?.build(),
              pay_id: _pay_id?.build(),
              payment: _payment?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'cable_id';
        _cable_id?.build();
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'isRead';
        _isRead?.build();
        _$failedField = 'not_id';
        _not_id?.build();
        _$failedField = 'pay_id';
        _pay_id?.build();
        _$failedField = 'payment';
        _payment?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_inc_input extends Gnotifications_inc_input {
  @override
  final int? cable_id;
  @override
  final int? not_id;
  @override
  final int? pay_id;

  factory _$Gnotifications_inc_input(
          [void Function(Gnotifications_inc_inputBuilder)? updates]) =>
      (new Gnotifications_inc_inputBuilder()..update(updates))._build();

  _$Gnotifications_inc_input._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_inc_input rebuild(
          void Function(Gnotifications_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_inc_inputBuilder toBuilder() =>
      new Gnotifications_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_inc_input &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_inc_input')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_inc_inputBuilder
    implements
        Builder<Gnotifications_inc_input, Gnotifications_inc_inputBuilder> {
  _$Gnotifications_inc_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  int? _not_id;
  int? get not_id => _$this._not_id;
  set not_id(int? not_id) => _$this._not_id = not_id;

  int? _pay_id;
  int? get pay_id => _$this._pay_id;
  set pay_id(int? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_inc_inputBuilder();

  Gnotifications_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_inc_input;
  }

  @override
  void update(void Function(Gnotifications_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_inc_input build() => _build();

  _$Gnotifications_inc_input _build() {
    final _$result = _$v ??
        new _$Gnotifications_inc_input._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_insert_input extends Gnotifications_insert_input {
  @override
  final int? cable_id;
  @override
  final Gcable_opr_obj_rel_insert_input? cable_opr;
  @override
  final bool? isRead;
  @override
  final int? not_id;
  @override
  final int? pay_id;
  @override
  final Gpayments_obj_rel_insert_input? payment;

  factory _$Gnotifications_insert_input(
          [void Function(Gnotifications_insert_inputBuilder)? updates]) =>
      (new Gnotifications_insert_inputBuilder()..update(updates))._build();

  _$Gnotifications_insert_input._(
      {this.cable_id,
      this.cable_opr,
      this.isRead,
      this.not_id,
      this.pay_id,
      this.payment})
      : super._();

  @override
  Gnotifications_insert_input rebuild(
          void Function(Gnotifications_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_insert_inputBuilder toBuilder() =>
      new Gnotifications_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_insert_input &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        isRead == other.isRead &&
        not_id == other.not_id &&
        pay_id == other.pay_id &&
        payment == other.payment;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, cable_id.hashCode), cable_opr.hashCode),
                    isRead.hashCode),
                not_id.hashCode),
            pay_id.hashCode),
        payment.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_insert_input')
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('isRead', isRead)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id)
          ..add('payment', payment))
        .toString();
  }
}

class Gnotifications_insert_inputBuilder
    implements
        Builder<Gnotifications_insert_input,
            Gnotifications_insert_inputBuilder> {
  _$Gnotifications_insert_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  Gcable_opr_obj_rel_insert_inputBuilder? _cable_opr;
  Gcable_opr_obj_rel_insert_inputBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_obj_rel_insert_inputBuilder();
  set cable_opr(Gcable_opr_obj_rel_insert_inputBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  bool? _isRead;
  bool? get isRead => _$this._isRead;
  set isRead(bool? isRead) => _$this._isRead = isRead;

  int? _not_id;
  int? get not_id => _$this._not_id;
  set not_id(int? not_id) => _$this._not_id = not_id;

  int? _pay_id;
  int? get pay_id => _$this._pay_id;
  set pay_id(int? pay_id) => _$this._pay_id = pay_id;

  Gpayments_obj_rel_insert_inputBuilder? _payment;
  Gpayments_obj_rel_insert_inputBuilder get payment =>
      _$this._payment ??= new Gpayments_obj_rel_insert_inputBuilder();
  set payment(Gpayments_obj_rel_insert_inputBuilder? payment) =>
      _$this._payment = payment;

  Gnotifications_insert_inputBuilder();

  Gnotifications_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _cable_opr = $v.cable_opr?.toBuilder();
      _isRead = $v.isRead;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _payment = $v.payment?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_insert_input;
  }

  @override
  void update(void Function(Gnotifications_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_insert_input build() => _build();

  _$Gnotifications_insert_input _build() {
    _$Gnotifications_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_insert_input._(
              cable_id: cable_id,
              cable_opr: _cable_opr?.build(),
              isRead: isRead,
              not_id: not_id,
              pay_id: pay_id,
              payment: _payment?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'payment';
        _payment?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_max_order_by extends Gnotifications_max_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_max_order_by(
          [void Function(Gnotifications_max_order_byBuilder)? updates]) =>
      (new Gnotifications_max_order_byBuilder()..update(updates))._build();

  _$Gnotifications_max_order_by._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_max_order_by rebuild(
          void Function(Gnotifications_max_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_max_order_byBuilder toBuilder() =>
      new Gnotifications_max_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_max_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_max_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_max_order_byBuilder
    implements
        Builder<Gnotifications_max_order_by,
            Gnotifications_max_order_byBuilder> {
  _$Gnotifications_max_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_max_order_byBuilder();

  Gnotifications_max_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_max_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_max_order_by;
  }

  @override
  void update(void Function(Gnotifications_max_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_max_order_by build() => _build();

  _$Gnotifications_max_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_max_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_min_order_by extends Gnotifications_min_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_min_order_by(
          [void Function(Gnotifications_min_order_byBuilder)? updates]) =>
      (new Gnotifications_min_order_byBuilder()..update(updates))._build();

  _$Gnotifications_min_order_by._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_min_order_by rebuild(
          void Function(Gnotifications_min_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_min_order_byBuilder toBuilder() =>
      new Gnotifications_min_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_min_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_min_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_min_order_byBuilder
    implements
        Builder<Gnotifications_min_order_by,
            Gnotifications_min_order_byBuilder> {
  _$Gnotifications_min_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_min_order_byBuilder();

  Gnotifications_min_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_min_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_min_order_by;
  }

  @override
  void update(void Function(Gnotifications_min_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_min_order_by build() => _build();

  _$Gnotifications_min_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_min_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_on_conflict extends Gnotifications_on_conflict {
  @override
  final Gnotifications_constraint constraint;
  @override
  final BuiltList<Gnotifications_update_column> update_columns;
  @override
  final Gnotifications_bool_exp? where;

  factory _$Gnotifications_on_conflict(
          [void Function(Gnotifications_on_conflictBuilder)? updates]) =>
      (new Gnotifications_on_conflictBuilder()..update(updates))._build();

  _$Gnotifications_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gnotifications_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gnotifications_on_conflict', 'update_columns');
  }

  @override
  Gnotifications_on_conflict rebuild(
          void Function(Gnotifications_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_on_conflictBuilder toBuilder() =>
      new Gnotifications_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gnotifications_on_conflictBuilder
    implements
        Builder<Gnotifications_on_conflict, Gnotifications_on_conflictBuilder> {
  _$Gnotifications_on_conflict? _$v;

  Gnotifications_constraint? _constraint;
  Gnotifications_constraint? get constraint => _$this._constraint;
  set constraint(Gnotifications_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gnotifications_update_column>? _update_columns;
  ListBuilder<Gnotifications_update_column> get update_columns =>
      _$this._update_columns ??=
          new ListBuilder<Gnotifications_update_column>();
  set update_columns(
          ListBuilder<Gnotifications_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gnotifications_bool_expBuilder? _where;
  Gnotifications_bool_expBuilder get where =>
      _$this._where ??= new Gnotifications_bool_expBuilder();
  set where(Gnotifications_bool_expBuilder? where) => _$this._where = where;

  Gnotifications_on_conflictBuilder();

  Gnotifications_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_on_conflict;
  }

  @override
  void update(void Function(Gnotifications_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_on_conflict build() => _build();

  _$Gnotifications_on_conflict _build() {
    _$Gnotifications_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gnotifications_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_order_by extends Gnotifications_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gcable_opr_order_by? cable_opr;
  @override
  final Gorder_by? isRead;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;
  @override
  final Gpayments_order_by? payment;

  factory _$Gnotifications_order_by(
          [void Function(Gnotifications_order_byBuilder)? updates]) =>
      (new Gnotifications_order_byBuilder()..update(updates))._build();

  _$Gnotifications_order_by._(
      {this.cable_id,
      this.cable_opr,
      this.isRead,
      this.not_id,
      this.pay_id,
      this.payment})
      : super._();

  @override
  Gnotifications_order_by rebuild(
          void Function(Gnotifications_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_order_byBuilder toBuilder() =>
      new Gnotifications_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_order_by &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        isRead == other.isRead &&
        not_id == other.not_id &&
        pay_id == other.pay_id &&
        payment == other.payment;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, cable_id.hashCode), cable_opr.hashCode),
                    isRead.hashCode),
                not_id.hashCode),
            pay_id.hashCode),
        payment.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_order_by')
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('isRead', isRead)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id)
          ..add('payment', payment))
        .toString();
  }
}

class Gnotifications_order_byBuilder
    implements
        Builder<Gnotifications_order_by, Gnotifications_order_byBuilder> {
  _$Gnotifications_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gcable_opr_order_byBuilder? _cable_opr;
  Gcable_opr_order_byBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_order_byBuilder();
  set cable_opr(Gcable_opr_order_byBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gorder_by? _isRead;
  Gorder_by? get isRead => _$this._isRead;
  set isRead(Gorder_by? isRead) => _$this._isRead = isRead;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gpayments_order_byBuilder? _payment;
  Gpayments_order_byBuilder get payment =>
      _$this._payment ??= new Gpayments_order_byBuilder();
  set payment(Gpayments_order_byBuilder? payment) => _$this._payment = payment;

  Gnotifications_order_byBuilder();

  Gnotifications_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _cable_opr = $v.cable_opr?.toBuilder();
      _isRead = $v.isRead;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _payment = $v.payment?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_order_by;
  }

  @override
  void update(void Function(Gnotifications_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_order_by build() => _build();

  _$Gnotifications_order_by _build() {
    _$Gnotifications_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_order_by._(
              cable_id: cable_id,
              cable_opr: _cable_opr?.build(),
              isRead: isRead,
              not_id: not_id,
              pay_id: pay_id,
              payment: _payment?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'payment';
        _payment?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_pk_columns_input
    extends Gnotifications_pk_columns_input {
  @override
  final int not_id;

  factory _$Gnotifications_pk_columns_input(
          [void Function(Gnotifications_pk_columns_inputBuilder)? updates]) =>
      (new Gnotifications_pk_columns_inputBuilder()..update(updates))._build();

  _$Gnotifications_pk_columns_input._({required this.not_id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        not_id, r'Gnotifications_pk_columns_input', 'not_id');
  }

  @override
  Gnotifications_pk_columns_input rebuild(
          void Function(Gnotifications_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_pk_columns_inputBuilder toBuilder() =>
      new Gnotifications_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_pk_columns_input && not_id == other.not_id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, not_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_pk_columns_input')
          ..add('not_id', not_id))
        .toString();
  }
}

class Gnotifications_pk_columns_inputBuilder
    implements
        Builder<Gnotifications_pk_columns_input,
            Gnotifications_pk_columns_inputBuilder> {
  _$Gnotifications_pk_columns_input? _$v;

  int? _not_id;
  int? get not_id => _$this._not_id;
  set not_id(int? not_id) => _$this._not_id = not_id;

  Gnotifications_pk_columns_inputBuilder();

  Gnotifications_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _not_id = $v.not_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_pk_columns_input;
  }

  @override
  void update(void Function(Gnotifications_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_pk_columns_input build() => _build();

  _$Gnotifications_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gnotifications_pk_columns_input._(
            not_id: BuiltValueNullFieldError.checkNotNull(
                not_id, r'Gnotifications_pk_columns_input', 'not_id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_set_input extends Gnotifications_set_input {
  @override
  final int? cable_id;
  @override
  final bool? isRead;
  @override
  final int? not_id;
  @override
  final int? pay_id;

  factory _$Gnotifications_set_input(
          [void Function(Gnotifications_set_inputBuilder)? updates]) =>
      (new Gnotifications_set_inputBuilder()..update(updates))._build();

  _$Gnotifications_set_input._(
      {this.cable_id, this.isRead, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_set_input rebuild(
          void Function(Gnotifications_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_set_inputBuilder toBuilder() =>
      new Gnotifications_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_set_input &&
        cable_id == other.cable_id &&
        isRead == other.isRead &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, cable_id.hashCode), isRead.hashCode), not_id.hashCode),
        pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_set_input')
          ..add('cable_id', cable_id)
          ..add('isRead', isRead)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_set_inputBuilder
    implements
        Builder<Gnotifications_set_input, Gnotifications_set_inputBuilder> {
  _$Gnotifications_set_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  bool? _isRead;
  bool? get isRead => _$this._isRead;
  set isRead(bool? isRead) => _$this._isRead = isRead;

  int? _not_id;
  int? get not_id => _$this._not_id;
  set not_id(int? not_id) => _$this._not_id = not_id;

  int? _pay_id;
  int? get pay_id => _$this._pay_id;
  set pay_id(int? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_set_inputBuilder();

  Gnotifications_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _isRead = $v.isRead;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_set_input;
  }

  @override
  void update(void Function(Gnotifications_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_set_input build() => _build();

  _$Gnotifications_set_input _build() {
    final _$result = _$v ??
        new _$Gnotifications_set_input._(
            cable_id: cable_id, isRead: isRead, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_stddev_order_by extends Gnotifications_stddev_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_stddev_order_by(
          [void Function(Gnotifications_stddev_order_byBuilder)? updates]) =>
      (new Gnotifications_stddev_order_byBuilder()..update(updates))._build();

  _$Gnotifications_stddev_order_by._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_stddev_order_by rebuild(
          void Function(Gnotifications_stddev_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_stddev_order_byBuilder toBuilder() =>
      new Gnotifications_stddev_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_stddev_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_stddev_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_stddev_order_byBuilder
    implements
        Builder<Gnotifications_stddev_order_by,
            Gnotifications_stddev_order_byBuilder> {
  _$Gnotifications_stddev_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_stddev_order_byBuilder();

  Gnotifications_stddev_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_stddev_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_stddev_order_by;
  }

  @override
  void update(void Function(Gnotifications_stddev_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_stddev_order_by build() => _build();

  _$Gnotifications_stddev_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_stddev_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_stddev_pop_order_by
    extends Gnotifications_stddev_pop_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_stddev_pop_order_by(
          [void Function(Gnotifications_stddev_pop_order_byBuilder)?
              updates]) =>
      (new Gnotifications_stddev_pop_order_byBuilder()..update(updates))
          ._build();

  _$Gnotifications_stddev_pop_order_by._(
      {this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_stddev_pop_order_by rebuild(
          void Function(Gnotifications_stddev_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_stddev_pop_order_byBuilder toBuilder() =>
      new Gnotifications_stddev_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_stddev_pop_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_stddev_pop_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_stddev_pop_order_byBuilder
    implements
        Builder<Gnotifications_stddev_pop_order_by,
            Gnotifications_stddev_pop_order_byBuilder> {
  _$Gnotifications_stddev_pop_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_stddev_pop_order_byBuilder();

  Gnotifications_stddev_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_stddev_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_stddev_pop_order_by;
  }

  @override
  void update(
      void Function(Gnotifications_stddev_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_stddev_pop_order_by build() => _build();

  _$Gnotifications_stddev_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_stddev_pop_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_stddev_samp_order_by
    extends Gnotifications_stddev_samp_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_stddev_samp_order_by(
          [void Function(Gnotifications_stddev_samp_order_byBuilder)?
              updates]) =>
      (new Gnotifications_stddev_samp_order_byBuilder()..update(updates))
          ._build();

  _$Gnotifications_stddev_samp_order_by._(
      {this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_stddev_samp_order_by rebuild(
          void Function(Gnotifications_stddev_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_stddev_samp_order_byBuilder toBuilder() =>
      new Gnotifications_stddev_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_stddev_samp_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_stddev_samp_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_stddev_samp_order_byBuilder
    implements
        Builder<Gnotifications_stddev_samp_order_by,
            Gnotifications_stddev_samp_order_byBuilder> {
  _$Gnotifications_stddev_samp_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_stddev_samp_order_byBuilder();

  Gnotifications_stddev_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_stddev_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_stddev_samp_order_by;
  }

  @override
  void update(
      void Function(Gnotifications_stddev_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_stddev_samp_order_by build() => _build();

  _$Gnotifications_stddev_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_stddev_samp_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_stream_cursor_input
    extends Gnotifications_stream_cursor_input {
  @override
  final Gnotifications_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gnotifications_stream_cursor_input(
          [void Function(Gnotifications_stream_cursor_inputBuilder)?
              updates]) =>
      (new Gnotifications_stream_cursor_inputBuilder()..update(updates))
          ._build();

  _$Gnotifications_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gnotifications_stream_cursor_input', 'initial_value');
  }

  @override
  Gnotifications_stream_cursor_input rebuild(
          void Function(Gnotifications_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_stream_cursor_inputBuilder toBuilder() =>
      new Gnotifications_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gnotifications_stream_cursor_inputBuilder
    implements
        Builder<Gnotifications_stream_cursor_input,
            Gnotifications_stream_cursor_inputBuilder> {
  _$Gnotifications_stream_cursor_input? _$v;

  Gnotifications_stream_cursor_value_inputBuilder? _initial_value;
  Gnotifications_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gnotifications_stream_cursor_value_inputBuilder();
  set initial_value(
          Gnotifications_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gnotifications_stream_cursor_inputBuilder();

  Gnotifications_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_stream_cursor_input;
  }

  @override
  void update(
      void Function(Gnotifications_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_stream_cursor_input build() => _build();

  _$Gnotifications_stream_cursor_input _build() {
    _$Gnotifications_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_stream_cursor_value_input
    extends Gnotifications_stream_cursor_value_input {
  @override
  final int? cable_id;
  @override
  final bool? isRead;
  @override
  final int? not_id;
  @override
  final int? pay_id;

  factory _$Gnotifications_stream_cursor_value_input(
          [void Function(Gnotifications_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gnotifications_stream_cursor_value_inputBuilder()..update(updates))
          ._build();

  _$Gnotifications_stream_cursor_value_input._(
      {this.cable_id, this.isRead, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_stream_cursor_value_input rebuild(
          void Function(Gnotifications_stream_cursor_value_inputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_stream_cursor_value_inputBuilder toBuilder() =>
      new Gnotifications_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_stream_cursor_value_input &&
        cable_id == other.cable_id &&
        isRead == other.isRead &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, cable_id.hashCode), isRead.hashCode), not_id.hashCode),
        pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            r'Gnotifications_stream_cursor_value_input')
          ..add('cable_id', cable_id)
          ..add('isRead', isRead)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_stream_cursor_value_inputBuilder
    implements
        Builder<Gnotifications_stream_cursor_value_input,
            Gnotifications_stream_cursor_value_inputBuilder> {
  _$Gnotifications_stream_cursor_value_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  bool? _isRead;
  bool? get isRead => _$this._isRead;
  set isRead(bool? isRead) => _$this._isRead = isRead;

  int? _not_id;
  int? get not_id => _$this._not_id;
  set not_id(int? not_id) => _$this._not_id = not_id;

  int? _pay_id;
  int? get pay_id => _$this._pay_id;
  set pay_id(int? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_stream_cursor_value_inputBuilder();

  Gnotifications_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _isRead = $v.isRead;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gnotifications_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_stream_cursor_value_input build() => _build();

  _$Gnotifications_stream_cursor_value_input _build() {
    final _$result = _$v ??
        new _$Gnotifications_stream_cursor_value_input._(
            cable_id: cable_id, isRead: isRead, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_sum_order_by extends Gnotifications_sum_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_sum_order_by(
          [void Function(Gnotifications_sum_order_byBuilder)? updates]) =>
      (new Gnotifications_sum_order_byBuilder()..update(updates))._build();

  _$Gnotifications_sum_order_by._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_sum_order_by rebuild(
          void Function(Gnotifications_sum_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_sum_order_byBuilder toBuilder() =>
      new Gnotifications_sum_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_sum_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_sum_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_sum_order_byBuilder
    implements
        Builder<Gnotifications_sum_order_by,
            Gnotifications_sum_order_byBuilder> {
  _$Gnotifications_sum_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_sum_order_byBuilder();

  Gnotifications_sum_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_sum_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_sum_order_by;
  }

  @override
  void update(void Function(Gnotifications_sum_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_sum_order_by build() => _build();

  _$Gnotifications_sum_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_sum_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_updates extends Gnotifications_updates {
  @override
  final Gnotifications_inc_input? G_inc;
  @override
  final Gnotifications_set_input? G_set;
  @override
  final Gnotifications_bool_exp where;

  factory _$Gnotifications_updates(
          [void Function(Gnotifications_updatesBuilder)? updates]) =>
      (new Gnotifications_updatesBuilder()..update(updates))._build();

  _$Gnotifications_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, r'Gnotifications_updates', 'where');
  }

  @override
  Gnotifications_updates rebuild(
          void Function(Gnotifications_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_updatesBuilder toBuilder() =>
      new Gnotifications_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gnotifications_updatesBuilder
    implements Builder<Gnotifications_updates, Gnotifications_updatesBuilder> {
  _$Gnotifications_updates? _$v;

  Gnotifications_inc_inputBuilder? _G_inc;
  Gnotifications_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gnotifications_inc_inputBuilder();
  set G_inc(Gnotifications_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gnotifications_set_inputBuilder? _G_set;
  Gnotifications_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gnotifications_set_inputBuilder();
  set G_set(Gnotifications_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gnotifications_bool_expBuilder? _where;
  Gnotifications_bool_expBuilder get where =>
      _$this._where ??= new Gnotifications_bool_expBuilder();
  set where(Gnotifications_bool_expBuilder? where) => _$this._where = where;

  Gnotifications_updatesBuilder();

  Gnotifications_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_updates;
  }

  @override
  void update(void Function(Gnotifications_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_updates build() => _build();

  _$Gnotifications_updates _build() {
    _$Gnotifications_updates _$result;
    try {
      _$result = _$v ??
          new _$Gnotifications_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gnotifications_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_var_pop_order_by
    extends Gnotifications_var_pop_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_var_pop_order_by(
          [void Function(Gnotifications_var_pop_order_byBuilder)? updates]) =>
      (new Gnotifications_var_pop_order_byBuilder()..update(updates))._build();

  _$Gnotifications_var_pop_order_by._({this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_var_pop_order_by rebuild(
          void Function(Gnotifications_var_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_var_pop_order_byBuilder toBuilder() =>
      new Gnotifications_var_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_var_pop_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_var_pop_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_var_pop_order_byBuilder
    implements
        Builder<Gnotifications_var_pop_order_by,
            Gnotifications_var_pop_order_byBuilder> {
  _$Gnotifications_var_pop_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_var_pop_order_byBuilder();

  Gnotifications_var_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_var_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_var_pop_order_by;
  }

  @override
  void update(void Function(Gnotifications_var_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_var_pop_order_by build() => _build();

  _$Gnotifications_var_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_var_pop_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_var_samp_order_by
    extends Gnotifications_var_samp_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_var_samp_order_by(
          [void Function(Gnotifications_var_samp_order_byBuilder)? updates]) =>
      (new Gnotifications_var_samp_order_byBuilder()..update(updates))._build();

  _$Gnotifications_var_samp_order_by._(
      {this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_var_samp_order_by rebuild(
          void Function(Gnotifications_var_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_var_samp_order_byBuilder toBuilder() =>
      new Gnotifications_var_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_var_samp_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_var_samp_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_var_samp_order_byBuilder
    implements
        Builder<Gnotifications_var_samp_order_by,
            Gnotifications_var_samp_order_byBuilder> {
  _$Gnotifications_var_samp_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_var_samp_order_byBuilder();

  Gnotifications_var_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_var_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_var_samp_order_by;
  }

  @override
  void update(void Function(Gnotifications_var_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_var_samp_order_by build() => _build();

  _$Gnotifications_var_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_var_samp_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gnotifications_variance_order_by
    extends Gnotifications_variance_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? not_id;
  @override
  final Gorder_by? pay_id;

  factory _$Gnotifications_variance_order_by(
          [void Function(Gnotifications_variance_order_byBuilder)? updates]) =>
      (new Gnotifications_variance_order_byBuilder()..update(updates))._build();

  _$Gnotifications_variance_order_by._(
      {this.cable_id, this.not_id, this.pay_id})
      : super._();

  @override
  Gnotifications_variance_order_by rebuild(
          void Function(Gnotifications_variance_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gnotifications_variance_order_byBuilder toBuilder() =>
      new Gnotifications_variance_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gnotifications_variance_order_by &&
        cable_id == other.cable_id &&
        not_id == other.not_id &&
        pay_id == other.pay_id;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, cable_id.hashCode), not_id.hashCode), pay_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gnotifications_variance_order_by')
          ..add('cable_id', cable_id)
          ..add('not_id', not_id)
          ..add('pay_id', pay_id))
        .toString();
  }
}

class Gnotifications_variance_order_byBuilder
    implements
        Builder<Gnotifications_variance_order_by,
            Gnotifications_variance_order_byBuilder> {
  _$Gnotifications_variance_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _not_id;
  Gorder_by? get not_id => _$this._not_id;
  set not_id(Gorder_by? not_id) => _$this._not_id = not_id;

  Gorder_by? _pay_id;
  Gorder_by? get pay_id => _$this._pay_id;
  set pay_id(Gorder_by? pay_id) => _$this._pay_id = pay_id;

  Gnotifications_variance_order_byBuilder();

  Gnotifications_variance_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _not_id = $v.not_id;
      _pay_id = $v.pay_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gnotifications_variance_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gnotifications_variance_order_by;
  }

  @override
  void update(void Function(Gnotifications_variance_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gnotifications_variance_order_by build() => _build();

  _$Gnotifications_variance_order_by _build() {
    final _$result = _$v ??
        new _$Gnotifications_variance_order_by._(
            cable_id: cable_id, not_id: not_id, pay_id: pay_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_aggregate_bool_exp extends Gorder_aggregate_bool_exp {
  @override
  final Gorder_aggregate_bool_exp_count? count;

  factory _$Gorder_aggregate_bool_exp(
          [void Function(Gorder_aggregate_bool_expBuilder)? updates]) =>
      (new Gorder_aggregate_bool_expBuilder()..update(updates))._build();

  _$Gorder_aggregate_bool_exp._({this.count}) : super._();

  @override
  Gorder_aggregate_bool_exp rebuild(
          void Function(Gorder_aggregate_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_aggregate_bool_expBuilder toBuilder() =>
      new Gorder_aggregate_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_aggregate_bool_exp && count == other.count;
  }

  @override
  int get hashCode {
    return $jf($jc(0, count.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_aggregate_bool_exp')
          ..add('count', count))
        .toString();
  }
}

class Gorder_aggregate_bool_expBuilder
    implements
        Builder<Gorder_aggregate_bool_exp, Gorder_aggregate_bool_expBuilder> {
  _$Gorder_aggregate_bool_exp? _$v;

  Gorder_aggregate_bool_exp_countBuilder? _count;
  Gorder_aggregate_bool_exp_countBuilder get count =>
      _$this._count ??= new Gorder_aggregate_bool_exp_countBuilder();
  set count(Gorder_aggregate_bool_exp_countBuilder? count) =>
      _$this._count = count;

  Gorder_aggregate_bool_expBuilder();

  Gorder_aggregate_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _count = $v.count?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_aggregate_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_aggregate_bool_exp;
  }

  @override
  void update(void Function(Gorder_aggregate_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_aggregate_bool_exp build() => _build();

  _$Gorder_aggregate_bool_exp _build() {
    _$Gorder_aggregate_bool_exp _$result;
    try {
      _$result =
          _$v ?? new _$Gorder_aggregate_bool_exp._(count: _count?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'count';
        _count?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_aggregate_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_aggregate_bool_exp_count
    extends Gorder_aggregate_bool_exp_count {
  @override
  final BuiltList<Gorder_select_column>? arguments;
  @override
  final bool? distinct;
  @override
  final Gorder_bool_exp? filter;
  @override
  final GInt_comparison_exp predicate;

  factory _$Gorder_aggregate_bool_exp_count(
          [void Function(Gorder_aggregate_bool_exp_countBuilder)? updates]) =>
      (new Gorder_aggregate_bool_exp_countBuilder()..update(updates))._build();

  _$Gorder_aggregate_bool_exp_count._(
      {this.arguments, this.distinct, this.filter, required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gorder_aggregate_bool_exp_count', 'predicate');
  }

  @override
  Gorder_aggregate_bool_exp_count rebuild(
          void Function(Gorder_aggregate_bool_exp_countBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_aggregate_bool_exp_countBuilder toBuilder() =>
      new Gorder_aggregate_bool_exp_countBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_aggregate_bool_exp_count &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_aggregate_bool_exp_count')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gorder_aggregate_bool_exp_countBuilder
    implements
        Builder<Gorder_aggregate_bool_exp_count,
            Gorder_aggregate_bool_exp_countBuilder> {
  _$Gorder_aggregate_bool_exp_count? _$v;

  ListBuilder<Gorder_select_column>? _arguments;
  ListBuilder<Gorder_select_column> get arguments =>
      _$this._arguments ??= new ListBuilder<Gorder_select_column>();
  set arguments(ListBuilder<Gorder_select_column>? arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gorder_bool_expBuilder? _filter;
  Gorder_bool_expBuilder get filter =>
      _$this._filter ??= new Gorder_bool_expBuilder();
  set filter(Gorder_bool_expBuilder? filter) => _$this._filter = filter;

  GInt_comparison_expBuilder? _predicate;
  GInt_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GInt_comparison_expBuilder();
  set predicate(GInt_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gorder_aggregate_bool_exp_countBuilder();

  Gorder_aggregate_bool_exp_countBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments?.toBuilder();
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_aggregate_bool_exp_count other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_aggregate_bool_exp_count;
  }

  @override
  void update(void Function(Gorder_aggregate_bool_exp_countBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_aggregate_bool_exp_count build() => _build();

  _$Gorder_aggregate_bool_exp_count _build() {
    _$Gorder_aggregate_bool_exp_count _$result;
    try {
      _$result = _$v ??
          new _$Gorder_aggregate_bool_exp_count._(
              arguments: _arguments?.build(),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'arguments';
        _arguments?.build();

        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_aggregate_bool_exp_count', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_aggregate_order_by extends Gorder_aggregate_order_by {
  @override
  final Gorder_avg_order_by? avg;
  @override
  final Gorder_by? count;
  @override
  final Gorder_max_order_by? max;
  @override
  final Gorder_min_order_by? min;
  @override
  final Gorder_stddev_order_by? stddev;
  @override
  final Gorder_stddev_pop_order_by? stddev_pop;
  @override
  final Gorder_stddev_samp_order_by? stddev_samp;
  @override
  final Gorder_sum_order_by? sum;
  @override
  final Gorder_var_pop_order_by? var_pop;
  @override
  final Gorder_var_samp_order_by? var_samp;
  @override
  final Gorder_variance_order_by? variance;

  factory _$Gorder_aggregate_order_by(
          [void Function(Gorder_aggregate_order_byBuilder)? updates]) =>
      (new Gorder_aggregate_order_byBuilder()..update(updates))._build();

  _$Gorder_aggregate_order_by._(
      {this.avg,
      this.count,
      this.max,
      this.min,
      this.stddev,
      this.stddev_pop,
      this.stddev_samp,
      this.sum,
      this.var_pop,
      this.var_samp,
      this.variance})
      : super._();

  @override
  Gorder_aggregate_order_by rebuild(
          void Function(Gorder_aggregate_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_aggregate_order_byBuilder toBuilder() =>
      new Gorder_aggregate_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_aggregate_order_by &&
        avg == other.avg &&
        count == other.count &&
        max == other.max &&
        min == other.min &&
        stddev == other.stddev &&
        stddev_pop == other.stddev_pop &&
        stddev_samp == other.stddev_samp &&
        sum == other.sum &&
        var_pop == other.var_pop &&
        var_samp == other.var_samp &&
        variance == other.variance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, avg.hashCode),
                                            count.hashCode),
                                        max.hashCode),
                                    min.hashCode),
                                stddev.hashCode),
                            stddev_pop.hashCode),
                        stddev_samp.hashCode),
                    sum.hashCode),
                var_pop.hashCode),
            var_samp.hashCode),
        variance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_aggregate_order_by')
          ..add('avg', avg)
          ..add('count', count)
          ..add('max', max)
          ..add('min', min)
          ..add('stddev', stddev)
          ..add('stddev_pop', stddev_pop)
          ..add('stddev_samp', stddev_samp)
          ..add('sum', sum)
          ..add('var_pop', var_pop)
          ..add('var_samp', var_samp)
          ..add('variance', variance))
        .toString();
  }
}

class Gorder_aggregate_order_byBuilder
    implements
        Builder<Gorder_aggregate_order_by, Gorder_aggregate_order_byBuilder> {
  _$Gorder_aggregate_order_by? _$v;

  Gorder_avg_order_byBuilder? _avg;
  Gorder_avg_order_byBuilder get avg =>
      _$this._avg ??= new Gorder_avg_order_byBuilder();
  set avg(Gorder_avg_order_byBuilder? avg) => _$this._avg = avg;

  Gorder_by? _count;
  Gorder_by? get count => _$this._count;
  set count(Gorder_by? count) => _$this._count = count;

  Gorder_max_order_byBuilder? _max;
  Gorder_max_order_byBuilder get max =>
      _$this._max ??= new Gorder_max_order_byBuilder();
  set max(Gorder_max_order_byBuilder? max) => _$this._max = max;

  Gorder_min_order_byBuilder? _min;
  Gorder_min_order_byBuilder get min =>
      _$this._min ??= new Gorder_min_order_byBuilder();
  set min(Gorder_min_order_byBuilder? min) => _$this._min = min;

  Gorder_stddev_order_byBuilder? _stddev;
  Gorder_stddev_order_byBuilder get stddev =>
      _$this._stddev ??= new Gorder_stddev_order_byBuilder();
  set stddev(Gorder_stddev_order_byBuilder? stddev) => _$this._stddev = stddev;

  Gorder_stddev_pop_order_byBuilder? _stddev_pop;
  Gorder_stddev_pop_order_byBuilder get stddev_pop =>
      _$this._stddev_pop ??= new Gorder_stddev_pop_order_byBuilder();
  set stddev_pop(Gorder_stddev_pop_order_byBuilder? stddev_pop) =>
      _$this._stddev_pop = stddev_pop;

  Gorder_stddev_samp_order_byBuilder? _stddev_samp;
  Gorder_stddev_samp_order_byBuilder get stddev_samp =>
      _$this._stddev_samp ??= new Gorder_stddev_samp_order_byBuilder();
  set stddev_samp(Gorder_stddev_samp_order_byBuilder? stddev_samp) =>
      _$this._stddev_samp = stddev_samp;

  Gorder_sum_order_byBuilder? _sum;
  Gorder_sum_order_byBuilder get sum =>
      _$this._sum ??= new Gorder_sum_order_byBuilder();
  set sum(Gorder_sum_order_byBuilder? sum) => _$this._sum = sum;

  Gorder_var_pop_order_byBuilder? _var_pop;
  Gorder_var_pop_order_byBuilder get var_pop =>
      _$this._var_pop ??= new Gorder_var_pop_order_byBuilder();
  set var_pop(Gorder_var_pop_order_byBuilder? var_pop) =>
      _$this._var_pop = var_pop;

  Gorder_var_samp_order_byBuilder? _var_samp;
  Gorder_var_samp_order_byBuilder get var_samp =>
      _$this._var_samp ??= new Gorder_var_samp_order_byBuilder();
  set var_samp(Gorder_var_samp_order_byBuilder? var_samp) =>
      _$this._var_samp = var_samp;

  Gorder_variance_order_byBuilder? _variance;
  Gorder_variance_order_byBuilder get variance =>
      _$this._variance ??= new Gorder_variance_order_byBuilder();
  set variance(Gorder_variance_order_byBuilder? variance) =>
      _$this._variance = variance;

  Gorder_aggregate_order_byBuilder();

  Gorder_aggregate_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _avg = $v.avg?.toBuilder();
      _count = $v.count;
      _max = $v.max?.toBuilder();
      _min = $v.min?.toBuilder();
      _stddev = $v.stddev?.toBuilder();
      _stddev_pop = $v.stddev_pop?.toBuilder();
      _stddev_samp = $v.stddev_samp?.toBuilder();
      _sum = $v.sum?.toBuilder();
      _var_pop = $v.var_pop?.toBuilder();
      _var_samp = $v.var_samp?.toBuilder();
      _variance = $v.variance?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_aggregate_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_aggregate_order_by;
  }

  @override
  void update(void Function(Gorder_aggregate_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_aggregate_order_by build() => _build();

  _$Gorder_aggregate_order_by _build() {
    _$Gorder_aggregate_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gorder_aggregate_order_by._(
              avg: _avg?.build(),
              count: count,
              max: _max?.build(),
              min: _min?.build(),
              stddev: _stddev?.build(),
              stddev_pop: _stddev_pop?.build(),
              stddev_samp: _stddev_samp?.build(),
              sum: _sum?.build(),
              var_pop: _var_pop?.build(),
              var_samp: _var_samp?.build(),
              variance: _variance?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'avg';
        _avg?.build();

        _$failedField = 'max';
        _max?.build();
        _$failedField = 'min';
        _min?.build();
        _$failedField = 'stddev';
        _stddev?.build();
        _$failedField = 'stddev_pop';
        _stddev_pop?.build();
        _$failedField = 'stddev_samp';
        _stddev_samp?.build();
        _$failedField = 'sum';
        _sum?.build();
        _$failedField = 'var_pop';
        _var_pop?.build();
        _$failedField = 'var_samp';
        _var_samp?.build();
        _$failedField = 'variance';
        _variance?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_aggregate_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_arr_rel_insert_input extends Gorder_arr_rel_insert_input {
  @override
  final BuiltList<Gorder_insert_input> data;
  @override
  final Gorder_on_conflict? on_conflict;

  factory _$Gorder_arr_rel_insert_input(
          [void Function(Gorder_arr_rel_insert_inputBuilder)? updates]) =>
      (new Gorder_arr_rel_insert_inputBuilder()..update(updates))._build();

  _$Gorder_arr_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gorder_arr_rel_insert_input', 'data');
  }

  @override
  Gorder_arr_rel_insert_input rebuild(
          void Function(Gorder_arr_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_arr_rel_insert_inputBuilder toBuilder() =>
      new Gorder_arr_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_arr_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_arr_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gorder_arr_rel_insert_inputBuilder
    implements
        Builder<Gorder_arr_rel_insert_input,
            Gorder_arr_rel_insert_inputBuilder> {
  _$Gorder_arr_rel_insert_input? _$v;

  ListBuilder<Gorder_insert_input>? _data;
  ListBuilder<Gorder_insert_input> get data =>
      _$this._data ??= new ListBuilder<Gorder_insert_input>();
  set data(ListBuilder<Gorder_insert_input>? data) => _$this._data = data;

  Gorder_on_conflictBuilder? _on_conflict;
  Gorder_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gorder_on_conflictBuilder();
  set on_conflict(Gorder_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gorder_arr_rel_insert_inputBuilder();

  Gorder_arr_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_arr_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_arr_rel_insert_input;
  }

  @override
  void update(void Function(Gorder_arr_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_arr_rel_insert_input build() => _build();

  _$Gorder_arr_rel_insert_input _build() {
    _$Gorder_arr_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gorder_arr_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_arr_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_avg_order_by extends Gorder_avg_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_avg_order_by(
          [void Function(Gorder_avg_order_byBuilder)? updates]) =>
      (new Gorder_avg_order_byBuilder()..update(updates))._build();

  _$Gorder_avg_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_avg_order_by rebuild(
          void Function(Gorder_avg_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_avg_order_byBuilder toBuilder() =>
      new Gorder_avg_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_avg_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_avg_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_avg_order_byBuilder
    implements Builder<Gorder_avg_order_by, Gorder_avg_order_byBuilder> {
  _$Gorder_avg_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_avg_order_byBuilder();

  Gorder_avg_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_avg_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_avg_order_by;
  }

  @override
  void update(void Function(Gorder_avg_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_avg_order_by build() => _build();

  _$Gorder_avg_order_by _build() {
    final _$result =
        _$v ?? new _$Gorder_avg_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_bool_exp extends Gorder_bool_exp {
  @override
  final BuiltList<Gorder_bool_exp>? G_and;
  @override
  final Gorder_bool_exp? G_not;
  @override
  final BuiltList<Gorder_bool_exp>? G_or;
  @override
  final Gcustomer_bool_exp? customer;
  @override
  final GInt_comparison_exp? customer_id;
  @override
  final GString_comparison_exp? discount_price;
  @override
  final GInt_comparison_exp? id;
  @override
  final GString_comparison_exp? order_date;
  @override
  final GString_comparison_exp? product;
  @override
  final GString_comparison_exp? purchase_price;
  @override
  final GString_comparison_exp? transaction_id;

  factory _$Gorder_bool_exp([void Function(Gorder_bool_expBuilder)? updates]) =>
      (new Gorder_bool_expBuilder()..update(updates))._build();

  _$Gorder_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.customer,
      this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_bool_exp rebuild(void Function(Gorder_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_bool_expBuilder toBuilder() =>
      new Gorder_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        customer == other.customer &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, G_and.hashCode),
                                            G_not.hashCode),
                                        G_or.hashCode),
                                    customer.hashCode),
                                customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('customer', customer)
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_bool_expBuilder
    implements Builder<Gorder_bool_exp, Gorder_bool_expBuilder> {
  _$Gorder_bool_exp? _$v;

  ListBuilder<Gorder_bool_exp>? _G_and;
  ListBuilder<Gorder_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gorder_bool_exp>();
  set G_and(ListBuilder<Gorder_bool_exp>? G_and) => _$this._G_and = G_and;

  Gorder_bool_expBuilder? _G_not;
  Gorder_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gorder_bool_expBuilder();
  set G_not(Gorder_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gorder_bool_exp>? _G_or;
  ListBuilder<Gorder_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gorder_bool_exp>();
  set G_or(ListBuilder<Gorder_bool_exp>? G_or) => _$this._G_or = G_or;

  Gcustomer_bool_expBuilder? _customer;
  Gcustomer_bool_expBuilder get customer =>
      _$this._customer ??= new Gcustomer_bool_expBuilder();
  set customer(Gcustomer_bool_expBuilder? customer) =>
      _$this._customer = customer;

  GInt_comparison_expBuilder? _customer_id;
  GInt_comparison_expBuilder get customer_id =>
      _$this._customer_id ??= new GInt_comparison_expBuilder();
  set customer_id(GInt_comparison_expBuilder? customer_id) =>
      _$this._customer_id = customer_id;

  GString_comparison_expBuilder? _discount_price;
  GString_comparison_expBuilder get discount_price =>
      _$this._discount_price ??= new GString_comparison_expBuilder();
  set discount_price(GString_comparison_expBuilder? discount_price) =>
      _$this._discount_price = discount_price;

  GInt_comparison_expBuilder? _id;
  GInt_comparison_expBuilder get id =>
      _$this._id ??= new GInt_comparison_expBuilder();
  set id(GInt_comparison_expBuilder? id) => _$this._id = id;

  GString_comparison_expBuilder? _order_date;
  GString_comparison_expBuilder get order_date =>
      _$this._order_date ??= new GString_comparison_expBuilder();
  set order_date(GString_comparison_expBuilder? order_date) =>
      _$this._order_date = order_date;

  GString_comparison_expBuilder? _product;
  GString_comparison_expBuilder get product =>
      _$this._product ??= new GString_comparison_expBuilder();
  set product(GString_comparison_expBuilder? product) =>
      _$this._product = product;

  GString_comparison_expBuilder? _purchase_price;
  GString_comparison_expBuilder get purchase_price =>
      _$this._purchase_price ??= new GString_comparison_expBuilder();
  set purchase_price(GString_comparison_expBuilder? purchase_price) =>
      _$this._purchase_price = purchase_price;

  GString_comparison_expBuilder? _transaction_id;
  GString_comparison_expBuilder get transaction_id =>
      _$this._transaction_id ??= new GString_comparison_expBuilder();
  set transaction_id(GString_comparison_expBuilder? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_bool_expBuilder();

  Gorder_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _customer = $v.customer?.toBuilder();
      _customer_id = $v.customer_id?.toBuilder();
      _discount_price = $v.discount_price?.toBuilder();
      _id = $v.id?.toBuilder();
      _order_date = $v.order_date?.toBuilder();
      _product = $v.product?.toBuilder();
      _purchase_price = $v.purchase_price?.toBuilder();
      _transaction_id = $v.transaction_id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_bool_exp;
  }

  @override
  void update(void Function(Gorder_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_bool_exp build() => _build();

  _$Gorder_bool_exp _build() {
    _$Gorder_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gorder_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              customer: _customer?.build(),
              customer_id: _customer_id?.build(),
              discount_price: _discount_price?.build(),
              id: _id?.build(),
              order_date: _order_date?.build(),
              product: _product?.build(),
              purchase_price: _purchase_price?.build(),
              transaction_id: _transaction_id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'customer';
        _customer?.build();
        _$failedField = 'customer_id';
        _customer_id?.build();
        _$failedField = 'discount_price';
        _discount_price?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'order_date';
        _order_date?.build();
        _$failedField = 'product';
        _product?.build();
        _$failedField = 'purchase_price';
        _purchase_price?.build();
        _$failedField = 'transaction_id';
        _transaction_id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_inc_input extends Gorder_inc_input {
  @override
  final int? customer_id;
  @override
  final int? id;

  factory _$Gorder_inc_input(
          [void Function(Gorder_inc_inputBuilder)? updates]) =>
      (new Gorder_inc_inputBuilder()..update(updates))._build();

  _$Gorder_inc_input._({this.customer_id, this.id}) : super._();

  @override
  Gorder_inc_input rebuild(void Function(Gorder_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_inc_inputBuilder toBuilder() =>
      new Gorder_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_inc_input &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_inc_input')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_inc_inputBuilder
    implements Builder<Gorder_inc_input, Gorder_inc_inputBuilder> {
  _$Gorder_inc_input? _$v;

  int? _customer_id;
  int? get customer_id => _$this._customer_id;
  set customer_id(int? customer_id) => _$this._customer_id = customer_id;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gorder_inc_inputBuilder();

  Gorder_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_inc_input;
  }

  @override
  void update(void Function(Gorder_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_inc_input build() => _build();

  _$Gorder_inc_input _build() {
    final _$result =
        _$v ?? new _$Gorder_inc_input._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_insert_input extends Gorder_insert_input {
  @override
  final Gcustomer_obj_rel_insert_input? customer;
  @override
  final int? customer_id;
  @override
  final String? discount_price;
  @override
  final int? id;
  @override
  final String? order_date;
  @override
  final String? product;
  @override
  final String? purchase_price;
  @override
  final String? transaction_id;

  factory _$Gorder_insert_input(
          [void Function(Gorder_insert_inputBuilder)? updates]) =>
      (new Gorder_insert_inputBuilder()..update(updates))._build();

  _$Gorder_insert_input._(
      {this.customer,
      this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_insert_input rebuild(
          void Function(Gorder_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_insert_inputBuilder toBuilder() =>
      new Gorder_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_insert_input &&
        customer == other.customer &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, customer.hashCode),
                                customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_insert_input')
          ..add('customer', customer)
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_insert_inputBuilder
    implements Builder<Gorder_insert_input, Gorder_insert_inputBuilder> {
  _$Gorder_insert_input? _$v;

  Gcustomer_obj_rel_insert_inputBuilder? _customer;
  Gcustomer_obj_rel_insert_inputBuilder get customer =>
      _$this._customer ??= new Gcustomer_obj_rel_insert_inputBuilder();
  set customer(Gcustomer_obj_rel_insert_inputBuilder? customer) =>
      _$this._customer = customer;

  int? _customer_id;
  int? get customer_id => _$this._customer_id;
  set customer_id(int? customer_id) => _$this._customer_id = customer_id;

  String? _discount_price;
  String? get discount_price => _$this._discount_price;
  set discount_price(String? discount_price) =>
      _$this._discount_price = discount_price;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _order_date;
  String? get order_date => _$this._order_date;
  set order_date(String? order_date) => _$this._order_date = order_date;

  String? _product;
  String? get product => _$this._product;
  set product(String? product) => _$this._product = product;

  String? _purchase_price;
  String? get purchase_price => _$this._purchase_price;
  set purchase_price(String? purchase_price) =>
      _$this._purchase_price = purchase_price;

  String? _transaction_id;
  String? get transaction_id => _$this._transaction_id;
  set transaction_id(String? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_insert_inputBuilder();

  Gorder_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer = $v.customer?.toBuilder();
      _customer_id = $v.customer_id;
      _discount_price = $v.discount_price;
      _id = $v.id;
      _order_date = $v.order_date;
      _product = $v.product;
      _purchase_price = $v.purchase_price;
      _transaction_id = $v.transaction_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_insert_input;
  }

  @override
  void update(void Function(Gorder_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_insert_input build() => _build();

  _$Gorder_insert_input _build() {
    _$Gorder_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gorder_insert_input._(
              customer: _customer?.build(),
              customer_id: customer_id,
              discount_price: discount_price,
              id: id,
              order_date: order_date,
              product: product,
              purchase_price: purchase_price,
              transaction_id: transaction_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'customer';
        _customer?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_max_order_by extends Gorder_max_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? discount_price;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? order_date;
  @override
  final Gorder_by? product;
  @override
  final Gorder_by? purchase_price;
  @override
  final Gorder_by? transaction_id;

  factory _$Gorder_max_order_by(
          [void Function(Gorder_max_order_byBuilder)? updates]) =>
      (new Gorder_max_order_byBuilder()..update(updates))._build();

  _$Gorder_max_order_by._(
      {this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_max_order_by rebuild(
          void Function(Gorder_max_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_max_order_byBuilder toBuilder() =>
      new Gorder_max_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_max_order_by &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_max_order_by')
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_max_order_byBuilder
    implements Builder<Gorder_max_order_by, Gorder_max_order_byBuilder> {
  _$Gorder_max_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _discount_price;
  Gorder_by? get discount_price => _$this._discount_price;
  set discount_price(Gorder_by? discount_price) =>
      _$this._discount_price = discount_price;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _order_date;
  Gorder_by? get order_date => _$this._order_date;
  set order_date(Gorder_by? order_date) => _$this._order_date = order_date;

  Gorder_by? _product;
  Gorder_by? get product => _$this._product;
  set product(Gorder_by? product) => _$this._product = product;

  Gorder_by? _purchase_price;
  Gorder_by? get purchase_price => _$this._purchase_price;
  set purchase_price(Gorder_by? purchase_price) =>
      _$this._purchase_price = purchase_price;

  Gorder_by? _transaction_id;
  Gorder_by? get transaction_id => _$this._transaction_id;
  set transaction_id(Gorder_by? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_max_order_byBuilder();

  Gorder_max_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _discount_price = $v.discount_price;
      _id = $v.id;
      _order_date = $v.order_date;
      _product = $v.product;
      _purchase_price = $v.purchase_price;
      _transaction_id = $v.transaction_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_max_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_max_order_by;
  }

  @override
  void update(void Function(Gorder_max_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_max_order_by build() => _build();

  _$Gorder_max_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_max_order_by._(
            customer_id: customer_id,
            discount_price: discount_price,
            id: id,
            order_date: order_date,
            product: product,
            purchase_price: purchase_price,
            transaction_id: transaction_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_min_order_by extends Gorder_min_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? discount_price;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? order_date;
  @override
  final Gorder_by? product;
  @override
  final Gorder_by? purchase_price;
  @override
  final Gorder_by? transaction_id;

  factory _$Gorder_min_order_by(
          [void Function(Gorder_min_order_byBuilder)? updates]) =>
      (new Gorder_min_order_byBuilder()..update(updates))._build();

  _$Gorder_min_order_by._(
      {this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_min_order_by rebuild(
          void Function(Gorder_min_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_min_order_byBuilder toBuilder() =>
      new Gorder_min_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_min_order_by &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_min_order_by')
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_min_order_byBuilder
    implements Builder<Gorder_min_order_by, Gorder_min_order_byBuilder> {
  _$Gorder_min_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _discount_price;
  Gorder_by? get discount_price => _$this._discount_price;
  set discount_price(Gorder_by? discount_price) =>
      _$this._discount_price = discount_price;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _order_date;
  Gorder_by? get order_date => _$this._order_date;
  set order_date(Gorder_by? order_date) => _$this._order_date = order_date;

  Gorder_by? _product;
  Gorder_by? get product => _$this._product;
  set product(Gorder_by? product) => _$this._product = product;

  Gorder_by? _purchase_price;
  Gorder_by? get purchase_price => _$this._purchase_price;
  set purchase_price(Gorder_by? purchase_price) =>
      _$this._purchase_price = purchase_price;

  Gorder_by? _transaction_id;
  Gorder_by? get transaction_id => _$this._transaction_id;
  set transaction_id(Gorder_by? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_min_order_byBuilder();

  Gorder_min_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _discount_price = $v.discount_price;
      _id = $v.id;
      _order_date = $v.order_date;
      _product = $v.product;
      _purchase_price = $v.purchase_price;
      _transaction_id = $v.transaction_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_min_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_min_order_by;
  }

  @override
  void update(void Function(Gorder_min_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_min_order_by build() => _build();

  _$Gorder_min_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_min_order_by._(
            customer_id: customer_id,
            discount_price: discount_price,
            id: id,
            order_date: order_date,
            product: product,
            purchase_price: purchase_price,
            transaction_id: transaction_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_on_conflict extends Gorder_on_conflict {
  @override
  final Gorder_constraint constraint;
  @override
  final BuiltList<Gorder_update_column> update_columns;
  @override
  final Gorder_bool_exp? where;

  factory _$Gorder_on_conflict(
          [void Function(Gorder_on_conflictBuilder)? updates]) =>
      (new Gorder_on_conflictBuilder()..update(updates))._build();

  _$Gorder_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gorder_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gorder_on_conflict', 'update_columns');
  }

  @override
  Gorder_on_conflict rebuild(
          void Function(Gorder_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_on_conflictBuilder toBuilder() =>
      new Gorder_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gorder_on_conflictBuilder
    implements Builder<Gorder_on_conflict, Gorder_on_conflictBuilder> {
  _$Gorder_on_conflict? _$v;

  Gorder_constraint? _constraint;
  Gorder_constraint? get constraint => _$this._constraint;
  set constraint(Gorder_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gorder_update_column>? _update_columns;
  ListBuilder<Gorder_update_column> get update_columns =>
      _$this._update_columns ??= new ListBuilder<Gorder_update_column>();
  set update_columns(ListBuilder<Gorder_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gorder_bool_expBuilder? _where;
  Gorder_bool_expBuilder get where =>
      _$this._where ??= new Gorder_bool_expBuilder();
  set where(Gorder_bool_expBuilder? where) => _$this._where = where;

  Gorder_on_conflictBuilder();

  Gorder_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_on_conflict;
  }

  @override
  void update(void Function(Gorder_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_on_conflict build() => _build();

  _$Gorder_on_conflict _build() {
    _$Gorder_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gorder_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gorder_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_order_by extends Gorder_order_by {
  @override
  final Gcustomer_order_by? customer;
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? discount_price;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? order_date;
  @override
  final Gorder_by? product;
  @override
  final Gorder_by? purchase_price;
  @override
  final Gorder_by? transaction_id;

  factory _$Gorder_order_by([void Function(Gorder_order_byBuilder)? updates]) =>
      (new Gorder_order_byBuilder()..update(updates))._build();

  _$Gorder_order_by._(
      {this.customer,
      this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_order_by rebuild(void Function(Gorder_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_order_byBuilder toBuilder() =>
      new Gorder_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_order_by &&
        customer == other.customer &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc(0, customer.hashCode),
                                customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_order_by')
          ..add('customer', customer)
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_order_byBuilder
    implements Builder<Gorder_order_by, Gorder_order_byBuilder> {
  _$Gorder_order_by? _$v;

  Gcustomer_order_byBuilder? _customer;
  Gcustomer_order_byBuilder get customer =>
      _$this._customer ??= new Gcustomer_order_byBuilder();
  set customer(Gcustomer_order_byBuilder? customer) =>
      _$this._customer = customer;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _discount_price;
  Gorder_by? get discount_price => _$this._discount_price;
  set discount_price(Gorder_by? discount_price) =>
      _$this._discount_price = discount_price;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _order_date;
  Gorder_by? get order_date => _$this._order_date;
  set order_date(Gorder_by? order_date) => _$this._order_date = order_date;

  Gorder_by? _product;
  Gorder_by? get product => _$this._product;
  set product(Gorder_by? product) => _$this._product = product;

  Gorder_by? _purchase_price;
  Gorder_by? get purchase_price => _$this._purchase_price;
  set purchase_price(Gorder_by? purchase_price) =>
      _$this._purchase_price = purchase_price;

  Gorder_by? _transaction_id;
  Gorder_by? get transaction_id => _$this._transaction_id;
  set transaction_id(Gorder_by? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_order_byBuilder();

  Gorder_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer = $v.customer?.toBuilder();
      _customer_id = $v.customer_id;
      _discount_price = $v.discount_price;
      _id = $v.id;
      _order_date = $v.order_date;
      _product = $v.product;
      _purchase_price = $v.purchase_price;
      _transaction_id = $v.transaction_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_order_by;
  }

  @override
  void update(void Function(Gorder_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_order_by build() => _build();

  _$Gorder_order_by _build() {
    _$Gorder_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gorder_order_by._(
              customer: _customer?.build(),
              customer_id: customer_id,
              discount_price: discount_price,
              id: id,
              order_date: order_date,
              product: product,
              purchase_price: purchase_price,
              transaction_id: transaction_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'customer';
        _customer?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_pk_columns_input extends Gorder_pk_columns_input {
  @override
  final int id;

  factory _$Gorder_pk_columns_input(
          [void Function(Gorder_pk_columns_inputBuilder)? updates]) =>
      (new Gorder_pk_columns_inputBuilder()..update(updates))._build();

  _$Gorder_pk_columns_input._({required this.id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(id, r'Gorder_pk_columns_input', 'id');
  }

  @override
  Gorder_pk_columns_input rebuild(
          void Function(Gorder_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_pk_columns_inputBuilder toBuilder() =>
      new Gorder_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_pk_columns_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_pk_columns_input')
          ..add('id', id))
        .toString();
  }
}

class Gorder_pk_columns_inputBuilder
    implements
        Builder<Gorder_pk_columns_input, Gorder_pk_columns_inputBuilder> {
  _$Gorder_pk_columns_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gorder_pk_columns_inputBuilder();

  Gorder_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_pk_columns_input;
  }

  @override
  void update(void Function(Gorder_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_pk_columns_input build() => _build();

  _$Gorder_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gorder_pk_columns_input._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'Gorder_pk_columns_input', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_set_input extends Gorder_set_input {
  @override
  final int? customer_id;
  @override
  final String? discount_price;
  @override
  final int? id;
  @override
  final String? order_date;
  @override
  final String? product;
  @override
  final String? purchase_price;
  @override
  final String? transaction_id;

  factory _$Gorder_set_input(
          [void Function(Gorder_set_inputBuilder)? updates]) =>
      (new Gorder_set_inputBuilder()..update(updates))._build();

  _$Gorder_set_input._(
      {this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_set_input rebuild(void Function(Gorder_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_set_inputBuilder toBuilder() =>
      new Gorder_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_set_input &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_set_input')
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_set_inputBuilder
    implements Builder<Gorder_set_input, Gorder_set_inputBuilder> {
  _$Gorder_set_input? _$v;

  int? _customer_id;
  int? get customer_id => _$this._customer_id;
  set customer_id(int? customer_id) => _$this._customer_id = customer_id;

  String? _discount_price;
  String? get discount_price => _$this._discount_price;
  set discount_price(String? discount_price) =>
      _$this._discount_price = discount_price;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _order_date;
  String? get order_date => _$this._order_date;
  set order_date(String? order_date) => _$this._order_date = order_date;

  String? _product;
  String? get product => _$this._product;
  set product(String? product) => _$this._product = product;

  String? _purchase_price;
  String? get purchase_price => _$this._purchase_price;
  set purchase_price(String? purchase_price) =>
      _$this._purchase_price = purchase_price;

  String? _transaction_id;
  String? get transaction_id => _$this._transaction_id;
  set transaction_id(String? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_set_inputBuilder();

  Gorder_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _discount_price = $v.discount_price;
      _id = $v.id;
      _order_date = $v.order_date;
      _product = $v.product;
      _purchase_price = $v.purchase_price;
      _transaction_id = $v.transaction_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_set_input;
  }

  @override
  void update(void Function(Gorder_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_set_input build() => _build();

  _$Gorder_set_input _build() {
    final _$result = _$v ??
        new _$Gorder_set_input._(
            customer_id: customer_id,
            discount_price: discount_price,
            id: id,
            order_date: order_date,
            product: product,
            purchase_price: purchase_price,
            transaction_id: transaction_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_stddev_order_by extends Gorder_stddev_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_stddev_order_by(
          [void Function(Gorder_stddev_order_byBuilder)? updates]) =>
      (new Gorder_stddev_order_byBuilder()..update(updates))._build();

  _$Gorder_stddev_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_stddev_order_by rebuild(
          void Function(Gorder_stddev_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_stddev_order_byBuilder toBuilder() =>
      new Gorder_stddev_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_stddev_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_stddev_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_stddev_order_byBuilder
    implements Builder<Gorder_stddev_order_by, Gorder_stddev_order_byBuilder> {
  _$Gorder_stddev_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_stddev_order_byBuilder();

  Gorder_stddev_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_stddev_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_stddev_order_by;
  }

  @override
  void update(void Function(Gorder_stddev_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_stddev_order_by build() => _build();

  _$Gorder_stddev_order_by _build() {
    final _$result =
        _$v ?? new _$Gorder_stddev_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_stddev_pop_order_by extends Gorder_stddev_pop_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_stddev_pop_order_by(
          [void Function(Gorder_stddev_pop_order_byBuilder)? updates]) =>
      (new Gorder_stddev_pop_order_byBuilder()..update(updates))._build();

  _$Gorder_stddev_pop_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_stddev_pop_order_by rebuild(
          void Function(Gorder_stddev_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_stddev_pop_order_byBuilder toBuilder() =>
      new Gorder_stddev_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_stddev_pop_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_stddev_pop_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_stddev_pop_order_byBuilder
    implements
        Builder<Gorder_stddev_pop_order_by, Gorder_stddev_pop_order_byBuilder> {
  _$Gorder_stddev_pop_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_stddev_pop_order_byBuilder();

  Gorder_stddev_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_stddev_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_stddev_pop_order_by;
  }

  @override
  void update(void Function(Gorder_stddev_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_stddev_pop_order_by build() => _build();

  _$Gorder_stddev_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_stddev_pop_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_stddev_samp_order_by extends Gorder_stddev_samp_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_stddev_samp_order_by(
          [void Function(Gorder_stddev_samp_order_byBuilder)? updates]) =>
      (new Gorder_stddev_samp_order_byBuilder()..update(updates))._build();

  _$Gorder_stddev_samp_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_stddev_samp_order_by rebuild(
          void Function(Gorder_stddev_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_stddev_samp_order_byBuilder toBuilder() =>
      new Gorder_stddev_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_stddev_samp_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_stddev_samp_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_stddev_samp_order_byBuilder
    implements
        Builder<Gorder_stddev_samp_order_by,
            Gorder_stddev_samp_order_byBuilder> {
  _$Gorder_stddev_samp_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_stddev_samp_order_byBuilder();

  Gorder_stddev_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_stddev_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_stddev_samp_order_by;
  }

  @override
  void update(void Function(Gorder_stddev_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_stddev_samp_order_by build() => _build();

  _$Gorder_stddev_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_stddev_samp_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_stream_cursor_input extends Gorder_stream_cursor_input {
  @override
  final Gorder_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gorder_stream_cursor_input(
          [void Function(Gorder_stream_cursor_inputBuilder)? updates]) =>
      (new Gorder_stream_cursor_inputBuilder()..update(updates))._build();

  _$Gorder_stream_cursor_input._({required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gorder_stream_cursor_input', 'initial_value');
  }

  @override
  Gorder_stream_cursor_input rebuild(
          void Function(Gorder_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_stream_cursor_inputBuilder toBuilder() =>
      new Gorder_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gorder_stream_cursor_inputBuilder
    implements
        Builder<Gorder_stream_cursor_input, Gorder_stream_cursor_inputBuilder> {
  _$Gorder_stream_cursor_input? _$v;

  Gorder_stream_cursor_value_inputBuilder? _initial_value;
  Gorder_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??= new Gorder_stream_cursor_value_inputBuilder();
  set initial_value(Gorder_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gorder_stream_cursor_inputBuilder();

  Gorder_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_stream_cursor_input;
  }

  @override
  void update(void Function(Gorder_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_stream_cursor_input build() => _build();

  _$Gorder_stream_cursor_input _build() {
    _$Gorder_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gorder_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_stream_cursor_value_input
    extends Gorder_stream_cursor_value_input {
  @override
  final int? customer_id;
  @override
  final String? discount_price;
  @override
  final int? id;
  @override
  final String? order_date;
  @override
  final String? product;
  @override
  final String? purchase_price;
  @override
  final String? transaction_id;

  factory _$Gorder_stream_cursor_value_input(
          [void Function(Gorder_stream_cursor_value_inputBuilder)? updates]) =>
      (new Gorder_stream_cursor_value_inputBuilder()..update(updates))._build();

  _$Gorder_stream_cursor_value_input._(
      {this.customer_id,
      this.discount_price,
      this.id,
      this.order_date,
      this.product,
      this.purchase_price,
      this.transaction_id})
      : super._();

  @override
  Gorder_stream_cursor_value_input rebuild(
          void Function(Gorder_stream_cursor_value_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_stream_cursor_value_inputBuilder toBuilder() =>
      new Gorder_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_stream_cursor_value_input &&
        customer_id == other.customer_id &&
        discount_price == other.discount_price &&
        id == other.id &&
        order_date == other.order_date &&
        product == other.product &&
        purchase_price == other.purchase_price &&
        transaction_id == other.transaction_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc(0, customer_id.hashCode),
                            discount_price.hashCode),
                        id.hashCode),
                    order_date.hashCode),
                product.hashCode),
            purchase_price.hashCode),
        transaction_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_stream_cursor_value_input')
          ..add('customer_id', customer_id)
          ..add('discount_price', discount_price)
          ..add('id', id)
          ..add('order_date', order_date)
          ..add('product', product)
          ..add('purchase_price', purchase_price)
          ..add('transaction_id', transaction_id))
        .toString();
  }
}

class Gorder_stream_cursor_value_inputBuilder
    implements
        Builder<Gorder_stream_cursor_value_input,
            Gorder_stream_cursor_value_inputBuilder> {
  _$Gorder_stream_cursor_value_input? _$v;

  int? _customer_id;
  int? get customer_id => _$this._customer_id;
  set customer_id(int? customer_id) => _$this._customer_id = customer_id;

  String? _discount_price;
  String? get discount_price => _$this._discount_price;
  set discount_price(String? discount_price) =>
      _$this._discount_price = discount_price;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  String? _order_date;
  String? get order_date => _$this._order_date;
  set order_date(String? order_date) => _$this._order_date = order_date;

  String? _product;
  String? get product => _$this._product;
  set product(String? product) => _$this._product = product;

  String? _purchase_price;
  String? get purchase_price => _$this._purchase_price;
  set purchase_price(String? purchase_price) =>
      _$this._purchase_price = purchase_price;

  String? _transaction_id;
  String? get transaction_id => _$this._transaction_id;
  set transaction_id(String? transaction_id) =>
      _$this._transaction_id = transaction_id;

  Gorder_stream_cursor_value_inputBuilder();

  Gorder_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _discount_price = $v.discount_price;
      _id = $v.id;
      _order_date = $v.order_date;
      _product = $v.product;
      _purchase_price = $v.purchase_price;
      _transaction_id = $v.transaction_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_stream_cursor_value_input;
  }

  @override
  void update(void Function(Gorder_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_stream_cursor_value_input build() => _build();

  _$Gorder_stream_cursor_value_input _build() {
    final _$result = _$v ??
        new _$Gorder_stream_cursor_value_input._(
            customer_id: customer_id,
            discount_price: discount_price,
            id: id,
            order_date: order_date,
            product: product,
            purchase_price: purchase_price,
            transaction_id: transaction_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_sum_order_by extends Gorder_sum_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_sum_order_by(
          [void Function(Gorder_sum_order_byBuilder)? updates]) =>
      (new Gorder_sum_order_byBuilder()..update(updates))._build();

  _$Gorder_sum_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_sum_order_by rebuild(
          void Function(Gorder_sum_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_sum_order_byBuilder toBuilder() =>
      new Gorder_sum_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_sum_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_sum_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_sum_order_byBuilder
    implements Builder<Gorder_sum_order_by, Gorder_sum_order_byBuilder> {
  _$Gorder_sum_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_sum_order_byBuilder();

  Gorder_sum_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_sum_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_sum_order_by;
  }

  @override
  void update(void Function(Gorder_sum_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_sum_order_by build() => _build();

  _$Gorder_sum_order_by _build() {
    final _$result =
        _$v ?? new _$Gorder_sum_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_updates extends Gorder_updates {
  @override
  final Gorder_inc_input? G_inc;
  @override
  final Gorder_set_input? G_set;
  @override
  final Gorder_bool_exp where;

  factory _$Gorder_updates([void Function(Gorder_updatesBuilder)? updates]) =>
      (new Gorder_updatesBuilder()..update(updates))._build();

  _$Gorder_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(where, r'Gorder_updates', 'where');
  }

  @override
  Gorder_updates rebuild(void Function(Gorder_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_updatesBuilder toBuilder() =>
      new Gorder_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gorder_updatesBuilder
    implements Builder<Gorder_updates, Gorder_updatesBuilder> {
  _$Gorder_updates? _$v;

  Gorder_inc_inputBuilder? _G_inc;
  Gorder_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gorder_inc_inputBuilder();
  set G_inc(Gorder_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gorder_set_inputBuilder? _G_set;
  Gorder_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gorder_set_inputBuilder();
  set G_set(Gorder_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gorder_bool_expBuilder? _where;
  Gorder_bool_expBuilder get where =>
      _$this._where ??= new Gorder_bool_expBuilder();
  set where(Gorder_bool_expBuilder? where) => _$this._where = where;

  Gorder_updatesBuilder();

  Gorder_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_updates;
  }

  @override
  void update(void Function(Gorder_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_updates build() => _build();

  _$Gorder_updates _build() {
    _$Gorder_updates _$result;
    try {
      _$result = _$v ??
          new _$Gorder_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gorder_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_var_pop_order_by extends Gorder_var_pop_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_var_pop_order_by(
          [void Function(Gorder_var_pop_order_byBuilder)? updates]) =>
      (new Gorder_var_pop_order_byBuilder()..update(updates))._build();

  _$Gorder_var_pop_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_var_pop_order_by rebuild(
          void Function(Gorder_var_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_var_pop_order_byBuilder toBuilder() =>
      new Gorder_var_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_var_pop_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_var_pop_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_var_pop_order_byBuilder
    implements
        Builder<Gorder_var_pop_order_by, Gorder_var_pop_order_byBuilder> {
  _$Gorder_var_pop_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_var_pop_order_byBuilder();

  Gorder_var_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_var_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_var_pop_order_by;
  }

  @override
  void update(void Function(Gorder_var_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_var_pop_order_by build() => _build();

  _$Gorder_var_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_var_pop_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_var_samp_order_by extends Gorder_var_samp_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_var_samp_order_by(
          [void Function(Gorder_var_samp_order_byBuilder)? updates]) =>
      (new Gorder_var_samp_order_byBuilder()..update(updates))._build();

  _$Gorder_var_samp_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_var_samp_order_by rebuild(
          void Function(Gorder_var_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_var_samp_order_byBuilder toBuilder() =>
      new Gorder_var_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_var_samp_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_var_samp_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_var_samp_order_byBuilder
    implements
        Builder<Gorder_var_samp_order_by, Gorder_var_samp_order_byBuilder> {
  _$Gorder_var_samp_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_var_samp_order_byBuilder();

  Gorder_var_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_var_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_var_samp_order_by;
  }

  @override
  void update(void Function(Gorder_var_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_var_samp_order_by build() => _build();

  _$Gorder_var_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_var_samp_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gorder_variance_order_by extends Gorder_variance_order_by {
  @override
  final Gorder_by? customer_id;
  @override
  final Gorder_by? id;

  factory _$Gorder_variance_order_by(
          [void Function(Gorder_variance_order_byBuilder)? updates]) =>
      (new Gorder_variance_order_byBuilder()..update(updates))._build();

  _$Gorder_variance_order_by._({this.customer_id, this.id}) : super._();

  @override
  Gorder_variance_order_by rebuild(
          void Function(Gorder_variance_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gorder_variance_order_byBuilder toBuilder() =>
      new Gorder_variance_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gorder_variance_order_by &&
        customer_id == other.customer_id &&
        id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, customer_id.hashCode), id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gorder_variance_order_by')
          ..add('customer_id', customer_id)
          ..add('id', id))
        .toString();
  }
}

class Gorder_variance_order_byBuilder
    implements
        Builder<Gorder_variance_order_by, Gorder_variance_order_byBuilder> {
  _$Gorder_variance_order_by? _$v;

  Gorder_by? _customer_id;
  Gorder_by? get customer_id => _$this._customer_id;
  set customer_id(Gorder_by? customer_id) => _$this._customer_id = customer_id;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_variance_order_byBuilder();

  Gorder_variance_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _customer_id = $v.customer_id;
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gorder_variance_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gorder_variance_order_by;
  }

  @override
  void update(void Function(Gorder_variance_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gorder_variance_order_by build() => _build();

  _$Gorder_variance_order_by _build() {
    final _$result = _$v ??
        new _$Gorder_variance_order_by._(customer_id: customer_id, id: id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_aggregate_bool_exp extends Gpayments_aggregate_bool_exp {
  @override
  final Gpayments_aggregate_bool_exp_count? count;

  factory _$Gpayments_aggregate_bool_exp(
          [void Function(Gpayments_aggregate_bool_expBuilder)? updates]) =>
      (new Gpayments_aggregate_bool_expBuilder()..update(updates))._build();

  _$Gpayments_aggregate_bool_exp._({this.count}) : super._();

  @override
  Gpayments_aggregate_bool_exp rebuild(
          void Function(Gpayments_aggregate_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_aggregate_bool_expBuilder toBuilder() =>
      new Gpayments_aggregate_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_aggregate_bool_exp && count == other.count;
  }

  @override
  int get hashCode {
    return $jf($jc(0, count.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_aggregate_bool_exp')
          ..add('count', count))
        .toString();
  }
}

class Gpayments_aggregate_bool_expBuilder
    implements
        Builder<Gpayments_aggregate_bool_exp,
            Gpayments_aggregate_bool_expBuilder> {
  _$Gpayments_aggregate_bool_exp? _$v;

  Gpayments_aggregate_bool_exp_countBuilder? _count;
  Gpayments_aggregate_bool_exp_countBuilder get count =>
      _$this._count ??= new Gpayments_aggregate_bool_exp_countBuilder();
  set count(Gpayments_aggregate_bool_exp_countBuilder? count) =>
      _$this._count = count;

  Gpayments_aggregate_bool_expBuilder();

  Gpayments_aggregate_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _count = $v.count?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_aggregate_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_aggregate_bool_exp;
  }

  @override
  void update(void Function(Gpayments_aggregate_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_aggregate_bool_exp build() => _build();

  _$Gpayments_aggregate_bool_exp _build() {
    _$Gpayments_aggregate_bool_exp _$result;
    try {
      _$result =
          _$v ?? new _$Gpayments_aggregate_bool_exp._(count: _count?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'count';
        _count?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_aggregate_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_aggregate_bool_exp_count
    extends Gpayments_aggregate_bool_exp_count {
  @override
  final BuiltList<Gpayments_select_column>? arguments;
  @override
  final bool? distinct;
  @override
  final Gpayments_bool_exp? filter;
  @override
  final GInt_comparison_exp predicate;

  factory _$Gpayments_aggregate_bool_exp_count(
          [void Function(Gpayments_aggregate_bool_exp_countBuilder)?
              updates]) =>
      (new Gpayments_aggregate_bool_exp_countBuilder()..update(updates))
          ._build();

  _$Gpayments_aggregate_bool_exp_count._(
      {this.arguments, this.distinct, this.filter, required this.predicate})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        predicate, r'Gpayments_aggregate_bool_exp_count', 'predicate');
  }

  @override
  Gpayments_aggregate_bool_exp_count rebuild(
          void Function(Gpayments_aggregate_bool_exp_countBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_aggregate_bool_exp_countBuilder toBuilder() =>
      new Gpayments_aggregate_bool_exp_countBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_aggregate_bool_exp_count &&
        arguments == other.arguments &&
        distinct == other.distinct &&
        filter == other.filter &&
        predicate == other.predicate;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, arguments.hashCode), distinct.hashCode),
            filter.hashCode),
        predicate.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_aggregate_bool_exp_count')
          ..add('arguments', arguments)
          ..add('distinct', distinct)
          ..add('filter', filter)
          ..add('predicate', predicate))
        .toString();
  }
}

class Gpayments_aggregate_bool_exp_countBuilder
    implements
        Builder<Gpayments_aggregate_bool_exp_count,
            Gpayments_aggregate_bool_exp_countBuilder> {
  _$Gpayments_aggregate_bool_exp_count? _$v;

  ListBuilder<Gpayments_select_column>? _arguments;
  ListBuilder<Gpayments_select_column> get arguments =>
      _$this._arguments ??= new ListBuilder<Gpayments_select_column>();
  set arguments(ListBuilder<Gpayments_select_column>? arguments) =>
      _$this._arguments = arguments;

  bool? _distinct;
  bool? get distinct => _$this._distinct;
  set distinct(bool? distinct) => _$this._distinct = distinct;

  Gpayments_bool_expBuilder? _filter;
  Gpayments_bool_expBuilder get filter =>
      _$this._filter ??= new Gpayments_bool_expBuilder();
  set filter(Gpayments_bool_expBuilder? filter) => _$this._filter = filter;

  GInt_comparison_expBuilder? _predicate;
  GInt_comparison_expBuilder get predicate =>
      _$this._predicate ??= new GInt_comparison_expBuilder();
  set predicate(GInt_comparison_expBuilder? predicate) =>
      _$this._predicate = predicate;

  Gpayments_aggregate_bool_exp_countBuilder();

  Gpayments_aggregate_bool_exp_countBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _arguments = $v.arguments?.toBuilder();
      _distinct = $v.distinct;
      _filter = $v.filter?.toBuilder();
      _predicate = $v.predicate.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_aggregate_bool_exp_count other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_aggregate_bool_exp_count;
  }

  @override
  void update(
      void Function(Gpayments_aggregate_bool_exp_countBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_aggregate_bool_exp_count build() => _build();

  _$Gpayments_aggregate_bool_exp_count _build() {
    _$Gpayments_aggregate_bool_exp_count _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_aggregate_bool_exp_count._(
              arguments: _arguments?.build(),
              distinct: distinct,
              filter: _filter?.build(),
              predicate: predicate.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'arguments';
        _arguments?.build();

        _$failedField = 'filter';
        _filter?.build();
        _$failedField = 'predicate';
        predicate.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_aggregate_bool_exp_count', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_aggregate_order_by extends Gpayments_aggregate_order_by {
  @override
  final Gpayments_avg_order_by? avg;
  @override
  final Gorder_by? count;
  @override
  final Gpayments_max_order_by? max;
  @override
  final Gpayments_min_order_by? min;
  @override
  final Gpayments_stddev_order_by? stddev;
  @override
  final Gpayments_stddev_pop_order_by? stddev_pop;
  @override
  final Gpayments_stddev_samp_order_by? stddev_samp;
  @override
  final Gpayments_sum_order_by? sum;
  @override
  final Gpayments_var_pop_order_by? var_pop;
  @override
  final Gpayments_var_samp_order_by? var_samp;
  @override
  final Gpayments_variance_order_by? variance;

  factory _$Gpayments_aggregate_order_by(
          [void Function(Gpayments_aggregate_order_byBuilder)? updates]) =>
      (new Gpayments_aggregate_order_byBuilder()..update(updates))._build();

  _$Gpayments_aggregate_order_by._(
      {this.avg,
      this.count,
      this.max,
      this.min,
      this.stddev,
      this.stddev_pop,
      this.stddev_samp,
      this.sum,
      this.var_pop,
      this.var_samp,
      this.variance})
      : super._();

  @override
  Gpayments_aggregate_order_by rebuild(
          void Function(Gpayments_aggregate_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_aggregate_order_byBuilder toBuilder() =>
      new Gpayments_aggregate_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_aggregate_order_by &&
        avg == other.avg &&
        count == other.count &&
        max == other.max &&
        min == other.min &&
        stddev == other.stddev &&
        stddev_pop == other.stddev_pop &&
        stddev_samp == other.stddev_samp &&
        sum == other.sum &&
        var_pop == other.var_pop &&
        var_samp == other.var_samp &&
        variance == other.variance;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc($jc(0, avg.hashCode),
                                            count.hashCode),
                                        max.hashCode),
                                    min.hashCode),
                                stddev.hashCode),
                            stddev_pop.hashCode),
                        stddev_samp.hashCode),
                    sum.hashCode),
                var_pop.hashCode),
            var_samp.hashCode),
        variance.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_aggregate_order_by')
          ..add('avg', avg)
          ..add('count', count)
          ..add('max', max)
          ..add('min', min)
          ..add('stddev', stddev)
          ..add('stddev_pop', stddev_pop)
          ..add('stddev_samp', stddev_samp)
          ..add('sum', sum)
          ..add('var_pop', var_pop)
          ..add('var_samp', var_samp)
          ..add('variance', variance))
        .toString();
  }
}

class Gpayments_aggregate_order_byBuilder
    implements
        Builder<Gpayments_aggregate_order_by,
            Gpayments_aggregate_order_byBuilder> {
  _$Gpayments_aggregate_order_by? _$v;

  Gpayments_avg_order_byBuilder? _avg;
  Gpayments_avg_order_byBuilder get avg =>
      _$this._avg ??= new Gpayments_avg_order_byBuilder();
  set avg(Gpayments_avg_order_byBuilder? avg) => _$this._avg = avg;

  Gorder_by? _count;
  Gorder_by? get count => _$this._count;
  set count(Gorder_by? count) => _$this._count = count;

  Gpayments_max_order_byBuilder? _max;
  Gpayments_max_order_byBuilder get max =>
      _$this._max ??= new Gpayments_max_order_byBuilder();
  set max(Gpayments_max_order_byBuilder? max) => _$this._max = max;

  Gpayments_min_order_byBuilder? _min;
  Gpayments_min_order_byBuilder get min =>
      _$this._min ??= new Gpayments_min_order_byBuilder();
  set min(Gpayments_min_order_byBuilder? min) => _$this._min = min;

  Gpayments_stddev_order_byBuilder? _stddev;
  Gpayments_stddev_order_byBuilder get stddev =>
      _$this._stddev ??= new Gpayments_stddev_order_byBuilder();
  set stddev(Gpayments_stddev_order_byBuilder? stddev) =>
      _$this._stddev = stddev;

  Gpayments_stddev_pop_order_byBuilder? _stddev_pop;
  Gpayments_stddev_pop_order_byBuilder get stddev_pop =>
      _$this._stddev_pop ??= new Gpayments_stddev_pop_order_byBuilder();
  set stddev_pop(Gpayments_stddev_pop_order_byBuilder? stddev_pop) =>
      _$this._stddev_pop = stddev_pop;

  Gpayments_stddev_samp_order_byBuilder? _stddev_samp;
  Gpayments_stddev_samp_order_byBuilder get stddev_samp =>
      _$this._stddev_samp ??= new Gpayments_stddev_samp_order_byBuilder();
  set stddev_samp(Gpayments_stddev_samp_order_byBuilder? stddev_samp) =>
      _$this._stddev_samp = stddev_samp;

  Gpayments_sum_order_byBuilder? _sum;
  Gpayments_sum_order_byBuilder get sum =>
      _$this._sum ??= new Gpayments_sum_order_byBuilder();
  set sum(Gpayments_sum_order_byBuilder? sum) => _$this._sum = sum;

  Gpayments_var_pop_order_byBuilder? _var_pop;
  Gpayments_var_pop_order_byBuilder get var_pop =>
      _$this._var_pop ??= new Gpayments_var_pop_order_byBuilder();
  set var_pop(Gpayments_var_pop_order_byBuilder? var_pop) =>
      _$this._var_pop = var_pop;

  Gpayments_var_samp_order_byBuilder? _var_samp;
  Gpayments_var_samp_order_byBuilder get var_samp =>
      _$this._var_samp ??= new Gpayments_var_samp_order_byBuilder();
  set var_samp(Gpayments_var_samp_order_byBuilder? var_samp) =>
      _$this._var_samp = var_samp;

  Gpayments_variance_order_byBuilder? _variance;
  Gpayments_variance_order_byBuilder get variance =>
      _$this._variance ??= new Gpayments_variance_order_byBuilder();
  set variance(Gpayments_variance_order_byBuilder? variance) =>
      _$this._variance = variance;

  Gpayments_aggregate_order_byBuilder();

  Gpayments_aggregate_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _avg = $v.avg?.toBuilder();
      _count = $v.count;
      _max = $v.max?.toBuilder();
      _min = $v.min?.toBuilder();
      _stddev = $v.stddev?.toBuilder();
      _stddev_pop = $v.stddev_pop?.toBuilder();
      _stddev_samp = $v.stddev_samp?.toBuilder();
      _sum = $v.sum?.toBuilder();
      _var_pop = $v.var_pop?.toBuilder();
      _var_samp = $v.var_samp?.toBuilder();
      _variance = $v.variance?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_aggregate_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_aggregate_order_by;
  }

  @override
  void update(void Function(Gpayments_aggregate_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_aggregate_order_by build() => _build();

  _$Gpayments_aggregate_order_by _build() {
    _$Gpayments_aggregate_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_aggregate_order_by._(
              avg: _avg?.build(),
              count: count,
              max: _max?.build(),
              min: _min?.build(),
              stddev: _stddev?.build(),
              stddev_pop: _stddev_pop?.build(),
              stddev_samp: _stddev_samp?.build(),
              sum: _sum?.build(),
              var_pop: _var_pop?.build(),
              var_samp: _var_samp?.build(),
              variance: _variance?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'avg';
        _avg?.build();

        _$failedField = 'max';
        _max?.build();
        _$failedField = 'min';
        _min?.build();
        _$failedField = 'stddev';
        _stddev?.build();
        _$failedField = 'stddev_pop';
        _stddev_pop?.build();
        _$failedField = 'stddev_samp';
        _stddev_samp?.build();
        _$failedField = 'sum';
        _sum?.build();
        _$failedField = 'var_pop';
        _var_pop?.build();
        _$failedField = 'var_samp';
        _var_samp?.build();
        _$failedField = 'variance';
        _variance?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_aggregate_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_arr_rel_insert_input extends Gpayments_arr_rel_insert_input {
  @override
  final BuiltList<Gpayments_insert_input> data;
  @override
  final Gpayments_on_conflict? on_conflict;

  factory _$Gpayments_arr_rel_insert_input(
          [void Function(Gpayments_arr_rel_insert_inputBuilder)? updates]) =>
      (new Gpayments_arr_rel_insert_inputBuilder()..update(updates))._build();

  _$Gpayments_arr_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gpayments_arr_rel_insert_input', 'data');
  }

  @override
  Gpayments_arr_rel_insert_input rebuild(
          void Function(Gpayments_arr_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_arr_rel_insert_inputBuilder toBuilder() =>
      new Gpayments_arr_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_arr_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_arr_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gpayments_arr_rel_insert_inputBuilder
    implements
        Builder<Gpayments_arr_rel_insert_input,
            Gpayments_arr_rel_insert_inputBuilder> {
  _$Gpayments_arr_rel_insert_input? _$v;

  ListBuilder<Gpayments_insert_input>? _data;
  ListBuilder<Gpayments_insert_input> get data =>
      _$this._data ??= new ListBuilder<Gpayments_insert_input>();
  set data(ListBuilder<Gpayments_insert_input>? data) => _$this._data = data;

  Gpayments_on_conflictBuilder? _on_conflict;
  Gpayments_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gpayments_on_conflictBuilder();
  set on_conflict(Gpayments_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gpayments_arr_rel_insert_inputBuilder();

  Gpayments_arr_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_arr_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_arr_rel_insert_input;
  }

  @override
  void update(void Function(Gpayments_arr_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_arr_rel_insert_input build() => _build();

  _$Gpayments_arr_rel_insert_input _build() {
    _$Gpayments_arr_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_arr_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_arr_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_avg_order_by extends Gpayments_avg_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_avg_order_by(
          [void Function(Gpayments_avg_order_byBuilder)? updates]) =>
      (new Gpayments_avg_order_byBuilder()..update(updates))._build();

  _$Gpayments_avg_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_avg_order_by rebuild(
          void Function(Gpayments_avg_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_avg_order_byBuilder toBuilder() =>
      new Gpayments_avg_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_avg_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_avg_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_avg_order_byBuilder
    implements Builder<Gpayments_avg_order_by, Gpayments_avg_order_byBuilder> {
  _$Gpayments_avg_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_avg_order_byBuilder();

  Gpayments_avg_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_avg_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_avg_order_by;
  }

  @override
  void update(void Function(Gpayments_avg_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_avg_order_by build() => _build();

  _$Gpayments_avg_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_avg_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_bool_exp extends Gpayments_bool_exp {
  @override
  final BuiltList<Gpayments_bool_exp>? G_and;
  @override
  final Gpayments_bool_exp? G_not;
  @override
  final BuiltList<Gpayments_bool_exp>? G_or;
  @override
  final Gcable_customers_table_bool_exp? cable_customers_table;
  @override
  final GInt_comparison_exp? cable_id;
  @override
  final Gcable_opr_bool_exp? cable_opr;
  @override
  final GInt_comparison_exp? collected_by;
  @override
  final Gcollectors_bool_exp? collector;
  @override
  final Gtimestamptz_comparison_exp? date;
  @override
  final GInt_comparison_exp? id;
  @override
  final Gnotifications_bool_exp? notifications;
  @override
  final Gnotifications_aggregate_bool_exp? notifications_aggregate;
  @override
  final Gdate_comparison_exp? paid_on;
  @override
  final GInt_comparison_exp? trans_id;
  @override
  final GInt_comparison_exp? user_id;

  factory _$Gpayments_bool_exp(
          [void Function(Gpayments_bool_expBuilder)? updates]) =>
      (new Gpayments_bool_expBuilder()..update(updates))._build();

  _$Gpayments_bool_exp._(
      {this.G_and,
      this.G_not,
      this.G_or,
      this.cable_customers_table,
      this.cable_id,
      this.cable_opr,
      this.collected_by,
      this.collector,
      this.date,
      this.id,
      this.notifications,
      this.notifications_aggregate,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_bool_exp rebuild(
          void Function(Gpayments_bool_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_bool_expBuilder toBuilder() =>
      new Gpayments_bool_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_bool_exp &&
        G_and == other.G_and &&
        G_not == other.G_not &&
        G_or == other.G_or &&
        cable_customers_table == other.cable_customers_table &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        collected_by == other.collected_by &&
        collector == other.collector &&
        date == other.date &&
        id == other.id &&
        notifications == other.notifications &&
        notifications_aggregate == other.notifications_aggregate &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(0,
                                                                G_and.hashCode),
                                                            G_not.hashCode),
                                                        G_or.hashCode),
                                                    cable_customers_table
                                                        .hashCode),
                                                cable_id.hashCode),
                                            cable_opr.hashCode),
                                        collected_by.hashCode),
                                    collector.hashCode),
                                date.hashCode),
                            id.hashCode),
                        notifications.hashCode),
                    notifications_aggregate.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_bool_exp')
          ..add('G_and', G_and)
          ..add('G_not', G_not)
          ..add('G_or', G_or)
          ..add('cable_customers_table', cable_customers_table)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('collected_by', collected_by)
          ..add('collector', collector)
          ..add('date', date)
          ..add('id', id)
          ..add('notifications', notifications)
          ..add('notifications_aggregate', notifications_aggregate)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_bool_expBuilder
    implements Builder<Gpayments_bool_exp, Gpayments_bool_expBuilder> {
  _$Gpayments_bool_exp? _$v;

  ListBuilder<Gpayments_bool_exp>? _G_and;
  ListBuilder<Gpayments_bool_exp> get G_and =>
      _$this._G_and ??= new ListBuilder<Gpayments_bool_exp>();
  set G_and(ListBuilder<Gpayments_bool_exp>? G_and) => _$this._G_and = G_and;

  Gpayments_bool_expBuilder? _G_not;
  Gpayments_bool_expBuilder get G_not =>
      _$this._G_not ??= new Gpayments_bool_expBuilder();
  set G_not(Gpayments_bool_expBuilder? G_not) => _$this._G_not = G_not;

  ListBuilder<Gpayments_bool_exp>? _G_or;
  ListBuilder<Gpayments_bool_exp> get G_or =>
      _$this._G_or ??= new ListBuilder<Gpayments_bool_exp>();
  set G_or(ListBuilder<Gpayments_bool_exp>? G_or) => _$this._G_or = G_or;

  Gcable_customers_table_bool_expBuilder? _cable_customers_table;
  Gcable_customers_table_bool_expBuilder get cable_customers_table =>
      _$this._cable_customers_table ??=
          new Gcable_customers_table_bool_expBuilder();
  set cable_customers_table(
          Gcable_customers_table_bool_expBuilder? cable_customers_table) =>
      _$this._cable_customers_table = cable_customers_table;

  GInt_comparison_expBuilder? _cable_id;
  GInt_comparison_expBuilder get cable_id =>
      _$this._cable_id ??= new GInt_comparison_expBuilder();
  set cable_id(GInt_comparison_expBuilder? cable_id) =>
      _$this._cable_id = cable_id;

  Gcable_opr_bool_expBuilder? _cable_opr;
  Gcable_opr_bool_expBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_bool_expBuilder();
  set cable_opr(Gcable_opr_bool_expBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  GInt_comparison_expBuilder? _collected_by;
  GInt_comparison_expBuilder get collected_by =>
      _$this._collected_by ??= new GInt_comparison_expBuilder();
  set collected_by(GInt_comparison_expBuilder? collected_by) =>
      _$this._collected_by = collected_by;

  Gcollectors_bool_expBuilder? _collector;
  Gcollectors_bool_expBuilder get collector =>
      _$this._collector ??= new Gcollectors_bool_expBuilder();
  set collector(Gcollectors_bool_expBuilder? collector) =>
      _$this._collector = collector;

  Gtimestamptz_comparison_expBuilder? _date;
  Gtimestamptz_comparison_expBuilder get date =>
      _$this._date ??= new Gtimestamptz_comparison_expBuilder();
  set date(Gtimestamptz_comparison_expBuilder? date) => _$this._date = date;

  GInt_comparison_expBuilder? _id;
  GInt_comparison_expBuilder get id =>
      _$this._id ??= new GInt_comparison_expBuilder();
  set id(GInt_comparison_expBuilder? id) => _$this._id = id;

  Gnotifications_bool_expBuilder? _notifications;
  Gnotifications_bool_expBuilder get notifications =>
      _$this._notifications ??= new Gnotifications_bool_expBuilder();
  set notifications(Gnotifications_bool_expBuilder? notifications) =>
      _$this._notifications = notifications;

  Gnotifications_aggregate_bool_expBuilder? _notifications_aggregate;
  Gnotifications_aggregate_bool_expBuilder get notifications_aggregate =>
      _$this._notifications_aggregate ??=
          new Gnotifications_aggregate_bool_expBuilder();
  set notifications_aggregate(
          Gnotifications_aggregate_bool_expBuilder? notifications_aggregate) =>
      _$this._notifications_aggregate = notifications_aggregate;

  Gdate_comparison_expBuilder? _paid_on;
  Gdate_comparison_expBuilder get paid_on =>
      _$this._paid_on ??= new Gdate_comparison_expBuilder();
  set paid_on(Gdate_comparison_expBuilder? paid_on) =>
      _$this._paid_on = paid_on;

  GInt_comparison_expBuilder? _trans_id;
  GInt_comparison_expBuilder get trans_id =>
      _$this._trans_id ??= new GInt_comparison_expBuilder();
  set trans_id(GInt_comparison_expBuilder? trans_id) =>
      _$this._trans_id = trans_id;

  GInt_comparison_expBuilder? _user_id;
  GInt_comparison_expBuilder get user_id =>
      _$this._user_id ??= new GInt_comparison_expBuilder();
  set user_id(GInt_comparison_expBuilder? user_id) => _$this._user_id = user_id;

  Gpayments_bool_expBuilder();

  Gpayments_bool_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_and = $v.G_and?.toBuilder();
      _G_not = $v.G_not?.toBuilder();
      _G_or = $v.G_or?.toBuilder();
      _cable_customers_table = $v.cable_customers_table?.toBuilder();
      _cable_id = $v.cable_id?.toBuilder();
      _cable_opr = $v.cable_opr?.toBuilder();
      _collected_by = $v.collected_by?.toBuilder();
      _collector = $v.collector?.toBuilder();
      _date = $v.date?.toBuilder();
      _id = $v.id?.toBuilder();
      _notifications = $v.notifications?.toBuilder();
      _notifications_aggregate = $v.notifications_aggregate?.toBuilder();
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id?.toBuilder();
      _user_id = $v.user_id?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_bool_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_bool_exp;
  }

  @override
  void update(void Function(Gpayments_bool_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_bool_exp build() => _build();

  _$Gpayments_bool_exp _build() {
    _$Gpayments_bool_exp _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_bool_exp._(
              G_and: _G_and?.build(),
              G_not: _G_not?.build(),
              G_or: _G_or?.build(),
              cable_customers_table: _cable_customers_table?.build(),
              cable_id: _cable_id?.build(),
              cable_opr: _cable_opr?.build(),
              collected_by: _collected_by?.build(),
              collector: _collector?.build(),
              date: _date?.build(),
              id: _id?.build(),
              notifications: _notifications?.build(),
              notifications_aggregate: _notifications_aggregate?.build(),
              paid_on: _paid_on?.build(),
              trans_id: _trans_id?.build(),
              user_id: _user_id?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_and';
        _G_and?.build();
        _$failedField = 'G_not';
        _G_not?.build();
        _$failedField = 'G_or';
        _G_or?.build();
        _$failedField = 'cable_customers_table';
        _cable_customers_table?.build();
        _$failedField = 'cable_id';
        _cable_id?.build();
        _$failedField = 'cable_opr';
        _cable_opr?.build();
        _$failedField = 'collected_by';
        _collected_by?.build();
        _$failedField = 'collector';
        _collector?.build();
        _$failedField = 'date';
        _date?.build();
        _$failedField = 'id';
        _id?.build();
        _$failedField = 'notifications';
        _notifications?.build();
        _$failedField = 'notifications_aggregate';
        _notifications_aggregate?.build();
        _$failedField = 'paid_on';
        _paid_on?.build();
        _$failedField = 'trans_id';
        _trans_id?.build();
        _$failedField = 'user_id';
        _user_id?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_bool_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_inc_input extends Gpayments_inc_input {
  @override
  final int? cable_id;
  @override
  final int? collected_by;
  @override
  final int? id;
  @override
  final int? trans_id;
  @override
  final int? user_id;

  factory _$Gpayments_inc_input(
          [void Function(Gpayments_inc_inputBuilder)? updates]) =>
      (new Gpayments_inc_inputBuilder()..update(updates))._build();

  _$Gpayments_inc_input._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_inc_input rebuild(
          void Function(Gpayments_inc_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_inc_inputBuilder toBuilder() =>
      new Gpayments_inc_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_inc_input &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_inc_input')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_inc_inputBuilder
    implements Builder<Gpayments_inc_input, Gpayments_inc_inputBuilder> {
  _$Gpayments_inc_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  int? _collected_by;
  int? get collected_by => _$this._collected_by;
  set collected_by(int? collected_by) => _$this._collected_by = collected_by;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  int? _trans_id;
  int? get trans_id => _$this._trans_id;
  set trans_id(int? trans_id) => _$this._trans_id = trans_id;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gpayments_inc_inputBuilder();

  Gpayments_inc_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_inc_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_inc_input;
  }

  @override
  void update(void Function(Gpayments_inc_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_inc_input build() => _build();

  _$Gpayments_inc_input _build() {
    final _$result = _$v ??
        new _$Gpayments_inc_input._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_insert_input extends Gpayments_insert_input {
  @override
  final Gcable_customers_table_obj_rel_insert_input? cable_customers_table;
  @override
  final int? cable_id;
  @override
  final Gcable_opr_obj_rel_insert_input? cable_opr;
  @override
  final int? collected_by;
  @override
  final Gcollectors_obj_rel_insert_input? collector;
  @override
  final Gtimestamptz? date;
  @override
  final int? id;
  @override
  final Gnotifications_arr_rel_insert_input? notifications;
  @override
  final Gdate? paid_on;
  @override
  final int? trans_id;
  @override
  final int? user_id;

  factory _$Gpayments_insert_input(
          [void Function(Gpayments_insert_inputBuilder)? updates]) =>
      (new Gpayments_insert_inputBuilder()..update(updates))._build();

  _$Gpayments_insert_input._(
      {this.cable_customers_table,
      this.cable_id,
      this.cable_opr,
      this.collected_by,
      this.collector,
      this.date,
      this.id,
      this.notifications,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_insert_input rebuild(
          void Function(Gpayments_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_insert_inputBuilder toBuilder() =>
      new Gpayments_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_insert_input &&
        cable_customers_table == other.cable_customers_table &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        collected_by == other.collected_by &&
        collector == other.collector &&
        date == other.date &&
        id == other.id &&
        notifications == other.notifications &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(0,
                                                cable_customers_table.hashCode),
                                            cable_id.hashCode),
                                        cable_opr.hashCode),
                                    collected_by.hashCode),
                                collector.hashCode),
                            date.hashCode),
                        id.hashCode),
                    notifications.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_insert_input')
          ..add('cable_customers_table', cable_customers_table)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('collected_by', collected_by)
          ..add('collector', collector)
          ..add('date', date)
          ..add('id', id)
          ..add('notifications', notifications)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_insert_inputBuilder
    implements Builder<Gpayments_insert_input, Gpayments_insert_inputBuilder> {
  _$Gpayments_insert_input? _$v;

  Gcable_customers_table_obj_rel_insert_inputBuilder? _cable_customers_table;
  Gcable_customers_table_obj_rel_insert_inputBuilder
      get cable_customers_table => _$this._cable_customers_table ??=
          new Gcable_customers_table_obj_rel_insert_inputBuilder();
  set cable_customers_table(
          Gcable_customers_table_obj_rel_insert_inputBuilder?
              cable_customers_table) =>
      _$this._cable_customers_table = cable_customers_table;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  Gcable_opr_obj_rel_insert_inputBuilder? _cable_opr;
  Gcable_opr_obj_rel_insert_inputBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_obj_rel_insert_inputBuilder();
  set cable_opr(Gcable_opr_obj_rel_insert_inputBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  int? _collected_by;
  int? get collected_by => _$this._collected_by;
  set collected_by(int? collected_by) => _$this._collected_by = collected_by;

  Gcollectors_obj_rel_insert_inputBuilder? _collector;
  Gcollectors_obj_rel_insert_inputBuilder get collector =>
      _$this._collector ??= new Gcollectors_obj_rel_insert_inputBuilder();
  set collector(Gcollectors_obj_rel_insert_inputBuilder? collector) =>
      _$this._collector = collector;

  GtimestamptzBuilder? _date;
  GtimestamptzBuilder get date => _$this._date ??= new GtimestamptzBuilder();
  set date(GtimestamptzBuilder? date) => _$this._date = date;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gnotifications_arr_rel_insert_inputBuilder? _notifications;
  Gnotifications_arr_rel_insert_inputBuilder get notifications =>
      _$this._notifications ??=
          new Gnotifications_arr_rel_insert_inputBuilder();
  set notifications(
          Gnotifications_arr_rel_insert_inputBuilder? notifications) =>
      _$this._notifications = notifications;

  GdateBuilder? _paid_on;
  GdateBuilder get paid_on => _$this._paid_on ??= new GdateBuilder();
  set paid_on(GdateBuilder? paid_on) => _$this._paid_on = paid_on;

  int? _trans_id;
  int? get trans_id => _$this._trans_id;
  set trans_id(int? trans_id) => _$this._trans_id = trans_id;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gpayments_insert_inputBuilder();

  Gpayments_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_customers_table = $v.cable_customers_table?.toBuilder();
      _cable_id = $v.cable_id;
      _cable_opr = $v.cable_opr?.toBuilder();
      _collected_by = $v.collected_by;
      _collector = $v.collector?.toBuilder();
      _date = $v.date?.toBuilder();
      _id = $v.id;
      _notifications = $v.notifications?.toBuilder();
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_insert_input;
  }

  @override
  void update(void Function(Gpayments_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_insert_input build() => _build();

  _$Gpayments_insert_input _build() {
    _$Gpayments_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_insert_input._(
              cable_customers_table: _cable_customers_table?.build(),
              cable_id: cable_id,
              cable_opr: _cable_opr?.build(),
              collected_by: collected_by,
              collector: _collector?.build(),
              date: _date?.build(),
              id: id,
              notifications: _notifications?.build(),
              paid_on: _paid_on?.build(),
              trans_id: trans_id,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_customers_table';
        _cable_customers_table?.build();

        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'collector';
        _collector?.build();
        _$failedField = 'date';
        _date?.build();

        _$failedField = 'notifications';
        _notifications?.build();
        _$failedField = 'paid_on';
        _paid_on?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_max_order_by extends Gpayments_max_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? paid_on;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_max_order_by(
          [void Function(Gpayments_max_order_byBuilder)? updates]) =>
      (new Gpayments_max_order_byBuilder()..update(updates))._build();

  _$Gpayments_max_order_by._(
      {this.cable_id,
      this.collected_by,
      this.date,
      this.id,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_max_order_by rebuild(
          void Function(Gpayments_max_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_max_order_byBuilder toBuilder() =>
      new Gpayments_max_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_max_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        date == other.date &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                        date.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_max_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('date', date)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_max_order_byBuilder
    implements Builder<Gpayments_max_order_by, Gpayments_max_order_byBuilder> {
  _$Gpayments_max_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _paid_on;
  Gorder_by? get paid_on => _$this._paid_on;
  set paid_on(Gorder_by? paid_on) => _$this._paid_on = paid_on;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_max_order_byBuilder();

  Gpayments_max_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _date = $v.date;
      _id = $v.id;
      _paid_on = $v.paid_on;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_max_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_max_order_by;
  }

  @override
  void update(void Function(Gpayments_max_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_max_order_by build() => _build();

  _$Gpayments_max_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_max_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            date: date,
            id: id,
            paid_on: paid_on,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_min_order_by extends Gpayments_min_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? paid_on;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_min_order_by(
          [void Function(Gpayments_min_order_byBuilder)? updates]) =>
      (new Gpayments_min_order_byBuilder()..update(updates))._build();

  _$Gpayments_min_order_by._(
      {this.cable_id,
      this.collected_by,
      this.date,
      this.id,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_min_order_by rebuild(
          void Function(Gpayments_min_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_min_order_byBuilder toBuilder() =>
      new Gpayments_min_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_min_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        date == other.date &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                        date.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_min_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('date', date)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_min_order_byBuilder
    implements Builder<Gpayments_min_order_by, Gpayments_min_order_byBuilder> {
  _$Gpayments_min_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _paid_on;
  Gorder_by? get paid_on => _$this._paid_on;
  set paid_on(Gorder_by? paid_on) => _$this._paid_on = paid_on;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_min_order_byBuilder();

  Gpayments_min_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _date = $v.date;
      _id = $v.id;
      _paid_on = $v.paid_on;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_min_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_min_order_by;
  }

  @override
  void update(void Function(Gpayments_min_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_min_order_by build() => _build();

  _$Gpayments_min_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_min_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            date: date,
            id: id,
            paid_on: paid_on,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_obj_rel_insert_input extends Gpayments_obj_rel_insert_input {
  @override
  final Gpayments_insert_input data;
  @override
  final Gpayments_on_conflict? on_conflict;

  factory _$Gpayments_obj_rel_insert_input(
          [void Function(Gpayments_obj_rel_insert_inputBuilder)? updates]) =>
      (new Gpayments_obj_rel_insert_inputBuilder()..update(updates))._build();

  _$Gpayments_obj_rel_insert_input._({required this.data, this.on_conflict})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, r'Gpayments_obj_rel_insert_input', 'data');
  }

  @override
  Gpayments_obj_rel_insert_input rebuild(
          void Function(Gpayments_obj_rel_insert_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_obj_rel_insert_inputBuilder toBuilder() =>
      new Gpayments_obj_rel_insert_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_obj_rel_insert_input &&
        data == other.data &&
        on_conflict == other.on_conflict;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), on_conflict.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_obj_rel_insert_input')
          ..add('data', data)
          ..add('on_conflict', on_conflict))
        .toString();
  }
}

class Gpayments_obj_rel_insert_inputBuilder
    implements
        Builder<Gpayments_obj_rel_insert_input,
            Gpayments_obj_rel_insert_inputBuilder> {
  _$Gpayments_obj_rel_insert_input? _$v;

  Gpayments_insert_inputBuilder? _data;
  Gpayments_insert_inputBuilder get data =>
      _$this._data ??= new Gpayments_insert_inputBuilder();
  set data(Gpayments_insert_inputBuilder? data) => _$this._data = data;

  Gpayments_on_conflictBuilder? _on_conflict;
  Gpayments_on_conflictBuilder get on_conflict =>
      _$this._on_conflict ??= new Gpayments_on_conflictBuilder();
  set on_conflict(Gpayments_on_conflictBuilder? on_conflict) =>
      _$this._on_conflict = on_conflict;

  Gpayments_obj_rel_insert_inputBuilder();

  Gpayments_obj_rel_insert_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _on_conflict = $v.on_conflict?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_obj_rel_insert_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_obj_rel_insert_input;
  }

  @override
  void update(void Function(Gpayments_obj_rel_insert_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_obj_rel_insert_input build() => _build();

  _$Gpayments_obj_rel_insert_input _build() {
    _$Gpayments_obj_rel_insert_input _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_obj_rel_insert_input._(
              data: data.build(), on_conflict: _on_conflict?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
        _$failedField = 'on_conflict';
        _on_conflict?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_obj_rel_insert_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_on_conflict extends Gpayments_on_conflict {
  @override
  final Gpayments_constraint constraint;
  @override
  final BuiltList<Gpayments_update_column> update_columns;
  @override
  final Gpayments_bool_exp? where;

  factory _$Gpayments_on_conflict(
          [void Function(Gpayments_on_conflictBuilder)? updates]) =>
      (new Gpayments_on_conflictBuilder()..update(updates))._build();

  _$Gpayments_on_conflict._(
      {required this.constraint, required this.update_columns, this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        constraint, r'Gpayments_on_conflict', 'constraint');
    BuiltValueNullFieldError.checkNotNull(
        update_columns, r'Gpayments_on_conflict', 'update_columns');
  }

  @override
  Gpayments_on_conflict rebuild(
          void Function(Gpayments_on_conflictBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_on_conflictBuilder toBuilder() =>
      new Gpayments_on_conflictBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_on_conflict &&
        constraint == other.constraint &&
        update_columns == other.update_columns &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, constraint.hashCode), update_columns.hashCode),
        where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_on_conflict')
          ..add('constraint', constraint)
          ..add('update_columns', update_columns)
          ..add('where', where))
        .toString();
  }
}

class Gpayments_on_conflictBuilder
    implements Builder<Gpayments_on_conflict, Gpayments_on_conflictBuilder> {
  _$Gpayments_on_conflict? _$v;

  Gpayments_constraint? _constraint;
  Gpayments_constraint? get constraint => _$this._constraint;
  set constraint(Gpayments_constraint? constraint) =>
      _$this._constraint = constraint;

  ListBuilder<Gpayments_update_column>? _update_columns;
  ListBuilder<Gpayments_update_column> get update_columns =>
      _$this._update_columns ??= new ListBuilder<Gpayments_update_column>();
  set update_columns(ListBuilder<Gpayments_update_column>? update_columns) =>
      _$this._update_columns = update_columns;

  Gpayments_bool_expBuilder? _where;
  Gpayments_bool_expBuilder get where =>
      _$this._where ??= new Gpayments_bool_expBuilder();
  set where(Gpayments_bool_expBuilder? where) => _$this._where = where;

  Gpayments_on_conflictBuilder();

  Gpayments_on_conflictBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _constraint = $v.constraint;
      _update_columns = $v.update_columns.toBuilder();
      _where = $v.where?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_on_conflict other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_on_conflict;
  }

  @override
  void update(void Function(Gpayments_on_conflictBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_on_conflict build() => _build();

  _$Gpayments_on_conflict _build() {
    _$Gpayments_on_conflict _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_on_conflict._(
              constraint: BuiltValueNullFieldError.checkNotNull(
                  constraint, r'Gpayments_on_conflict', 'constraint'),
              update_columns: update_columns.build(),
              where: _where?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'update_columns';
        update_columns.build();
        _$failedField = 'where';
        _where?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_on_conflict', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_order_by extends Gpayments_order_by {
  @override
  final Gcable_customers_table_order_by? cable_customers_table;
  @override
  final Gorder_by? cable_id;
  @override
  final Gcable_opr_order_by? cable_opr;
  @override
  final Gorder_by? collected_by;
  @override
  final Gcollectors_order_by? collector;
  @override
  final Gorder_by? date;
  @override
  final Gorder_by? id;
  @override
  final Gnotifications_aggregate_order_by? notifications_aggregate;
  @override
  final Gorder_by? paid_on;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_order_by(
          [void Function(Gpayments_order_byBuilder)? updates]) =>
      (new Gpayments_order_byBuilder()..update(updates))._build();

  _$Gpayments_order_by._(
      {this.cable_customers_table,
      this.cable_id,
      this.cable_opr,
      this.collected_by,
      this.collector,
      this.date,
      this.id,
      this.notifications_aggregate,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_order_by rebuild(
          void Function(Gpayments_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_order_byBuilder toBuilder() =>
      new Gpayments_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_order_by &&
        cable_customers_table == other.cable_customers_table &&
        cable_id == other.cable_id &&
        cable_opr == other.cable_opr &&
        collected_by == other.collected_by &&
        collector == other.collector &&
        date == other.date &&
        id == other.id &&
        notifications_aggregate == other.notifications_aggregate &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(0,
                                                cable_customers_table.hashCode),
                                            cable_id.hashCode),
                                        cable_opr.hashCode),
                                    collected_by.hashCode),
                                collector.hashCode),
                            date.hashCode),
                        id.hashCode),
                    notifications_aggregate.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_order_by')
          ..add('cable_customers_table', cable_customers_table)
          ..add('cable_id', cable_id)
          ..add('cable_opr', cable_opr)
          ..add('collected_by', collected_by)
          ..add('collector', collector)
          ..add('date', date)
          ..add('id', id)
          ..add('notifications_aggregate', notifications_aggregate)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_order_byBuilder
    implements Builder<Gpayments_order_by, Gpayments_order_byBuilder> {
  _$Gpayments_order_by? _$v;

  Gcable_customers_table_order_byBuilder? _cable_customers_table;
  Gcable_customers_table_order_byBuilder get cable_customers_table =>
      _$this._cable_customers_table ??=
          new Gcable_customers_table_order_byBuilder();
  set cable_customers_table(
          Gcable_customers_table_order_byBuilder? cable_customers_table) =>
      _$this._cable_customers_table = cable_customers_table;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gcable_opr_order_byBuilder? _cable_opr;
  Gcable_opr_order_byBuilder get cable_opr =>
      _$this._cable_opr ??= new Gcable_opr_order_byBuilder();
  set cable_opr(Gcable_opr_order_byBuilder? cable_opr) =>
      _$this._cable_opr = cable_opr;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gcollectors_order_byBuilder? _collector;
  Gcollectors_order_byBuilder get collector =>
      _$this._collector ??= new Gcollectors_order_byBuilder();
  set collector(Gcollectors_order_byBuilder? collector) =>
      _$this._collector = collector;

  Gorder_by? _date;
  Gorder_by? get date => _$this._date;
  set date(Gorder_by? date) => _$this._date = date;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gnotifications_aggregate_order_byBuilder? _notifications_aggregate;
  Gnotifications_aggregate_order_byBuilder get notifications_aggregate =>
      _$this._notifications_aggregate ??=
          new Gnotifications_aggregate_order_byBuilder();
  set notifications_aggregate(
          Gnotifications_aggregate_order_byBuilder? notifications_aggregate) =>
      _$this._notifications_aggregate = notifications_aggregate;

  Gorder_by? _paid_on;
  Gorder_by? get paid_on => _$this._paid_on;
  set paid_on(Gorder_by? paid_on) => _$this._paid_on = paid_on;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_order_byBuilder();

  Gpayments_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_customers_table = $v.cable_customers_table?.toBuilder();
      _cable_id = $v.cable_id;
      _cable_opr = $v.cable_opr?.toBuilder();
      _collected_by = $v.collected_by;
      _collector = $v.collector?.toBuilder();
      _date = $v.date;
      _id = $v.id;
      _notifications_aggregate = $v.notifications_aggregate?.toBuilder();
      _paid_on = $v.paid_on;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_order_by;
  }

  @override
  void update(void Function(Gpayments_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_order_by build() => _build();

  _$Gpayments_order_by _build() {
    _$Gpayments_order_by _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_order_by._(
              cable_customers_table: _cable_customers_table?.build(),
              cable_id: cable_id,
              cable_opr: _cable_opr?.build(),
              collected_by: collected_by,
              collector: _collector?.build(),
              date: date,
              id: id,
              notifications_aggregate: _notifications_aggregate?.build(),
              paid_on: paid_on,
              trans_id: trans_id,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'cable_customers_table';
        _cable_customers_table?.build();

        _$failedField = 'cable_opr';
        _cable_opr?.build();

        _$failedField = 'collector';
        _collector?.build();

        _$failedField = 'notifications_aggregate';
        _notifications_aggregate?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_order_by', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_pk_columns_input extends Gpayments_pk_columns_input {
  @override
  final int id;

  factory _$Gpayments_pk_columns_input(
          [void Function(Gpayments_pk_columns_inputBuilder)? updates]) =>
      (new Gpayments_pk_columns_inputBuilder()..update(updates))._build();

  _$Gpayments_pk_columns_input._({required this.id}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        id, r'Gpayments_pk_columns_input', 'id');
  }

  @override
  Gpayments_pk_columns_input rebuild(
          void Function(Gpayments_pk_columns_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_pk_columns_inputBuilder toBuilder() =>
      new Gpayments_pk_columns_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_pk_columns_input && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_pk_columns_input')
          ..add('id', id))
        .toString();
  }
}

class Gpayments_pk_columns_inputBuilder
    implements
        Builder<Gpayments_pk_columns_input, Gpayments_pk_columns_inputBuilder> {
  _$Gpayments_pk_columns_input? _$v;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  Gpayments_pk_columns_inputBuilder();

  Gpayments_pk_columns_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_pk_columns_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_pk_columns_input;
  }

  @override
  void update(void Function(Gpayments_pk_columns_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_pk_columns_input build() => _build();

  _$Gpayments_pk_columns_input _build() {
    final _$result = _$v ??
        new _$Gpayments_pk_columns_input._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, r'Gpayments_pk_columns_input', 'id'));
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_set_input extends Gpayments_set_input {
  @override
  final int? cable_id;
  @override
  final int? collected_by;
  @override
  final Gtimestamptz? date;
  @override
  final int? id;
  @override
  final Gdate? paid_on;
  @override
  final int? trans_id;
  @override
  final int? user_id;

  factory _$Gpayments_set_input(
          [void Function(Gpayments_set_inputBuilder)? updates]) =>
      (new Gpayments_set_inputBuilder()..update(updates))._build();

  _$Gpayments_set_input._(
      {this.cable_id,
      this.collected_by,
      this.date,
      this.id,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_set_input rebuild(
          void Function(Gpayments_set_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_set_inputBuilder toBuilder() =>
      new Gpayments_set_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_set_input &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        date == other.date &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                        date.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_set_input')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('date', date)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_set_inputBuilder
    implements Builder<Gpayments_set_input, Gpayments_set_inputBuilder> {
  _$Gpayments_set_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  int? _collected_by;
  int? get collected_by => _$this._collected_by;
  set collected_by(int? collected_by) => _$this._collected_by = collected_by;

  GtimestamptzBuilder? _date;
  GtimestamptzBuilder get date => _$this._date ??= new GtimestamptzBuilder();
  set date(GtimestamptzBuilder? date) => _$this._date = date;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GdateBuilder? _paid_on;
  GdateBuilder get paid_on => _$this._paid_on ??= new GdateBuilder();
  set paid_on(GdateBuilder? paid_on) => _$this._paid_on = paid_on;

  int? _trans_id;
  int? get trans_id => _$this._trans_id;
  set trans_id(int? trans_id) => _$this._trans_id = trans_id;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gpayments_set_inputBuilder();

  Gpayments_set_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _date = $v.date?.toBuilder();
      _id = $v.id;
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_set_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_set_input;
  }

  @override
  void update(void Function(Gpayments_set_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_set_input build() => _build();

  _$Gpayments_set_input _build() {
    _$Gpayments_set_input _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_set_input._(
              cable_id: cable_id,
              collected_by: collected_by,
              date: _date?.build(),
              id: id,
              paid_on: _paid_on?.build(),
              trans_id: trans_id,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'date';
        _date?.build();

        _$failedField = 'paid_on';
        _paid_on?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_set_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_stddev_order_by extends Gpayments_stddev_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_stddev_order_by(
          [void Function(Gpayments_stddev_order_byBuilder)? updates]) =>
      (new Gpayments_stddev_order_byBuilder()..update(updates))._build();

  _$Gpayments_stddev_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_stddev_order_by rebuild(
          void Function(Gpayments_stddev_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_stddev_order_byBuilder toBuilder() =>
      new Gpayments_stddev_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_stddev_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_stddev_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_stddev_order_byBuilder
    implements
        Builder<Gpayments_stddev_order_by, Gpayments_stddev_order_byBuilder> {
  _$Gpayments_stddev_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_stddev_order_byBuilder();

  Gpayments_stddev_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_stddev_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_stddev_order_by;
  }

  @override
  void update(void Function(Gpayments_stddev_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_stddev_order_by build() => _build();

  _$Gpayments_stddev_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_stddev_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_stddev_pop_order_by extends Gpayments_stddev_pop_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_stddev_pop_order_by(
          [void Function(Gpayments_stddev_pop_order_byBuilder)? updates]) =>
      (new Gpayments_stddev_pop_order_byBuilder()..update(updates))._build();

  _$Gpayments_stddev_pop_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_stddev_pop_order_by rebuild(
          void Function(Gpayments_stddev_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_stddev_pop_order_byBuilder toBuilder() =>
      new Gpayments_stddev_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_stddev_pop_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_stddev_pop_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_stddev_pop_order_byBuilder
    implements
        Builder<Gpayments_stddev_pop_order_by,
            Gpayments_stddev_pop_order_byBuilder> {
  _$Gpayments_stddev_pop_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_stddev_pop_order_byBuilder();

  Gpayments_stddev_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_stddev_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_stddev_pop_order_by;
  }

  @override
  void update(void Function(Gpayments_stddev_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_stddev_pop_order_by build() => _build();

  _$Gpayments_stddev_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_stddev_pop_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_stddev_samp_order_by extends Gpayments_stddev_samp_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_stddev_samp_order_by(
          [void Function(Gpayments_stddev_samp_order_byBuilder)? updates]) =>
      (new Gpayments_stddev_samp_order_byBuilder()..update(updates))._build();

  _$Gpayments_stddev_samp_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_stddev_samp_order_by rebuild(
          void Function(Gpayments_stddev_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_stddev_samp_order_byBuilder toBuilder() =>
      new Gpayments_stddev_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_stddev_samp_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_stddev_samp_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_stddev_samp_order_byBuilder
    implements
        Builder<Gpayments_stddev_samp_order_by,
            Gpayments_stddev_samp_order_byBuilder> {
  _$Gpayments_stddev_samp_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_stddev_samp_order_byBuilder();

  Gpayments_stddev_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_stddev_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_stddev_samp_order_by;
  }

  @override
  void update(void Function(Gpayments_stddev_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_stddev_samp_order_by build() => _build();

  _$Gpayments_stddev_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_stddev_samp_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_stream_cursor_input extends Gpayments_stream_cursor_input {
  @override
  final Gpayments_stream_cursor_value_input initial_value;
  @override
  final Gcursor_ordering? ordering;

  factory _$Gpayments_stream_cursor_input(
          [void Function(Gpayments_stream_cursor_inputBuilder)? updates]) =>
      (new Gpayments_stream_cursor_inputBuilder()..update(updates))._build();

  _$Gpayments_stream_cursor_input._(
      {required this.initial_value, this.ordering})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        initial_value, r'Gpayments_stream_cursor_input', 'initial_value');
  }

  @override
  Gpayments_stream_cursor_input rebuild(
          void Function(Gpayments_stream_cursor_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_stream_cursor_inputBuilder toBuilder() =>
      new Gpayments_stream_cursor_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_stream_cursor_input &&
        initial_value == other.initial_value &&
        ordering == other.ordering;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, initial_value.hashCode), ordering.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_stream_cursor_input')
          ..add('initial_value', initial_value)
          ..add('ordering', ordering))
        .toString();
  }
}

class Gpayments_stream_cursor_inputBuilder
    implements
        Builder<Gpayments_stream_cursor_input,
            Gpayments_stream_cursor_inputBuilder> {
  _$Gpayments_stream_cursor_input? _$v;

  Gpayments_stream_cursor_value_inputBuilder? _initial_value;
  Gpayments_stream_cursor_value_inputBuilder get initial_value =>
      _$this._initial_value ??=
          new Gpayments_stream_cursor_value_inputBuilder();
  set initial_value(
          Gpayments_stream_cursor_value_inputBuilder? initial_value) =>
      _$this._initial_value = initial_value;

  Gcursor_ordering? _ordering;
  Gcursor_ordering? get ordering => _$this._ordering;
  set ordering(Gcursor_ordering? ordering) => _$this._ordering = ordering;

  Gpayments_stream_cursor_inputBuilder();

  Gpayments_stream_cursor_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _initial_value = $v.initial_value.toBuilder();
      _ordering = $v.ordering;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_stream_cursor_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_stream_cursor_input;
  }

  @override
  void update(void Function(Gpayments_stream_cursor_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_stream_cursor_input build() => _build();

  _$Gpayments_stream_cursor_input _build() {
    _$Gpayments_stream_cursor_input _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_stream_cursor_input._(
              initial_value: initial_value.build(), ordering: ordering);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'initial_value';
        initial_value.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_stream_cursor_input', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_stream_cursor_value_input
    extends Gpayments_stream_cursor_value_input {
  @override
  final int? cable_id;
  @override
  final int? collected_by;
  @override
  final Gtimestamptz? date;
  @override
  final int? id;
  @override
  final Gdate? paid_on;
  @override
  final int? trans_id;
  @override
  final int? user_id;

  factory _$Gpayments_stream_cursor_value_input(
          [void Function(Gpayments_stream_cursor_value_inputBuilder)?
              updates]) =>
      (new Gpayments_stream_cursor_value_inputBuilder()..update(updates))
          ._build();

  _$Gpayments_stream_cursor_value_input._(
      {this.cable_id,
      this.collected_by,
      this.date,
      this.id,
      this.paid_on,
      this.trans_id,
      this.user_id})
      : super._();

  @override
  Gpayments_stream_cursor_value_input rebuild(
          void Function(Gpayments_stream_cursor_value_inputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_stream_cursor_value_inputBuilder toBuilder() =>
      new Gpayments_stream_cursor_value_inputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_stream_cursor_value_input &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        date == other.date &&
        id == other.id &&
        paid_on == other.paid_on &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                        date.hashCode),
                    id.hashCode),
                paid_on.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_stream_cursor_value_input')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('date', date)
          ..add('id', id)
          ..add('paid_on', paid_on)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_stream_cursor_value_inputBuilder
    implements
        Builder<Gpayments_stream_cursor_value_input,
            Gpayments_stream_cursor_value_inputBuilder> {
  _$Gpayments_stream_cursor_value_input? _$v;

  int? _cable_id;
  int? get cable_id => _$this._cable_id;
  set cable_id(int? cable_id) => _$this._cable_id = cable_id;

  int? _collected_by;
  int? get collected_by => _$this._collected_by;
  set collected_by(int? collected_by) => _$this._collected_by = collected_by;

  GtimestamptzBuilder? _date;
  GtimestamptzBuilder get date => _$this._date ??= new GtimestamptzBuilder();
  set date(GtimestamptzBuilder? date) => _$this._date = date;

  int? _id;
  int? get id => _$this._id;
  set id(int? id) => _$this._id = id;

  GdateBuilder? _paid_on;
  GdateBuilder get paid_on => _$this._paid_on ??= new GdateBuilder();
  set paid_on(GdateBuilder? paid_on) => _$this._paid_on = paid_on;

  int? _trans_id;
  int? get trans_id => _$this._trans_id;
  set trans_id(int? trans_id) => _$this._trans_id = trans_id;

  int? _user_id;
  int? get user_id => _$this._user_id;
  set user_id(int? user_id) => _$this._user_id = user_id;

  Gpayments_stream_cursor_value_inputBuilder();

  Gpayments_stream_cursor_value_inputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _date = $v.date?.toBuilder();
      _id = $v.id;
      _paid_on = $v.paid_on?.toBuilder();
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_stream_cursor_value_input other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_stream_cursor_value_input;
  }

  @override
  void update(
      void Function(Gpayments_stream_cursor_value_inputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_stream_cursor_value_input build() => _build();

  _$Gpayments_stream_cursor_value_input _build() {
    _$Gpayments_stream_cursor_value_input _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_stream_cursor_value_input._(
              cable_id: cable_id,
              collected_by: collected_by,
              date: _date?.build(),
              id: id,
              paid_on: _paid_on?.build(),
              trans_id: trans_id,
              user_id: user_id);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'date';
        _date?.build();

        _$failedField = 'paid_on';
        _paid_on?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_stream_cursor_value_input',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_sum_order_by extends Gpayments_sum_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_sum_order_by(
          [void Function(Gpayments_sum_order_byBuilder)? updates]) =>
      (new Gpayments_sum_order_byBuilder()..update(updates))._build();

  _$Gpayments_sum_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_sum_order_by rebuild(
          void Function(Gpayments_sum_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_sum_order_byBuilder toBuilder() =>
      new Gpayments_sum_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_sum_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_sum_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_sum_order_byBuilder
    implements Builder<Gpayments_sum_order_by, Gpayments_sum_order_byBuilder> {
  _$Gpayments_sum_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_sum_order_byBuilder();

  Gpayments_sum_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_sum_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_sum_order_by;
  }

  @override
  void update(void Function(Gpayments_sum_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_sum_order_by build() => _build();

  _$Gpayments_sum_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_sum_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_updates extends Gpayments_updates {
  @override
  final Gpayments_inc_input? G_inc;
  @override
  final Gpayments_set_input? G_set;
  @override
  final Gpayments_bool_exp where;

  factory _$Gpayments_updates(
          [void Function(Gpayments_updatesBuilder)? updates]) =>
      (new Gpayments_updatesBuilder()..update(updates))._build();

  _$Gpayments_updates._({this.G_inc, this.G_set, required this.where})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(where, r'Gpayments_updates', 'where');
  }

  @override
  Gpayments_updates rebuild(void Function(Gpayments_updatesBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_updatesBuilder toBuilder() =>
      new Gpayments_updatesBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_updates &&
        G_inc == other.G_inc &&
        G_set == other.G_set &&
        where == other.where;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, G_inc.hashCode), G_set.hashCode), where.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_updates')
          ..add('G_inc', G_inc)
          ..add('G_set', G_set)
          ..add('where', where))
        .toString();
  }
}

class Gpayments_updatesBuilder
    implements Builder<Gpayments_updates, Gpayments_updatesBuilder> {
  _$Gpayments_updates? _$v;

  Gpayments_inc_inputBuilder? _G_inc;
  Gpayments_inc_inputBuilder get G_inc =>
      _$this._G_inc ??= new Gpayments_inc_inputBuilder();
  set G_inc(Gpayments_inc_inputBuilder? G_inc) => _$this._G_inc = G_inc;

  Gpayments_set_inputBuilder? _G_set;
  Gpayments_set_inputBuilder get G_set =>
      _$this._G_set ??= new Gpayments_set_inputBuilder();
  set G_set(Gpayments_set_inputBuilder? G_set) => _$this._G_set = G_set;

  Gpayments_bool_expBuilder? _where;
  Gpayments_bool_expBuilder get where =>
      _$this._where ??= new Gpayments_bool_expBuilder();
  set where(Gpayments_bool_expBuilder? where) => _$this._where = where;

  Gpayments_updatesBuilder();

  Gpayments_updatesBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_inc = $v.G_inc?.toBuilder();
      _G_set = $v.G_set?.toBuilder();
      _where = $v.where.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_updates other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_updates;
  }

  @override
  void update(void Function(Gpayments_updatesBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_updates build() => _build();

  _$Gpayments_updates _build() {
    _$Gpayments_updates _$result;
    try {
      _$result = _$v ??
          new _$Gpayments_updates._(
              G_inc: _G_inc?.build(),
              G_set: _G_set?.build(),
              where: where.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_inc';
        _G_inc?.build();
        _$failedField = 'G_set';
        _G_set?.build();
        _$failedField = 'where';
        where.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gpayments_updates', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_var_pop_order_by extends Gpayments_var_pop_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_var_pop_order_by(
          [void Function(Gpayments_var_pop_order_byBuilder)? updates]) =>
      (new Gpayments_var_pop_order_byBuilder()..update(updates))._build();

  _$Gpayments_var_pop_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_var_pop_order_by rebuild(
          void Function(Gpayments_var_pop_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_var_pop_order_byBuilder toBuilder() =>
      new Gpayments_var_pop_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_var_pop_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_var_pop_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_var_pop_order_byBuilder
    implements
        Builder<Gpayments_var_pop_order_by, Gpayments_var_pop_order_byBuilder> {
  _$Gpayments_var_pop_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_var_pop_order_byBuilder();

  Gpayments_var_pop_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_var_pop_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_var_pop_order_by;
  }

  @override
  void update(void Function(Gpayments_var_pop_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_var_pop_order_by build() => _build();

  _$Gpayments_var_pop_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_var_pop_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_var_samp_order_by extends Gpayments_var_samp_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_var_samp_order_by(
          [void Function(Gpayments_var_samp_order_byBuilder)? updates]) =>
      (new Gpayments_var_samp_order_byBuilder()..update(updates))._build();

  _$Gpayments_var_samp_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_var_samp_order_by rebuild(
          void Function(Gpayments_var_samp_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_var_samp_order_byBuilder toBuilder() =>
      new Gpayments_var_samp_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_var_samp_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_var_samp_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_var_samp_order_byBuilder
    implements
        Builder<Gpayments_var_samp_order_by,
            Gpayments_var_samp_order_byBuilder> {
  _$Gpayments_var_samp_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_var_samp_order_byBuilder();

  Gpayments_var_samp_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_var_samp_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_var_samp_order_by;
  }

  @override
  void update(void Function(Gpayments_var_samp_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_var_samp_order_by build() => _build();

  _$Gpayments_var_samp_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_var_samp_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gpayments_variance_order_by extends Gpayments_variance_order_by {
  @override
  final Gorder_by? cable_id;
  @override
  final Gorder_by? collected_by;
  @override
  final Gorder_by? id;
  @override
  final Gorder_by? trans_id;
  @override
  final Gorder_by? user_id;

  factory _$Gpayments_variance_order_by(
          [void Function(Gpayments_variance_order_byBuilder)? updates]) =>
      (new Gpayments_variance_order_byBuilder()..update(updates))._build();

  _$Gpayments_variance_order_by._(
      {this.cable_id, this.collected_by, this.id, this.trans_id, this.user_id})
      : super._();

  @override
  Gpayments_variance_order_by rebuild(
          void Function(Gpayments_variance_order_byBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gpayments_variance_order_byBuilder toBuilder() =>
      new Gpayments_variance_order_byBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gpayments_variance_order_by &&
        cable_id == other.cable_id &&
        collected_by == other.collected_by &&
        id == other.id &&
        trans_id == other.trans_id &&
        user_id == other.user_id;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, cable_id.hashCode), collected_by.hashCode),
                id.hashCode),
            trans_id.hashCode),
        user_id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gpayments_variance_order_by')
          ..add('cable_id', cable_id)
          ..add('collected_by', collected_by)
          ..add('id', id)
          ..add('trans_id', trans_id)
          ..add('user_id', user_id))
        .toString();
  }
}

class Gpayments_variance_order_byBuilder
    implements
        Builder<Gpayments_variance_order_by,
            Gpayments_variance_order_byBuilder> {
  _$Gpayments_variance_order_by? _$v;

  Gorder_by? _cable_id;
  Gorder_by? get cable_id => _$this._cable_id;
  set cable_id(Gorder_by? cable_id) => _$this._cable_id = cable_id;

  Gorder_by? _collected_by;
  Gorder_by? get collected_by => _$this._collected_by;
  set collected_by(Gorder_by? collected_by) =>
      _$this._collected_by = collected_by;

  Gorder_by? _id;
  Gorder_by? get id => _$this._id;
  set id(Gorder_by? id) => _$this._id = id;

  Gorder_by? _trans_id;
  Gorder_by? get trans_id => _$this._trans_id;
  set trans_id(Gorder_by? trans_id) => _$this._trans_id = trans_id;

  Gorder_by? _user_id;
  Gorder_by? get user_id => _$this._user_id;
  set user_id(Gorder_by? user_id) => _$this._user_id = user_id;

  Gpayments_variance_order_byBuilder();

  Gpayments_variance_order_byBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _cable_id = $v.cable_id;
      _collected_by = $v.collected_by;
      _id = $v.id;
      _trans_id = $v.trans_id;
      _user_id = $v.user_id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gpayments_variance_order_by other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gpayments_variance_order_by;
  }

  @override
  void update(void Function(Gpayments_variance_order_byBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gpayments_variance_order_by build() => _build();

  _$Gpayments_variance_order_by _build() {
    final _$result = _$v ??
        new _$Gpayments_variance_order_by._(
            cable_id: cable_id,
            collected_by: collected_by,
            id: id,
            trans_id: trans_id,
            user_id: user_id);
    replace(_$result);
    return _$result;
  }
}

class _$Gtimestamptz_comparison_exp extends Gtimestamptz_comparison_exp {
  @override
  final Gtimestamptz? G_eq;
  @override
  final Gtimestamptz? G_gt;
  @override
  final Gtimestamptz? G_gte;
  @override
  final BuiltList<Gtimestamptz>? G_in;
  @override
  final bool? G_is_null;
  @override
  final Gtimestamptz? G_lt;
  @override
  final Gtimestamptz? G_lte;
  @override
  final Gtimestamptz? G_neq;
  @override
  final BuiltList<Gtimestamptz>? G_nin;

  factory _$Gtimestamptz_comparison_exp(
          [void Function(Gtimestamptz_comparison_expBuilder)? updates]) =>
      (new Gtimestamptz_comparison_expBuilder()..update(updates))._build();

  _$Gtimestamptz_comparison_exp._(
      {this.G_eq,
      this.G_gt,
      this.G_gte,
      this.G_in,
      this.G_is_null,
      this.G_lt,
      this.G_lte,
      this.G_neq,
      this.G_nin})
      : super._();

  @override
  Gtimestamptz_comparison_exp rebuild(
          void Function(Gtimestamptz_comparison_expBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  Gtimestamptz_comparison_expBuilder toBuilder() =>
      new Gtimestamptz_comparison_expBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is Gtimestamptz_comparison_exp &&
        G_eq == other.G_eq &&
        G_gt == other.G_gt &&
        G_gte == other.G_gte &&
        G_in == other.G_in &&
        G_is_null == other.G_is_null &&
        G_lt == other.G_lt &&
        G_lte == other.G_lte &&
        G_neq == other.G_neq &&
        G_nin == other.G_nin;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc($jc($jc(0, G_eq.hashCode), G_gt.hashCode),
                                G_gte.hashCode),
                            G_in.hashCode),
                        G_is_null.hashCode),
                    G_lt.hashCode),
                G_lte.hashCode),
            G_neq.hashCode),
        G_nin.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(r'Gtimestamptz_comparison_exp')
          ..add('G_eq', G_eq)
          ..add('G_gt', G_gt)
          ..add('G_gte', G_gte)
          ..add('G_in', G_in)
          ..add('G_is_null', G_is_null)
          ..add('G_lt', G_lt)
          ..add('G_lte', G_lte)
          ..add('G_neq', G_neq)
          ..add('G_nin', G_nin))
        .toString();
  }
}

class Gtimestamptz_comparison_expBuilder
    implements
        Builder<Gtimestamptz_comparison_exp,
            Gtimestamptz_comparison_expBuilder> {
  _$Gtimestamptz_comparison_exp? _$v;

  GtimestamptzBuilder? _G_eq;
  GtimestamptzBuilder get G_eq => _$this._G_eq ??= new GtimestamptzBuilder();
  set G_eq(GtimestamptzBuilder? G_eq) => _$this._G_eq = G_eq;

  GtimestamptzBuilder? _G_gt;
  GtimestamptzBuilder get G_gt => _$this._G_gt ??= new GtimestamptzBuilder();
  set G_gt(GtimestamptzBuilder? G_gt) => _$this._G_gt = G_gt;

  GtimestamptzBuilder? _G_gte;
  GtimestamptzBuilder get G_gte => _$this._G_gte ??= new GtimestamptzBuilder();
  set G_gte(GtimestamptzBuilder? G_gte) => _$this._G_gte = G_gte;

  ListBuilder<Gtimestamptz>? _G_in;
  ListBuilder<Gtimestamptz> get G_in =>
      _$this._G_in ??= new ListBuilder<Gtimestamptz>();
  set G_in(ListBuilder<Gtimestamptz>? G_in) => _$this._G_in = G_in;

  bool? _G_is_null;
  bool? get G_is_null => _$this._G_is_null;
  set G_is_null(bool? G_is_null) => _$this._G_is_null = G_is_null;

  GtimestamptzBuilder? _G_lt;
  GtimestamptzBuilder get G_lt => _$this._G_lt ??= new GtimestamptzBuilder();
  set G_lt(GtimestamptzBuilder? G_lt) => _$this._G_lt = G_lt;

  GtimestamptzBuilder? _G_lte;
  GtimestamptzBuilder get G_lte => _$this._G_lte ??= new GtimestamptzBuilder();
  set G_lte(GtimestamptzBuilder? G_lte) => _$this._G_lte = G_lte;

  GtimestamptzBuilder? _G_neq;
  GtimestamptzBuilder get G_neq => _$this._G_neq ??= new GtimestamptzBuilder();
  set G_neq(GtimestamptzBuilder? G_neq) => _$this._G_neq = G_neq;

  ListBuilder<Gtimestamptz>? _G_nin;
  ListBuilder<Gtimestamptz> get G_nin =>
      _$this._G_nin ??= new ListBuilder<Gtimestamptz>();
  set G_nin(ListBuilder<Gtimestamptz>? G_nin) => _$this._G_nin = G_nin;

  Gtimestamptz_comparison_expBuilder();

  Gtimestamptz_comparison_expBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_eq = $v.G_eq?.toBuilder();
      _G_gt = $v.G_gt?.toBuilder();
      _G_gte = $v.G_gte?.toBuilder();
      _G_in = $v.G_in?.toBuilder();
      _G_is_null = $v.G_is_null;
      _G_lt = $v.G_lt?.toBuilder();
      _G_lte = $v.G_lte?.toBuilder();
      _G_neq = $v.G_neq?.toBuilder();
      _G_nin = $v.G_nin?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(Gtimestamptz_comparison_exp other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$Gtimestamptz_comparison_exp;
  }

  @override
  void update(void Function(Gtimestamptz_comparison_expBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  Gtimestamptz_comparison_exp build() => _build();

  _$Gtimestamptz_comparison_exp _build() {
    _$Gtimestamptz_comparison_exp _$result;
    try {
      _$result = _$v ??
          new _$Gtimestamptz_comparison_exp._(
              G_eq: _G_eq?.build(),
              G_gt: _G_gt?.build(),
              G_gte: _G_gte?.build(),
              G_in: _G_in?.build(),
              G_is_null: G_is_null,
              G_lt: _G_lt?.build(),
              G_lte: _G_lte?.build(),
              G_neq: _G_neq?.build(),
              G_nin: _G_nin?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'G_eq';
        _G_eq?.build();
        _$failedField = 'G_gt';
        _G_gt?.build();
        _$failedField = 'G_gte';
        _G_gte?.build();
        _$failedField = 'G_in';
        _G_in?.build();

        _$failedField = 'G_lt';
        _G_lt?.build();
        _$failedField = 'G_lte';
        _G_lte?.build();
        _$failedField = 'G_neq';
        _G_neq?.build();
        _$failedField = 'G_nin';
        _G_nin?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            r'Gtimestamptz_comparison_exp', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

// ignore_for_file: always_put_control_body_on_new_line,always_specify_types,annotate_overrides,avoid_annotating_with_dynamic,avoid_as,avoid_catches_without_on_clauses,avoid_returning_this,deprecated_member_use_from_same_package,lines_longer_than_80_chars,no_leading_underscores_for_local_identifiers,omit_local_variable_types,prefer_expression_function_bodies,sort_constructors_first,test_types_in_equals,unnecessary_const,unnecessary_new,unnecessary_lambdas
